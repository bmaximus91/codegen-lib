
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on 13-04-2015 21:47:00 by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class Employee
'
'************************************************************
'</comments>
Namespace VbBusObjects

#Region "Interface"
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public Interface IEmployee : Inherits IModelObject
		Property EmployeeId As System.Int64
		Property EmployeeName As System.String
		Property EmployeeRankId As Nullable(Of System.Int64)
		Property Salary As Nullable(Of System.Decimal)
		Property Address As System.String
		Property Telephone As System.String
		Property Mobile As System.String
		Property IdNumber As System.String
		Property SSINumber As System.String
		Property HireDate As Nullable(Of System.DateTime)
		Property NumDependents As Nullable(Of System.Int64)
		Property CreateDate As Nullable(Of System.DateTime)
		Property UpdateDate As Nullable(Of System.DateTime)
		Property UpdateUser As System.String
		Property CreateUser As System.String
		Property EmployeeTypeCode As System.String
		Property Rank As VbBusObjects.EmployeeRank
		Property EmployeeInfo As VbBusObjects.EmployeeInfo
		Property EmployeeProjects As IEnumerable(Of VbBusObjects.EmployeeProject)
		Sub AddEmployeeProject(val As VbBusObjects.EmployeeProject)
		Sub RemoveEmployeeProject(val As VbBusObjects.EmployeeProject)
		Function getDeletedEmployeeProjects() As IEnumerable(Of VbBusObjects.EmployeeProject)
		Function getEmployeeProject(ByVal i As Integer) As VbBusObjects.EmployeeProject

	End Interface
#End Region

	<DefaultMapperAttr(GetType(EmployeeDBMapper)), _
	 ComVisible(False), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
	Public Class EmployeeBase
		Inherits ModelObject
		Implements IEquatable(Of EmployeeBase), 
		IAuditable, System.IComparable(Of Employee), IEmployee

#Region "Constructor"

		Public Sub New()
			Me.addValidator(New EmployeeRequiredFieldsValidator)
		End Sub

#End Region

#Region "Children and Parents"

		Public Overrides Function getChildren() As List(Of ModelObject)
			Dim ret As New List(Of ModelObject)()
			If Me._EmployeeInfo IsNot Nothing Then
				ret.Add(Me.EmployeeInfo)
			End If
			If Me._EmployeeProjectsLoaded Then ' check if loaded first!
				Dim lp As List(Of ModelObject) = Me._EmployeeProjects.ConvertAll( _
				  New Converter(Of VbBusObjects.EmployeeProject, ModelObject)(
				 Function(pf As VbBusObjects.EmployeeProject)
					 Return DirectCast(pf, ModelObject)
				 End Function))
				ret.AddRange(lp)
			End If

			Return ret
		End Function

		Public Overrides Function getParents() As List(Of ModelObject)
			Dim ret As New List(Of ModelObject)()
			If Me._RankLoaded Then
				ret.Add(Me.Rank)
			End If

			Return ret
		End Function

#End Region
#Region "Field CONSTANTS"

		Public Const STR_FLD_EMPLOYEEID As String = "EmployeeId"
		Public Const STR_FLD_EMPLOYEENAME As String = "EmployeeName"
		Public Const STR_FLD_EMPLOYEERANKID As String = "EmployeeRankId"
		Public Const STR_FLD_SALARY As String = "Salary"
		Public Const STR_FLD_ADDRESS As String = "Address"
		Public Const STR_FLD_TELEPHONE As String = "Telephone"
		Public Const STR_FLD_MOBILE As String = "Mobile"
		Public Const STR_FLD_IDNUMBER As String = "IdNumber"
		Public Const STR_FLD_SSINUMBER As String = "SSINumber"
		Public Const STR_FLD_HIREDATE As String = "HireDate"
		Public Const STR_FLD_NUMDEPENDENTS As String = "NumDependents"
		Public Const STR_FLD_CREATEDATE As String = "CreateDate"
		Public Const STR_FLD_UPDATEDATE As String = "UpdateDate"
		Public Const STR_FLD_UPDATEUSER As String = "UpdateUser"
		Public Const STR_FLD_CREATEUSER As String = "CreateUser"
		Public Const STR_FLD_EMPLOYEETYPECODE As String = "EmployeeTypeCode"


		Public Const FLD_EMPLOYEEID As Integer = 0
		Public Const FLD_EMPLOYEENAME As Integer = 1
		Public Const FLD_EMPLOYEERANKID As Integer = 2
		Public Const FLD_SALARY As Integer = 3
		Public Const FLD_ADDRESS As Integer = 4
		Public Const FLD_TELEPHONE As Integer = 5
		Public Const FLD_MOBILE As Integer = 6
		Public Const FLD_IDNUMBER As Integer = 7
		Public Const FLD_SSINUMBER As Integer = 8
		Public Const FLD_HIREDATE As Integer = 9
		Public Const FLD_NUMDEPENDENTS As Integer = 10
		Public Const FLD_CREATEDATE As Integer = 11
		Public Const FLD_UPDATEDATE As Integer = 12
		Public Const FLD_UPDATEUSER As Integer = 13
		Public Const FLD_CREATEUSER As Integer = 14
		Public Const FLD_EMPLOYEETYPECODE As Integer = 15



		'''<summary> Returns the names of fields in the object as a string array.
		''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		''' <returns> string array </returns>	 
		Public Overrides Function getFieldList() As String()
			Return New String() {STR_FLD_EMPLOYEEID, STR_FLD_EMPLOYEENAME, STR_FLD_EMPLOYEERANKID, STR_FLD_SALARY, STR_FLD_ADDRESS, STR_FLD_TELEPHONE, STR_FLD_MOBILE, STR_FLD_IDNUMBER, STR_FLD_SSINUMBER, STR_FLD_HIREDATE, STR_FLD_NUMDEPENDENTS, STR_FLD_CREATEDATE, STR_FLD_UPDATEDATE, STR_FLD_UPDATEUSER, STR_FLD_CREATEUSER, STR_FLD_EMPLOYEETYPECODE}
		End Function

#End Region

#Region "Field Declarations"


		Private _EmployeeId As System.Int64
		Private _EmployeeName As System.String = Nothing
		Private _EmployeeRankId As Nullable(Of System.Int64) = Nothing
		Private _Salary As Nullable(Of System.Decimal) = Nothing
		Private _Address As System.String = Nothing
		Private _Telephone As System.String = Nothing
		Private _Mobile As System.String = Nothing
		Private _IdNumber As System.String = Nothing
		Private _SSINumber As System.String = Nothing
		Private _HireDate As Nullable(Of System.DateTime) = Nothing
		Private _NumDependents As Nullable(Of System.Int64) = Nothing
		Private _CreateDate As Nullable(Of System.DateTime) = Nothing
		Private _UpdateDate As Nullable(Of System.DateTime) = Nothing
		Private _UpdateUser As System.String = Nothing
		Private _CreateUser As System.String = Nothing
		Private _EmployeeTypeCode As System.String = Nothing

		' *****************************************
		' ****** CHILD OBJECTS ********************
		Private _Rank As VbBusObjects.EmployeeRank = Nothing ''''' initialize to nothing, for lazy load logic below !!!
		Private _EmployeeInfo As VbBusObjects.EmployeeInfo = Nothing ''''' initialize to nothing, for lazy load logic below !!!
		Private _EmployeeProjects As List(Of VbBusObjects.EmployeeProject) = Nothing ''''' initialize to nothing, for lazy load logic below !!!
		Private _deletedEmployeeProjects As List(Of VbBusObjects.EmployeeProject) = New List(Of VbBusObjects.EmployeeProject) ''''' initialize to empty list !!!

		' *****************************************
		' ****** END CHILD OBJECTS ********************


#End Region

#Region "Field Properties"

		Public Overridable Property EmployeeId As System.Int64 _
		 Implements IEmployee.EmployeeId
			Get
				Return _EmployeeId
			End Get
			Set(value As System.Int64)
				If ModelObject.valueChanged(_EmployeeId, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_EMPLOYEEID)
					End If
					Me._EmployeeId = value

					Me.raiseBroadcastIdChange()

				End If
			End Set
		End Property
		Public Sub setEmployeeId(ByVal val As String)
			If IsNumeric(val) Then
				Me.EmployeeId = CType(val, System.Int64)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.EmployeeId = Nothing
			Else
				Throw New ApplicationException("Invalid Integer Number, field:EmployeeId, value:" & val)
			End If
		End Sub
		Public Overridable Property EmployeeName As System.String _
		 Implements IEmployee.EmployeeName
			Get
				Return _EmployeeName
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 50 Then
					Throw New ModelObjectFieldTooLongException("EmployeeName")
				End If
				If ModelObject.valueChanged(_EmployeeName, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_EMPLOYEENAME)
					End If
					Me._EmployeeName = value

				End If
			End Set
		End Property
		Public Sub setEmployeeName(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.EmployeeName = val
			Else
				Me.EmployeeName = Nothing
			End If
		End Sub
		Public Overridable Property EmployeeRankId As Nullable(Of System.Int64) _
		 Implements IEmployee.EmployeeRankId
			Get
				Return _EmployeeRankId
			End Get
			Set(ByVal value As Nullable(Of System.Int64))
				If ModelObject.valueChanged(_EmployeeRankId, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_EMPLOYEERANKID)
					End If
					Me._EmployeeRankId = value

				End If
			End Set
		End Property
		Public Sub setEmployeeRankId(ByVal val As String)
			If IsNumeric(val) Then
				Me.EmployeeRankId = CType(val, System.Int64)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.EmployeeRankId = Nothing
			Else
				Throw New ApplicationException("Invalid Integer Number, field:EmployeeRankId, value:" & val)
			End If
		End Sub
		Public Overridable Property Salary As Nullable(Of System.Decimal) _
		 Implements IEmployee.Salary
			Get
				Return _Salary
			End Get
			Set(ByVal value As Nullable(Of System.Decimal))
				If ModelObject.valueChanged(_Salary, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_SALARY)
					End If
					Me._Salary = value

				End If
			End Set
		End Property
		Public Sub setSalary(ByVal val As String)
			If IsNumeric(val) Then
				Me.Salary = CDec(val)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.Salary = Nothing
			Else
				Throw New ApplicationException("Invalid Decimal Number, field:Salary, value:" & val)
			End If
		End Sub
		Public Overridable Property Address As System.String _
		 Implements IEmployee.Address
			Get
				Return _Address
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 50 Then
					Throw New ModelObjectFieldTooLongException("Address")
				End If
				If ModelObject.valueChanged(_Address, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_ADDRESS)
					End If
					Me._Address = value

				End If
			End Set
		End Property
		Public Sub setAddress(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.Address = val
			Else
				Me.Address = Nothing
			End If
		End Sub
		Public Overridable Property Telephone As System.String _
		 Implements IEmployee.Telephone
			Get
				Return _Telephone
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 10 Then
					Throw New ModelObjectFieldTooLongException("Telephone")
				End If
				If ModelObject.valueChanged(_Telephone, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_TELEPHONE)
					End If
					Me._Telephone = value

				End If
			End Set
		End Property
		Public Sub setTelephone(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.Telephone = val
			Else
				Me.Telephone = Nothing
			End If
		End Sub
		Public Overridable Property Mobile As System.String _
		 Implements IEmployee.Mobile
			Get
				Return _Mobile
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 10 Then
					Throw New ModelObjectFieldTooLongException("Mobile")
				End If
				If ModelObject.valueChanged(_Mobile, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_MOBILE)
					End If
					Me._Mobile = value

				End If
			End Set
		End Property
		Public Sub setMobile(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.Mobile = val
			Else
				Me.Mobile = Nothing
			End If
		End Sub
		Public Overridable Property IdNumber As System.String _
		 Implements IEmployee.IdNumber
			Get
				Return _IdNumber
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 10 Then
					Throw New ModelObjectFieldTooLongException("IdNumber")
				End If
				If ModelObject.valueChanged(_IdNumber, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_IDNUMBER)
					End If
					Me._IdNumber = value

				End If
			End Set
		End Property
		Public Sub setIdNumber(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.IdNumber = val
			Else
				Me.IdNumber = Nothing
			End If
		End Sub
		Public Overridable Property SSINumber As System.String _
		 Implements IEmployee.SSINumber
			Get
				Return _SSINumber
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 10 Then
					Throw New ModelObjectFieldTooLongException("SSINumber")
				End If
				If ModelObject.valueChanged(_SSINumber, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_SSINUMBER)
					End If
					Me._SSINumber = value

				End If
			End Set
		End Property
		Public Sub setSSINumber(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.SSINumber = val
			Else
				Me.SSINumber = Nothing
			End If
		End Sub
		Public Overridable Property HireDate As Nullable(Of System.DateTime) _
		 Implements IEmployee.HireDate
			Get
				Return _HireDate
			End Get
			Set(ByVal value As Nullable(Of System.DateTime))
				If ModelObject.valueChanged(_HireDate, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_HIREDATE)
					End If
					Me._HireDate = value

				End If
			End Set
		End Property
		Public Sub setHireDate(ByVal val As String)
			If IsDate(val) Then
				Me.HireDate = CDate(val)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.HireDate = Nothing
			Else
				Throw New ApplicationException("Invalid Date, field:HireDate, value:" & val)
			End If
		End Sub
		Public Overridable Property NumDependents As Nullable(Of System.Int64) _
		 Implements IEmployee.NumDependents
			Get
				Return _NumDependents
			End Get
			Set(ByVal value As Nullable(Of System.Int64))
				If ModelObject.valueChanged(_NumDependents, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_NUMDEPENDENTS)
					End If
					Me._NumDependents = value

				End If
			End Set
		End Property
		Public Sub setNumDependents(ByVal val As String)
			If IsNumeric(val) Then
				Me.NumDependents = CType(val, System.Int64)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.NumDependents = Nothing
			Else
				Throw New ApplicationException("Invalid Integer Number, field:NumDependents, value:" & val)
			End If
		End Sub
		Public Overridable Property CreateDate As Nullable(Of System.DateTime) _
		 Implements IAuditable.CreateDate, IEmployee.CreateDate
			Get
				Return _CreateDate
			End Get
			Set(ByVal value As Nullable(Of System.DateTime))
				If ModelObject.valueChanged(_CreateDate, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_CREATEDATE)
					End If
					Me._CreateDate = value

				End If
			End Set
		End Property
		Public Sub setCreateDate(ByVal val As String)
			If IsDate(val) Then
				Me.CreateDate = CDate(val)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.CreateDate = Nothing
			Else
				Throw New ApplicationException("Invalid Date, field:CreateDate, value:" & val)
			End If
		End Sub
		Public Overridable Property UpdateDate As Nullable(Of System.DateTime) _
		 Implements IAuditable.UpdateDate, IEmployee.UpdateDate
			Get
				Return _UpdateDate
			End Get
			Set(ByVal value As Nullable(Of System.DateTime))
				If ModelObject.valueChanged(_UpdateDate, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_UPDATEDATE)
					End If
					Me._UpdateDate = value

				End If
			End Set
		End Property
		Public Sub setUpdateDate(ByVal val As String)
			If IsDate(val) Then
				Me.UpdateDate = CDate(val)
			ElseIf String.IsNullOrEmpty(val) Then
				Me.UpdateDate = Nothing
			Else
				Throw New ApplicationException("Invalid Date, field:UpdateDate, value:" & val)
			End If
		End Sub
		Public Overridable Property UpdateUser As System.String _
		 Implements IAuditable.UpdateUser, IEmployee.UpdateUser
			Get
				Return _UpdateUser
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 50 Then
					Throw New ModelObjectFieldTooLongException("updateUser")
				End If
				If ModelObject.valueChanged(_UpdateUser, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_UPDATEUSER)
					End If
					Me._UpdateUser = value

				End If
			End Set
		End Property
		Public Sub setUpdateUser(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.UpdateUser = val
			Else
				Me.UpdateUser = Nothing
			End If
		End Sub
		Public Overridable Property CreateUser As System.String _
		 Implements IAuditable.CreateUser, IEmployee.CreateUser
			Get
				Return _CreateUser
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 50 Then
					Throw New ModelObjectFieldTooLongException("createUser")
				End If
				If ModelObject.valueChanged(_CreateUser, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_CREATEUSER)
					End If
					Me._CreateUser = value

				End If
			End Set
		End Property
		Public Sub setCreateUser(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.CreateUser = val
			Else
				Me.CreateUser = Nothing
			End If
		End Sub
		Public Overridable Property EmployeeTypeCode As System.String _
		 Implements IEmployee.EmployeeTypeCode
			Get
				Return _EmployeeTypeCode
			End Get
			Set(value As System.String)
				If value IsNot Nothing AndAlso value.Length > 10 Then
					Throw New ModelObjectFieldTooLongException("EmployeeTypeCode")
				End If
				If ModelObject.valueChanged(_EmployeeTypeCode, value) Then
					If Me.IsObjectLoading = False Then
						Me.isDirty = True
						Me.setFieldChanged(STR_FLD_EMPLOYEETYPECODE)
					End If
					Me._EmployeeTypeCode = value

				End If
			End Set
		End Property
		Public Sub setEmployeeTypeCode(ByVal val As String)
			If Not String.isNullOrEmpty(val) Then
				Me.EmployeeTypeCode = val
			Else
				Me.EmployeeTypeCode = Nothing
			End If
		End Sub

		' ASSOCIATIONS GETTERS/SETTERS BELOW!

#Region "Association Rank"

		Friend _RankLoaded As Boolean

		''' <summary>
		''' Gets/Sets parent object
		''' </summary>
		Public Overridable Property Rank() As VbBusObjects.EmployeeRank _
		 Implements IEmployee.Rank
			'1-1 parent association
			Set(ByVal value As VbBusObjects.EmployeeRank)
				Me._Rank = value
				If value IsNot Nothing Then
					Me.EmployeeRankId = value.RankId
					AddHandler value.IDChanged, AddressOf Me.handleParentIdChanged
				Else
					Me.EmployeeRankId = Nothing
				End If

			End Set


			Get
				'LAZY LOADING! Only hit the database to get the child object if we need it
				If Me._Rank Is Nothing Then
					Me.loadRank()
				End If

				Return Me._Rank
			End Get
		End Property

		''' <summary>
		''' Loads parent object and sets the appropriate properties
		''' </summary>
		Public Overridable Sub loadRank()

			If Me._RankLoaded Then Return

			If Me._Rank Is Nothing AndAlso _
							Me.EmployeeRankId > 0 Then

				'call the setter here, not the private variable!
				Me.Rank = New VbBusObjects.DBMappers.EmployeeRankDBMapper().FindByKey( _
					 Me.EmployeeRankId.Value)

			End If ' me._Rank is Nothing

			Me._RankLoaded = True

		End Sub

#End Region


		Friend _EmployeeInfoLoaded As Boolean
		'associationChildOne.txt
		Public Overridable Property EmployeeInfo() As VbBusObjects.EmployeeInfo _
		 Implements IEmployee.EmployeeInfo
			'1-1 child association
			Set(ByVal value As VbBusObjects.EmployeeInfo)
				Me._EmployeeInfo = value
				If Me._EmployeeInfo IsNot Nothing Then
					Me._EmployeeInfo.EIEmployeeId = Me.EmployeeId
					AddHandler Me.IDChanged, AddressOf value.handleParentIdChanged

				End If
			End Set


			Get
				'LAZY LOADING! Only hit the database to get the child object if we need it
				If Not Me._EmployeeInfoLoaded Then
					Call Me.loadEmployeeInfo()
				End If

				Return Me._EmployeeInfo

			End Get
		End Property

		''' <summary>
		''' Loads child object from dabatabase, if not loaded already
		''' </summary>
		Private Sub loadEmployeeInfo()

			If Me._EmployeeInfoLoaded Then Return

			If Me.EmployeeId > 0 Then
				'call setter here, not the private variable
				Me.EmployeeInfo = _
				 New VbBusObjects.DBMappers.EmployeeInfoDBMapper().findWhere( _
					"EIEmployeeId={0}", Me.EmployeeId)


			End If

			'set the loaded flag here
			Me._EmployeeInfoLoaded = True

		End Sub




#Region "Association EmployeeProjects"
		'associationChildMany.txt
		Friend _EmployeeProjectsLoaded As Boolean

		Public Overridable Function getEmployeeProject(ByVal i As Integer) As VbBusObjects.EmployeeProject _
		  Implements IEmployee.getEmployeeProject

			Me.loadEmployeeProjects()
			If Me._EmployeeProjects.Count >= (i - 1) Then
				Return Me._EmployeeProjects.Item(i)
			End If
			Return Nothing

		End Function

		Public Overridable Sub AddEmployeeProject _
		  (val As VbBusObjects.EmployeeProject) _
		  Implements IEmployee.AddEmployeeProject
			'1-Many , add a single item!
			Me.loadEmployeeProjects()
			val.EPEmployeeId = Me.EmployeeId
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			Me._EmployeeProjects.add(val)

		End Sub

		Public Overridable Sub ClearEmployeeProjects()

			Me.loadEmployeeProjects()
			Me._deletedEmployeeProjects.AddRange(Me._EmployeeProjects)
			Me._EmployeeProjects.Clear()

		End Sub

		Public Overridable Sub RemoveEmployeeProject( _
		   val As VbBusObjects.EmployeeProject) _
		   Implements IEmployee.RemoveEmployeeProject

			Me.loadEmployeeProjects()
			Me._deletedEmployeeProjects.add(val)
			Me._EmployeeProjects.remove(val)

		End Sub


		Public Overridable Function getDeletedEmployeeProjects() As IEnumerable(Of VbBusObjects.EmployeeProject) _
		   Implements IEmployee.getDeletedEmployeeProjects

			Return Me._deletedEmployeeProjects

		End Function

		Public Overridable Property EmployeeProjects() _
	 As IEnumerable(Of VbBusObjects.EmployeeProject) _
	 Implements IEmployee.EmployeeProjects

			Get
				'1 to many relation
				'LAZY LOADING! Only hit the database to get the child object if we need it
				If Me._EmployeeProjects Is Nothing Then
					Me.loadEmployeeProjects()
				End If ' me._EmployeeProjects is Nothing

				Return Me._EmployeeProjects
			End Get

			Set(value As IEnumerable(Of VbBusObjects.EmployeeProject))
				If value Is Nothing Then
					Me._EmployeeProjects = Nothing
				Else
					Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)
					Me.addToEmployeeProjectsList(value)
				End If
			End Set

		End Property

		''' <summary>
		''' Private method to add to the EmployeeProjects List. 
		''' The list must have aldready been initialized
		''' </summary>
		Private Sub addToEmployeeProjectsList(ByVal value As IEnumerable(Of VbBusObjects.EmployeeProject))

			Dim enumtor As IEnumerator(Of VbBusObjects.EmployeeProject) = value.GetEnumerator

			While enumtor.MoveNext
				Dim v As VbBusObjects.EmployeeProject = enumtor.Current
				AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
				Me._EmployeeProjects.Add(v)
			End While

		End Sub

		''' <summary>
		''' Loads child objects from dabatabase, if not loaded already
		''' </summary>
		Public Overridable Sub loadEmployeeProjects()

			If Me._EmployeeProjectsLoaded Then Return
			'init list
			Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)

			If Not Me.isNew Then

				Me.addToEmployeeProjectsList(New VbBusObjects.DBMappers.EmployeeProjectDBMapper().findList( _
				  "EPEmployeeId={0}", Me.EmployeeId))
			End If

			Me._EmployeeProjectsLoaded = True
		End Sub
#End Region


#End Region

#Region "Getters/Setters of values by field index/name"
		Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object


			Select Case fieldKey
				Case FLD_EMPLOYEEID
					Return Me.EmployeeId
				Case FLD_EMPLOYEENAME
					Return Me.EmployeeName
				Case FLD_EMPLOYEERANKID
					Return Me.EmployeeRankId
				Case FLD_SALARY
					Return Me.Salary
				Case FLD_ADDRESS
					Return Me.Address
				Case FLD_TELEPHONE
					Return Me.Telephone
				Case FLD_MOBILE
					Return Me.Mobile
				Case FLD_IDNUMBER
					Return Me.IdNumber
				Case FLD_SSINUMBER
					Return Me.SSINumber
				Case FLD_HIREDATE
					Return Me.HireDate
				Case FLD_NUMDEPENDENTS
					Return Me.NumDependents
				Case FLD_CREATEDATE
					Return Me.CreateDate
				Case FLD_UPDATEDATE
					Return Me.UpdateDate
				Case FLD_UPDATEUSER
					Return Me.UpdateUser
				Case FLD_CREATEUSER
					Return Me.CreateUser
				Case FLD_EMPLOYEETYPECODE
					Return Me.EmployeeTypeCode
				Case Else
					Return Nothing
			End Select


		End Function

		Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
			fieldKey = fieldKey.ToLower

			If fieldKey = STR_FLD_EMPLOYEEID.ToLower() Then
				Return Me.EmployeeId
			ElseIf fieldKey = STR_FLD_EMPLOYEENAME.ToLower() Then
				Return Me.EmployeeName
			ElseIf fieldKey = STR_FLD_EMPLOYEERANKID.ToLower() Then
				Return Me.EmployeeRankId
			ElseIf fieldKey = STR_FLD_SALARY.ToLower() Then
				Return Me.Salary
			ElseIf fieldKey = STR_FLD_ADDRESS.ToLower() Then
				Return Me.Address
			ElseIf fieldKey = STR_FLD_TELEPHONE.ToLower() Then
				Return Me.Telephone
			ElseIf fieldKey = STR_FLD_MOBILE.ToLower() Then
				Return Me.Mobile
			ElseIf fieldKey = STR_FLD_IDNUMBER.ToLower() Then
				Return Me.IdNumber
			ElseIf fieldKey = STR_FLD_SSINUMBER.ToLower() Then
				Return Me.SSINumber
			ElseIf fieldKey = STR_FLD_HIREDATE.ToLower() Then
				Return Me.HireDate
			ElseIf fieldKey = STR_FLD_NUMDEPENDENTS.ToLower() Then
				Return Me.NumDependents
			ElseIf fieldKey = STR_FLD_CREATEDATE.ToLower() Then
				Return Me.CreateDate
			ElseIf fieldKey = STR_FLD_UPDATEDATE.ToLower() Then
				Return Me.UpdateDate
			ElseIf fieldKey = STR_FLD_UPDATEUSER.ToLower() Then
				Return Me.UpdateUser
			ElseIf fieldKey = STR_FLD_CREATEUSER.ToLower() Then
				Return Me.CreateUser
			ElseIf fieldKey = STR_FLD_EMPLOYEETYPECODE.ToLower() Then
				Return Me.EmployeeTypeCode
			Else
				Return Nothing
			End If
		End Function

		Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)

			Select Case fieldKey
				Case FLD_EMPLOYEEID
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.EmployeeId = Nothing
					Else
						Me.EmployeeId = CType(val, System.Int64)
					End If
					Return
				Case FLD_EMPLOYEENAME
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.EmployeeName = Nothing
					Else
						Me.EmployeeName = CType(val, System.String)
					End If
					Return
				Case FLD_EMPLOYEERANKID
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.EmployeeRankId = Nothing
					Else
						Me.EmployeeRankId = CType(val, System.Int64)
					End If
					Return
				Case FLD_SALARY
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.Salary = Nothing
					Else
						Me.Salary = CType(val, System.Decimal)
					End If
					Return
				Case FLD_ADDRESS
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.Address = Nothing
					Else
						Me.Address = CType(val, System.String)
					End If
					Return
				Case FLD_TELEPHONE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.Telephone = Nothing
					Else
						Me.Telephone = CType(val, System.String)
					End If
					Return
				Case FLD_MOBILE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.Mobile = Nothing
					Else
						Me.Mobile = CType(val, System.String)
					End If
					Return
				Case FLD_IDNUMBER
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.IdNumber = Nothing
					Else
						Me.IdNumber = CType(val, System.String)
					End If
					Return
				Case FLD_SSINUMBER
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.SSINumber = Nothing
					Else
						Me.SSINumber = CType(val, System.String)
					End If
					Return
				Case FLD_HIREDATE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.HireDate = Nothing
					Else
						Me.HireDate = CType(val, System.DateTime)
					End If
					Return
				Case FLD_NUMDEPENDENTS
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.NumDependents = Nothing
					Else
						Me.NumDependents = CType(val, System.Int64)
					End If
					Return
				Case FLD_CREATEDATE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.CreateDate = Nothing
					Else
						Me.CreateDate = CType(val, System.DateTime)
					End If
					Return
				Case FLD_UPDATEDATE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.UpdateDate = Nothing
					Else
						Me.UpdateDate = CType(val, System.DateTime)
					End If
					Return
				Case FLD_UPDATEUSER
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.UpdateUser = Nothing
					Else
						Me.UpdateUser = CType(val, System.String)
					End If
					Return
				Case FLD_CREATEUSER
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.CreateUser = Nothing
					Else
						Me.CreateUser = CType(val, System.String)
					End If
					Return
				Case FLD_EMPLOYEETYPECODE
					If Val Is DBNull.Value OrElse Val Is Nothing Then
						Me.EmployeeTypeCode = Nothing
					Else
						Me.EmployeeTypeCode = CType(val, System.String)
					End If
					Return
				Case Else
					Return
			End Select


		End Sub

		Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)

			fieldKey = fieldKey.ToLower

			If fieldKey = STR_FLD_EMPLOYEEID.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.EmployeeId = Nothing
				Else
					Me.EmployeeId = CType(val, System.Int64)
				End If
				Return
			ElseIf fieldKey = STR_FLD_EMPLOYEENAME.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.EmployeeName = Nothing
				Else
					Me.EmployeeName = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_EMPLOYEERANKID.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.EmployeeRankId = Nothing
				Else
					Me.EmployeeRankId = CType(val, System.Int64)
				End If
				Return
			ElseIf fieldKey = STR_FLD_SALARY.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.Salary = Nothing
				Else
					Me.Salary = CType(val, System.Decimal)
				End If
				Return
			ElseIf fieldKey = STR_FLD_ADDRESS.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.Address = Nothing
				Else
					Me.Address = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_TELEPHONE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.Telephone = Nothing
				Else
					Me.Telephone = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_MOBILE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.Mobile = Nothing
				Else
					Me.Mobile = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_IDNUMBER.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.IdNumber = Nothing
				Else
					Me.IdNumber = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_SSINUMBER.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.SSINumber = Nothing
				Else
					Me.SSINumber = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_HIREDATE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.HireDate = Nothing
				Else
					Me.HireDate = CType(val, System.DateTime)
				End If
				Return
			ElseIf fieldKey = STR_FLD_NUMDEPENDENTS.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.NumDependents = Nothing
				Else
					Me.NumDependents = CType(val, System.Int64)
				End If
				Return
			ElseIf fieldKey = STR_FLD_CREATEDATE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.CreateDate = Nothing
				Else
					Me.CreateDate = CType(val, System.DateTime)
				End If
				Return
			ElseIf fieldKey = STR_FLD_UPDATEDATE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.UpdateDate = Nothing
				Else
					Me.UpdateDate = CType(val, System.DateTime)
				End If
				Return
			ElseIf fieldKey = STR_FLD_UPDATEUSER.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.UpdateUser = Nothing
				Else
					Me.UpdateUser = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_CREATEUSER.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.CreateUser = Nothing
				Else
					Me.CreateUser = CType(val, System.String)
				End If
				Return
			ElseIf fieldKey = STR_FLD_EMPLOYEETYPECODE.ToLower() Then
				If Val Is DBNull.Value OrElse Val Is Nothing Then
					Me.EmployeeTypeCode = Nothing
				Else
					Me.EmployeeTypeCode = CType(val, System.String)
				End If
				Return
			End If

		End Sub

#End Region
#Region "Overrides of GetHashCode and Equals "
		Public Overloads Function Equals(ByVal other As EmployeeBase) As Boolean _
		 Implements System.IEquatable(Of EmployeeBase).Equals

			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False
			If other Is Me Then Return True

			Return Me.EmployeeId = other.EmployeeId _
			 AndAlso Me.EmployeeName = other.EmployeeName _
			 AndAlso Me.EmployeeRankId.GetValueOrDefault = other.EmployeeRankId.GetValueOrDefault _
			 AndAlso Me.Salary.GetValueOrDefault = other.Salary.GetValueOrDefault _
			 AndAlso Me.Address = other.Address _
			 AndAlso Me.Telephone = other.Telephone _
			 AndAlso Me.Mobile = other.Mobile _
			 AndAlso Me.IdNumber = other.IdNumber _
			 AndAlso Me.SSINumber = other.SSINumber _
			 AndAlso Me.HireDate.GetValueOrDefault = other.HireDate.GetValueOrDefault _
			 AndAlso Me.NumDependents.GetValueOrDefault = other.NumDependents.GetValueOrDefault _
			 AndAlso Me.CreateDate.GetValueOrDefault = other.CreateDate.GetValueOrDefault _
			 AndAlso Me.UpdateDate.GetValueOrDefault = other.UpdateDate.GetValueOrDefault _
			 AndAlso Me.UpdateUser = other.UpdateUser _
			 AndAlso Me.CreateUser = other.CreateUser _
			 AndAlso Me.EmployeeTypeCode = other.EmployeeTypeCode

		End Function

		Public Overrides Function GetHashCode() As Integer
			'using Xor has the advantage of not overflowing the integer.
			Return Me.EmployeeId.GetHashCode _
		Xor Me.getStringHashCode(Me.EmployeeName) _
		Xor Me.EmployeeRankId.GetHashCode _
		Xor Me.Salary.GetHashCode _
		Xor Me.getStringHashCode(Me.Address) _
		Xor Me.getStringHashCode(Me.Telephone) _
		Xor Me.getStringHashCode(Me.Mobile) _
		Xor Me.getStringHashCode(Me.IdNumber) _
		Xor Me.getStringHashCode(Me.SSINumber) _
		Xor Me.HireDate.GetHashCode _
		Xor Me.NumDependents.GetHashCode _
		Xor Me.CreateDate.GetHashCode _
		Xor Me.UpdateDate.GetHashCode _
		Xor Me.getStringHashCode(Me.UpdateUser) _
		Xor Me.getStringHashCode(Me.CreateUser) _
		Xor Me.getStringHashCode(Me.EmployeeTypeCode)

		End Function

		Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean

			Dim temp = TryCast(obj, EmployeeBase)
			If temp IsNot Nothing Then
				Return Me.Equals(temp)
			Else
				Return False
			End If

		End Function

		Public Shared Operator =(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean
			Return Object.Equals(obj1, obj2)
		End Operator

		Public Shared Operator <>(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean
			Return Not (obj1 = obj2)
		End Operator

#End Region

#Region "Copy and sort"

		Public Overrides Function copy() As IModelObject
			'creates a copy

			'NOTE: we can't cast from EmployeeBase to Employee, so below we 
			'instantiate a Employee, NOT a EmployeeBase object
			Dim ret As Employee = EmployeeFactory.Create()

			ret.EmployeeId = Me.EmployeeId
			ret.EmployeeName = Me.EmployeeName
			ret.EmployeeRankId = Me.EmployeeRankId
			ret.Salary = Me.Salary
			ret.Address = Me.Address
			ret.Telephone = Me.Telephone
			ret.Mobile = Me.Mobile
			ret.IdNumber = Me.IdNumber
			ret.SSINumber = Me.SSINumber
			ret.HireDate = Me.HireDate
			ret.NumDependents = Me.NumDependents
			ret.CreateDate = Me.CreateDate
			ret.UpdateDate = Me.UpdateDate
			ret.UpdateUser = Me.UpdateUser
			ret.CreateUser = Me.CreateUser
			ret.EmployeeTypeCode = Me.EmployeeTypeCode


			Return ret

		End Function

		Public Overrides Sub merge(other As IModelObject)
			'merges this Employee model object (me) with the "other" instance 

			Dim o As Employee = CType(other, Employee)
			If Not String.isNullOrEmpty(o.EmployeeName) AndAlso _
			 String.isNullOrEmpty(Me.EmployeeName) Then
				Me.EmployeeName = o.EmployeeName
			End If
			If Not o.EmployeeRankId Is Nothing AndAlso _
			   Me.EmployeeRankId Is Nothing Then
				Me.EmployeeRankId = o.EmployeeRankId
			End If
			If Not o.Salary Is Nothing AndAlso _
			   Me.Salary Is Nothing Then
				Me.Salary = o.Salary
			End If
			If Not String.isNullOrEmpty(o.Address) AndAlso _
			   String.isNullOrEmpty(Me.Address) Then
				Me.Address = o.Address
			End If
			If Not String.isNullOrEmpty(o.Telephone) AndAlso _
			   String.isNullOrEmpty(Me.Telephone) Then
				Me.Telephone = o.Telephone
			End If
			If Not String.isNullOrEmpty(o.Mobile) AndAlso _
			   String.isNullOrEmpty(Me.Mobile) Then
				Me.Mobile = o.Mobile
			End If
			If Not String.isNullOrEmpty(o.IdNumber) AndAlso _
			   String.isNullOrEmpty(Me.IdNumber) Then
				Me.IdNumber = o.IdNumber
			End If
			If Not String.isNullOrEmpty(o.SSINumber) AndAlso _
			   String.isNullOrEmpty(Me.SSINumber) Then
				Me.SSINumber = o.SSINumber
			End If
			If Not o.HireDate Is Nothing AndAlso _
			   Me.HireDate Is Nothing Then
				Me.HireDate = o.HireDate
			End If
			If Not o.NumDependents Is Nothing AndAlso _
			   Me.NumDependents Is Nothing Then
				Me.NumDependents = o.NumDependents
			End If
			If Not o.CreateDate Is Nothing AndAlso _
			   Me.CreateDate Is Nothing Then
				Me.CreateDate = o.CreateDate
			End If
			If Not o.UpdateDate Is Nothing AndAlso _
			   Me.UpdateDate Is Nothing Then
				Me.UpdateDate = o.UpdateDate
			End If
			If Not String.isNullOrEmpty(o.UpdateUser) AndAlso _
			   String.isNullOrEmpty(Me.UpdateUser) Then
				Me.UpdateUser = o.UpdateUser
			End If
			If Not String.isNullOrEmpty(o.CreateUser) AndAlso _
			   String.isNullOrEmpty(Me.CreateUser) Then
				Me.CreateUser = o.CreateUser
			End If
			If Not String.isNullOrEmpty(o.EmployeeTypeCode) AndAlso _
			   String.isNullOrEmpty(Me.EmployeeTypeCode) Then
				Me.EmployeeTypeCode = o.EmployeeTypeCode
			End If


		End Sub

		Public Function CompareTo(ByVal other As Employee) As Integer _
		  Implements System.IComparable(Of Employee).CompareTo

			Return Me.EmployeeName.CompareTo(other.EmployeeName)
		End Function


#End Region

#Region "parentIdChanged"
		'below sub is called when parentIdChanged
		Public Overrides Sub handleParentIdChanged(parentMo As IModelObject)
			' Assocations from VbBusObjects.EmployeeRank
			If (TypeOf parentMo Is VbBusObjects.EmployeeRank) Then
				Me.EmployeeRankId = DirectCast(parentMo, VbBusObjects.EmployeeRank).RankId
			End If
		End Sub
#End Region


#Region "ID Property"

		Public Overrides Property Id() As Object
			Get
				Return Me._EmployeeId
			End Get
			Set(ByVal value As Object)
				Me._EmployeeId = CLng(value)
				Me.raiseBroadcastIdChange()
			End Set
		End Property
#End Region

#Region "Extra Code"

#End Region

	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public Class EmployeeRequiredFieldsValidator
		Implements IModelObjectValidator

		Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
					Implements org.model.lib.IModelObjectValidator.validate

			Dim mo As Employee = CType(imo, Employee)
			If String.isNullOrEmpty(mo.EmployeeName) Then
				Throw New ModelObjectRequiredFieldException("EmployeeName")
			End If
			If mo.EmployeeRankId Is Nothing Then
				Throw New ModelObjectRequiredFieldException("EmployeeRankId")
			End If


		End Sub

	End Class
#End Region

End Namespace

