'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

'<comments>
'Template: DBMapperBase.visualBasic.txt
'************************************************************
' Class autogenerated on 13-04-2015 21:27:38 by ModelGenerator
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class EmployeeDBMapper
'
'************************************************************
'</comments>

Namespace VbBusObjects.DBMappers
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public Class EmployeeDBMapper
		Inherits DBMapper

#Region "Constructors "
		Public Sub New(ByVal _dbConn As DBUtils)
			MyBase.new(_dbConn)
		End Sub


		Public Sub New()
			MyBase.new()
		End Sub
#End Region

#Region "Overloaded Functions"

		Public Shadows Function findWhere(ByVal sWhereClause As String, _
												ByVal ParamArray params() As Object) As Employee

			Return DirectCast(MyBase.findWhere(sWhereClause, params), Employee)
		End Function


		Public Sub saveEmployee(ByVal mo As Employee)
			MyBase.save(mo)
		End Sub

		Public Shadows Function findByKey(ByVal keyval As Object) As Employee

			Return DirectCast(MyBase.findByKey(keyval), Employee)

		End Function

#End Region

#Region "getUpdateDBCommand"
		Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, _
													 ByVal sql As String) As IDbCommand

			Dim p As IDataParameter = Nothing
			Dim obj As IEmployee = DirectCast(modelObj, IEmployee)
			Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)
			stmt.Parameters.Add(Me.dbConn.getParameter("@EmployeeName", obj.EmployeeName))
			stmt.Parameters.Add(Me.dbConn.getParameter("@EmployeeRankId", obj.EmployeeRankId))
			stmt.Parameters.Add(Me.dbConn.getParameter("@Salary", obj.Salary))
			stmt.Parameters.Add(Me.dbConn.getParameter("@Address", obj.Address))
			stmt.Parameters.Add(Me.dbConn.getParameter("@Telephone", obj.Telephone))
			stmt.Parameters.Add(Me.dbConn.getParameter("@Mobile", obj.Mobile))
			stmt.Parameters.Add(Me.dbConn.getParameter("@IdNumber", obj.IdNumber))
			stmt.Parameters.Add(Me.dbConn.getParameter("@SSINumber", obj.SSINumber))
			stmt.Parameters.Add(Me.dbConn.getParameter("@HireDate", obj.HireDate))
			stmt.Parameters.Add(Me.dbConn.getParameter("@NumDependents", obj.NumDependents))
			stmt.Parameters.Add(Me.dbConn.getParameter("@createDate", obj.CreateDate))
			stmt.Parameters.Add(Me.dbConn.getParameter("@updateDate", obj.UpdateDate))
			stmt.Parameters.Add(Me.dbConn.getParameter("@updateUser", obj.UpdateUser))
			stmt.Parameters.Add(Me.dbConn.getParameter("@createUser", obj.CreateUser))
			stmt.Parameters.Add(Me.dbConn.getParameter("@EmployeeTypeCode", obj.EmployeeTypeCode))

			If obj.isNew Then
			Else
				'only add primary key if we are updating and as the last parameter
				stmt.Parameters.Add(Me.dbConn.getParameter("@EmployeeId", obj.EmployeeId))

			End If '

			Return stmt

		End Function

#End Region
#Region "Save Children Code"
		Public Overrides Sub saveChildren(mo As IModelObject)

			Dim ret As Employee = DirectCast(mo, Employee)
			'***Child Association:employeeinfo
			If ret._EmployeeInfoLoaded = True Then
				Dim employeeinfoMapper As VbBusObjects.DBMappers.EmployeeInfoDBMapper = New VbBusObjects.DBMappers.EmployeeInfoDBMapper(Me.DBConn())
				employeeinfoMapper.save(ret.EmployeeInfo())
			End If
			'***Child Association:employeeprojects
			If ret._EmployeeProjectsLoaded = True Then
				Dim employeeprojectsMapper As VbBusObjects.DBMappers.EmployeeProjectDBMapper = New VbBusObjects.DBMappers.EmployeeProjectDBMapper(Me.DBConn())
				employeeprojectsMapper.saveList(ret.EmployeeProjects())
				employeeprojectsMapper.deleteList(ret.getDeletedEmployeeProjects())
			End If
		End Sub
#End Region

		Public Overrides Sub saveParents(mo As IModelObject)

			Dim thisMo As Employee = DirectCast(mo, Employee)
			'*** Parent Association:rank
			If (thisMo.Rank Is Nothing = False) AndAlso thisMo.Rank().NeedsSave() Then
				Dim mappervar As VbBusObjects.DBMappers.EmployeeRankDBMapper = New VbBusObjects.DBMappers.EmployeeRankDBMapper(Me.dbConn)
				mappervar.save(thisMo.Rank)
				thisMo.EmployeeRankId = thisMo.Rank.RankId
			End If

		End Sub
#Region "Find functions"

		'''	<summary>Given an sql statement, it opens a result set, and for each record returned, it creates and loads a ModelObject. </summary>
		'''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		'''	<param name="params"> Parameter values to be passed to sql statement </param>
		'''	<returns> A List(Of Employee) object containing all objects loaded </returns>
		'''	 
		Public Shadows Function findList(ByVal sWhereClause As String, _
				 ByVal ParamArray params() As Object) _
				 As List(Of Employee)

			Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
			Dim rs As IDataReader = Nothing
			Dim molist As New List(Of Employee)

			Try
				rs = dbConn.getDataReaderWithParams(sql, params)
				Me.Loader.DataSource = rs

				Do While rs.Read
					Dim mo As IModelObject = Me.getModelInstance
					Me.Loader.load(mo)
					molist.Add(DirectCast(mo, Employee))

				Loop


			Finally
				Me.dbConn.closeDataReader(rs)
			End Try

			Return molist

		End Function

		Public Shadows Function findList(ByVal sWhereClause As String, _
				 ByVal params As List(Of IDataParameter)) _
				 As List(Of Employee)

			Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
			Dim rs As IDataReader = Nothing
			Dim molist As New List(Of Employee)

			Try
				rs = dbConn.getDataReader(sql, params)
				Me.Loader.DataSource = rs

				Do While rs.Read
					Dim mo As IModelObject = Me.getModelInstance
					Me.Loader.load(mo)
					molist.Add(DirectCast(mo, Employee))

				Loop


			Finally
				Me.dbConn.closeDataReader(rs)
			End Try

			Return molist

		End Function
		'''    
		'''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		''' <returns>List(Of Employee) </returns>
		Public Function findAll() As List(Of Employee)
			Return Me.findList(String.Empty)
		End Function

		Public Overrides Property Loader() As IModelObjectLoader
			Get
				If Me._loader Is Nothing Then
					Me._loader = New EmployeeDataReaderLoader
				End If
				Return Me._loader
			End Get
			Set(value As IModelObjectLoader)
				Me._loader = value
			End Set
		End Property

#End Region

		Public Overrides Function getModelInstance() As IModelObject
			Return EmployeeFactory.Create()
		End Function

	End Class

#Region " Employee Loader "
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public Class EmployeeDataReaderLoader
		Inherits DataReaderLoader

		Public Overrides Sub load(ByVal mo As IModelObject)

			Const DATAREADER_FLD_EMPLOYEEID As Integer = 0
			Const DATAREADER_FLD_EMPLOYEENAME As Integer = 1
			Const DATAREADER_FLD_EMPLOYEERANKID As Integer = 2
			Const DATAREADER_FLD_SALARY As Integer = 3
			Const DATAREADER_FLD_ADDRESS As Integer = 4
			Const DATAREADER_FLD_TELEPHONE As Integer = 5
			Const DATAREADER_FLD_MOBILE As Integer = 6
			Const DATAREADER_FLD_IDNUMBER As Integer = 7
			Const DATAREADER_FLD_SSINUMBER As Integer = 8
			Const DATAREADER_FLD_HIREDATE As Integer = 9
			Const DATAREADER_FLD_NUMDEPENDENTS As Integer = 10
			Const DATAREADER_FLD_CREATEDATE As Integer = 11
			Const DATAREADER_FLD_UPDATEDATE As Integer = 12
			Const DATAREADER_FLD_UPDATEUSER As Integer = 13
			Const DATAREADER_FLD_CREATEUSER As Integer = 14
			Const DATAREADER_FLD_EMPLOYEETYPECODE As Integer = 15


			Dim obj As Employee = DirectCast(mo, Employee)
			obj.IsObjectLoading = True

			If Me.reader.IsDBNull(DATAREADER_FLD_EMPLOYEEID) = False Then
				obj.EmployeeId = Me.reader.GetInt32(DATAREADER_FLD_EMPLOYEEID)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_EMPLOYEENAME) = False Then
				obj.EmployeeName = Me.reader.GetString(DATAREADER_FLD_EMPLOYEENAME)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_EMPLOYEERANKID) = False Then
				obj.EmployeeRankId = Me.reader.GetInt32(DATAREADER_FLD_EMPLOYEERANKID)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_SALARY) = False Then
				obj.Salary = Me.reader.GetDecimal(DATAREADER_FLD_SALARY)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_ADDRESS) = False Then
				obj.Address = Me.reader.GetString(DATAREADER_FLD_ADDRESS)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_TELEPHONE) = False Then
				obj.Telephone = Me.reader.GetString(DATAREADER_FLD_TELEPHONE)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_MOBILE) = False Then
				obj.Mobile = Me.reader.GetString(DATAREADER_FLD_MOBILE)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_IDNUMBER) = False Then
				obj.IdNumber = Me.reader.GetString(DATAREADER_FLD_IDNUMBER)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_SSINUMBER) = False Then
				obj.SSINumber = Me.reader.GetString(DATAREADER_FLD_SSINUMBER)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_HIREDATE) = False Then
				obj.HireDate = Me.reader.GetDateTime(DATAREADER_FLD_HIREDATE)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_NUMDEPENDENTS) = False Then
				obj.NumDependents = Me.reader.GetInt32(DATAREADER_FLD_NUMDEPENDENTS)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_CREATEDATE) = False Then
				obj.CreateDate = Me.reader.GetDateTime(DATAREADER_FLD_CREATEDATE)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_UPDATEDATE) = False Then
				obj.UpdateDate = Me.reader.GetDateTime(DATAREADER_FLD_UPDATEDATE)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_UPDATEUSER) = False Then
				obj.UpdateUser = Me.reader.GetString(DATAREADER_FLD_UPDATEUSER)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_CREATEUSER) = False Then
				obj.CreateUser = Me.reader.GetString(DATAREADER_FLD_CREATEUSER)
			End If
			If Me.reader.IsDBNull(DATAREADER_FLD_EMPLOYEETYPECODE) = False Then
				obj.EmployeeTypeCode = Me.reader.GetString(DATAREADER_FLD_EMPLOYEETYPECODE)
			End If


			obj.isNew = False ' since we've just loaded from database, we mark as "old"
			obj.isDirty = False
			obj.IsObjectLoading = False
			obj.afterLoad()

			Return

		End Sub

	End Class

#End Region

	'''<summary>
	''' Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
	'''</summary>
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public NotInheritable Class EmployeeDataUtils

#Region "Shared ""get"" Functions "

		Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
		   As List(Of Employee)

			Dim dbm As EmployeeDBMapper = New EmployeeDBMapper()
			Return dbm.findList(where, params)

		End Function

		Public Shared Function findList(ByVal where As String, ByVal params As List(Of IDataParameter)) _
				As List(Of Employee)

			Dim dbm As EmployeeDBMapper = New EmployeeDBMapper()
			Return dbm.findList(where, params)

		End Function

		Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
		   As Employee

			Dim dbm As EmployeeDBMapper = New EmployeeDBMapper()
			Return DirectCast(dbm.findWhere(where, params), Employee)

		End Function


		Public Shared Function findList() As List(Of Employee)

			Return New EmployeeDBMapper().findAll()

		End Function

		Public Shared Function findByKey(id As Object) As Employee

			Return DirectCast(New EmployeeDBMapper().findByKey(id), Employee)

		End Function

		''' <summary>
		''' Reload the Employee from the database
		''' </summary>
		''' <remarks>
		''' use this method when you want to relad the Employee 
		''' from the database, discarding any changes
		''' </remarks>
		Public Shared Sub reload(ByRef mo As Employee)

			If mo Is Nothing Then
				Throw New System.ArgumentNullException("null object past to reload function")
			End If

			mo = DirectCast(New EmployeeDBMapper().findByKey(mo.Id), Employee)

		End Sub

#End Region

#Region "Shared Save and Delete Functions"
		''' <summary>
		''' Convinience method to save a Employee Object.
		''' Important note: DO NOT CALL THIS IN A LOOP!
		''' </summary>
		''' <param name="EmployeeObj"></param>
		''' <remarks>
		''' Important note: DO NOT CALL THIS IN A LOOP!  
		''' This method simply instantiates a EmployeeDBMapper and calls the save method
		''' </remarks>
		Public Shared Sub saveEmployee(ByVal ParamArray EmployeeObj() As Employee)

			Dim dbm As EmployeeDBMapper = New EmployeeDBMapper()
			dbm.saveList(EmployeeObj.ToList)


		End Sub


		Public Shared Sub deleteEmployee(ByVal EmployeeObj As Employee)

			Dim dbm As EmployeeDBMapper = New EmployeeDBMapper()
			dbm.delete(EmployeeObj)

		End Sub
#End Region

#Region "Data Table and data row load/save "
		Public Shared Sub saveEmployee(ByVal dr As DataRow, _
												 Optional ByRef mo As Employee = Nothing)

			If mo Is Nothing Then
				mo = EmployeeFactory.Create()
			End If

			For Each dc As DataColumn In dr.Table.Columns
				mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
			Next

			Call saveEmployee(mo)

		End Sub


		Public Shared Sub saveEmployee(ByVal dt As DataTable, _
												 Optional ByRef mo As Employee = Nothing)

			For Each dr As DataRow In dt.Rows
				Call saveEmployee(dr, mo)
			Next

		End Sub

		Public Shared Function loadFromDataRow(ByVal r As DataRow) As Employee

			Dim a As New DataRowLoader
			Dim mo As IModelObject = EmployeeFactory.Create
			a.DataSource = r
			a.load(mo)
			Return DirectCast(mo, Employee)

		End Function

#End Region

	End Class

End Namespace

