using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using org.model.lib;
using org.model.lib.Model;
using org.model.lib.db;

using System.Linq;
using CsModelObjects;

//<comments>
// Template: DBMapperBase.csharp.txt
//************************************************************
// 
// Class autogenerated on13-04-2015 07:39:43 by ModelGenerator
// Extends base DBMapperBase object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class EmployeeDBMapper
//
//************************************************************
//</comments>

namespace CsModelMappers {

	[System.Runtime.InteropServices.ComVisible(false)]
	public class EmployeeDBMapper : DBMapper {

		#region "Constructors "
		public EmployeeDBMapper(DBUtils _dbConn) : base(_dbConn) {
		}


		public EmployeeDBMapper() : base() {
		}
		#endregion

		#region "Overloaded Functions"

		public new Employee findWhere(string sWhereClause, params object[] @params) {

			return (Employee)base.findWhere(sWhereClause, @params);
		}


		public void saveEmployee(Employee mo) {
			base.save(mo);
		}

		public new Employee findByKey(int keyval) {

			return (Employee)base.findByKey(keyval);

		}

		#endregion


		#region "getUpdateDBCommand"
		public override IDbCommand getUpdateDBCommand(IModelObject modelObj, string sql) {
			IEmployee obj = (IEmployee)modelObj;
			IDbCommand stmt = this.dbConn.getCommand(sql);
			stmt.Parameters.Add( this.dbConn.getParameter("@EmployeeName",obj.EmployeeName));
			stmt.Parameters.Add( this.dbConn.getParameter("@EmployeeRankId",obj.EmployeeRankId));
			stmt.Parameters.Add( this.dbConn.getParameter("@Salary",obj.Salary));
			stmt.Parameters.Add( this.dbConn.getParameter("@Address",obj.Address));
			stmt.Parameters.Add( this.dbConn.getParameter("@Telephone",obj.Telephone));
			stmt.Parameters.Add( this.dbConn.getParameter("@Mobile",obj.Mobile));
			stmt.Parameters.Add( this.dbConn.getParameter("@IdNumber",obj.IdNumber));
			stmt.Parameters.Add( this.dbConn.getParameter("@SSINumber",obj.SSINumber));
			stmt.Parameters.Add( this.dbConn.getParameter("@HireDate",obj.HireDate));
			stmt.Parameters.Add( this.dbConn.getParameter("@NumDependents",obj.NumDependents));

			if (! obj.isNew ) {
			//only add primary key if we are updating and as the last parameter
							stmt.Parameters.Add( this.dbConn.getParameter("@EmployeeId",obj.EmployeeId));
		}

			return stmt;
		}

		#endregion

		#region "SQL Statements in files"

		public override string getSQLStatement(string skey)
		{
			//because the EmployeeSql.xml file is stored as an Embedded resource under
			//EmployeeDBMapper file (DependentUpon in the project file), 
			//its resource name is the same as the DBMapper file.
			return SQLStmtsRegistry.getStatement(this.GetType().FullName, skey, this.dbConn.sqldialect);

		}


		#endregion

#region "Save Children Code"
	public override void saveChildren(IModelObject mo) {

		Employee ret = (Employee)mo;
		//***Child Association:employeeinfo
		if (ret.EmployeeInfoLoaded) {
			CsModelMappers.EmployeeInfoDBMapper employeeinfoMapper = new CsModelMappers.EmployeeInfoDBMapper(this.dbConn);
			employeeinfoMapper.save(ret.EmployeeInfo);
		}
		//***Child Association:employeeprojects
		if (ret.EmployeeProjectsLoaded) {
			CsModelMappers.EmployeeProjectDBMapper employeeprojectsMapper = new CsModelMappers.EmployeeProjectDBMapper(this.dbConn);
			employeeprojectsMapper.saveList(ret.EmployeeProjects);
			employeeprojectsMapper.deleteList(ret.getDeletedEmployeeProjects());
		}
	}
#endregion


	public override void saveParents(IModelObject mo) {

		Employee thisMo  = ( Employee)mo;
		//*** Parent Association:rank
		if (thisMo.RankLoaded && thisMo.Rank.NeedsSave) {
			CsModelMappers.EmployeeRankDBMapper mappervar = new CsModelMappers.EmployeeRankDBMapper(this.dbConn);
			mappervar.save(thisMo.Rank);
			thisMo.EmployeeRankId = thisMo.Rank.RankId;
		}
		
	}

		#region "Find functions"

		///	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		///	it creates and loads a ModelObject. </summary>
		///	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		/// that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		///	 <param name="params"> Parameter values to be passed to sql statement </param>
		///	 <returns> A List(Of Employee) object containing all objects loaded </returns>
		///	 
		public new List<Employee> findList(string sWhereClause, params object[] @params) {

			string sql = this.getSqlWithWhereClause(sWhereClause);
			IDataReader rs = null;
			List<Employee> molist = new List<Employee>();

			try {
				rs = dbConn.getDataReaderWithParams(sql, @params);
				this.Loader.DataSource = rs;

				while (rs.Read()) {
					IModelObject mo = this.getModelInstance();
					this.Loader.load(mo);
					molist.Add((Employee)mo);

				}


			} finally {
				this.dbConn.closeDataReader(rs);
			}

			return molist;

		}

		///    
		///	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		/// <returns>List(Of Employee) </returns>
		public List<Employee> findAll()
		{
			return this.findList(string.Empty);
		}

		public override IModelObjectLoader Loader {
			get {
				if (this._loader == null) {
					this._loader = new EmployeeDataReaderLoader();
				}
				return this._loader;
			}
			set { this._loader = value; }
		}

		#endregion

		public override IModelObject getModelInstance()
		{
			return EmployeeFactory.Create();
		}

	}

	#region " Employee Loader "
	[System.Runtime.InteropServices.ComVisible(false)]
	public class EmployeeDataReaderLoader : DataReaderLoader {


		public override void load(IModelObject mo) {
			const int DATAREADER_FLD_EMPLOYEEID = 0;
			const int DATAREADER_FLD_EMPLOYEENAME = 1;
			const int DATAREADER_FLD_EMPLOYEERANKID = 2;
			const int DATAREADER_FLD_SALARY = 3;
			const int DATAREADER_FLD_ADDRESS = 4;
			const int DATAREADER_FLD_TELEPHONE = 5;
			const int DATAREADER_FLD_MOBILE = 6;
			const int DATAREADER_FLD_IDNUMBER = 7;
			const int DATAREADER_FLD_SSINUMBER = 8;
			const int DATAREADER_FLD_HIREDATE = 9;
			const int DATAREADER_FLD_NUMDEPENDENTS = 10;

			Employee obj = (Employee)mo;
			obj.IsObjectLoading = true;

			if (!this.reader.IsDBNull(DATAREADER_FLD_EMPLOYEEID) ) {
				obj.EmployeeId = this.reader.GetInt32(DATAREADER_FLD_EMPLOYEEID);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_EMPLOYEENAME) ) {
				obj.EmployeeName = this.reader.GetString(DATAREADER_FLD_EMPLOYEENAME);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_EMPLOYEERANKID) ) {
				obj.EmployeeRankId = this.reader.GetInt32(DATAREADER_FLD_EMPLOYEERANKID);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_SALARY) ) {
				obj.Salary = this.reader.GetDecimal(DATAREADER_FLD_SALARY);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_ADDRESS) ) {
				obj.Address = this.reader.GetString(DATAREADER_FLD_ADDRESS);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_TELEPHONE) ) {
				obj.Telephone = this.reader.GetString(DATAREADER_FLD_TELEPHONE);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_MOBILE) ) {
				obj.Mobile = this.reader.GetString(DATAREADER_FLD_MOBILE);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_IDNUMBER) ) {
				obj.IdNumber = this.reader.GetString(DATAREADER_FLD_IDNUMBER);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_SSINUMBER) ) {
				obj.SSINumber = this.reader.GetString(DATAREADER_FLD_SSINUMBER);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_HIREDATE) ) {
				obj.HireDate = this.reader.GetDateTime(DATAREADER_FLD_HIREDATE);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_NUMDEPENDENTS) ) {
				obj.NumDependents = this.reader.GetInt32(DATAREADER_FLD_NUMDEPENDENTS);
			}


			obj.isNew = false;
			// since we've just loaded from database, we mark as "old"
			obj.isDirty = false;
			obj.IsObjectLoading = false;
			obj.afterLoad();

			return;

		}

	}

	#endregion

	///<summary>
	/// Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
	///</summary>
	[System.Runtime.InteropServices.ComVisible(false)]
	public sealed class EmployeeDataUtils
	{

		#region "Shared ""get"" Functions "

		public static List<Employee> findList(string @where, params object[] @params)
		{

			EmployeeDBMapper dbm = new EmployeeDBMapper();
			return dbm.findList(@where, @params);

		}

		public static Employee findOne(string @where, params object[] @params)
		{

			EmployeeDBMapper dbm = new EmployeeDBMapper();
			return (Employee)dbm.findWhere(@where, @params);

		}


		public static List<Employee> findList()
		{

			return new EmployeeDBMapper().findAll();

		}

		public static Employee findByKey(int id)
		{

			return (Employee)new EmployeeDBMapper().findByKey(id);

		}

		/// <summary>
		/// Reload the Employee from the database
		/// </summary>
		/// <remarks>
		/// use this method when you want to relad the Employee 
		/// from the database, discarding any changes
		/// </remarks>
		public static void reload(ref Employee mo)
		{

			if (mo == null) {
				throw new System.ArgumentNullException("null object past to reload function");
			}

			mo = (Employee)new EmployeeDBMapper().findByKey(mo.Id);

		}

		#endregion

		#region "Shared Save and Delete Functions"
		/// <summary>
		/// Convinience method to save a Employee Object.
		/// Important note: DO NOT CALL THIS IN A LOOP!
		/// </summary>
		/// <param name="EmployeeObj"></param>
		/// <remarks>
		/// Important note: DO NOT CALL THIS IN A LOOP!  
		/// This method simply instantiates a EmployeeDBMapper and calls the save method
		/// </remarks>
		public static void saveEmployee(params Employee[] EmployeeObj)
		{

			EmployeeDBMapper dbm = new EmployeeDBMapper();
			dbm.saveList(EmployeeObj.ToList());


		}


		public static void deleteEmployee(Employee EmployeeObj)
		{

			EmployeeDBMapper dbm = new EmployeeDBMapper();
			dbm.delete(EmployeeObj);

		}
		#endregion

		#region "Data Table and data row load/save "

		public static void saveEmployee(DataRow dr, ref Employee mo) {
			if (mo == null) {
				mo = EmployeeFactory.Create();
			}

			foreach (DataColumn dc in dr.Table.Columns) {
				mo.setAttribute(dc.ColumnName, dr[dc.ColumnName]);
			}

			saveEmployee(mo);

		}

		public static void saveEmployee(DataTable dt, ref Employee mo) {
			foreach (DataRow dr in dt.Rows) {
				saveEmployee(dr, ref mo);
			}

		}

		public static Employee loadFromDataRow(DataRow r) {

			DataRowLoader a = new DataRowLoader();
			IModelObject mo = EmployeeFactory.Create();
			a.DataSource = r;
			a.load(mo);
			return (Employee)mo;

		}

		#endregion

	}

}


