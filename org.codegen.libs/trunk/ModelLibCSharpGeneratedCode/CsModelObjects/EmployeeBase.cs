using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;

using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;

//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class Employee
//
//************************************************************
//</comments>
namespace CsModelObjects
{

	#region "Interface"
[System.Runtime.InteropServices.ComVisible(false)] 
	public interface IEmployee: IModelObject {
	System.Int64 EmployeeId {get;set;} 
	System.String EmployeeName {get;set;} 
	System.Int64? EmployeeRankId {get;set;} 
	System.Decimal? Salary {get;set;} 
	System.String Address {get;set;} 
	System.String Telephone {get;set;} 
	System.String Mobile {get;set;} 
	System.String IdNumber {get;set;} 
	System.String SSINumber {get;set;} 
	System.DateTime? HireDate {get;set;} 
	System.Int64? NumDependents {get;set;} 
	System.DateTime? CreateDate {get;set;} 
	System.DateTime? UpdateDate {get;set;} 
	System.String UpdateUser {get;set;} 
	System.String CreateUser {get;set;} 
	System.String EmployeeTypeCode {get;set;} 
	CsModelObjects.EmployeeRank Rank {get;set;} //association
	CsModelObjects.EmployeeInfo EmployeeInfo {get;set;} //association
	IEnumerable< CsModelObjects.EmployeeProject>EmployeeProjects {get; set;}
		void AddEmployeeProject(CsModelObjects.EmployeeProject val);
		void RemoveEmployeeProject(CsModelObjects.EmployeeProject val);
		IEnumerable<CsModelObjects.EmployeeProject>getDeletedEmployeeProjects();
		CsModelObjects.EmployeeProject getEmployeeProject( int i ) ;

}
#endregion

	
	[DefaultMapperAttr(typeof(CsModelMappers.EmployeeDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	public class EmployeeBase : ModelObject, IEquatable<EmployeeBase>, IAuditable,System.IComparable< Employee>,IEmployee
	{

		#region "Constructor"

		public EmployeeBase()
		{
			this.addValidator(new EmployeeRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"

		public override List<ModelObject> getChildren()
		{
			List<ModelObject> ret = new List<ModelObject>();
				if  (this.EmployeeInfo!=null) {
		ret.Add(this.EmployeeInfo);
	}
	if  (this.EmployeeProjectsLoaded) { // check if loaded first!
		List< ModelObject > lp = this._EmployeeProjects.ConvertAll(
				new Converter< CsModelObjects.EmployeeProject, ModelObject>((
			CsModelObjects.EmployeeProject pf )=> {				return (ModelObject)pf;}));
		ret.AddRange(lp);
	}


			return ret;
		}

		public override List<ModelObject> getParents()
		{
			List<ModelObject> ret = new List<ModelObject>();
			if  (this.RankLoaded) {
ret.Add(this.Rank);
}


			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_EMPLOYEEID = "EmployeeId";
			public const String STR_FLD_EMPLOYEENAME = "EmployeeName";
			public const String STR_FLD_EMPLOYEERANKID = "EmployeeRankId";
			public const String STR_FLD_SALARY = "Salary";
			public const String STR_FLD_ADDRESS = "Address";
			public const String STR_FLD_TELEPHONE = "Telephone";
			public const String STR_FLD_MOBILE = "Mobile";
			public const String STR_FLD_IDNUMBER = "IdNumber";
			public const String STR_FLD_SSINUMBER = "SSINumber";
			public const String STR_FLD_HIREDATE = "HireDate";
			public const String STR_FLD_NUMDEPENDENTS = "NumDependents";
			public const String STR_FLD_CREATEDATE = "CreateDate";
			public const String STR_FLD_UPDATEDATE = "UpdateDate";
			public const String STR_FLD_UPDATEUSER = "UpdateUser";
			public const String STR_FLD_CREATEUSER = "CreateUser";
			public const String STR_FLD_EMPLOYEETYPECODE = "EmployeeTypeCode";


				public const int FLD_EMPLOYEEID = 0;
		public const int FLD_EMPLOYEENAME = 1;
		public const int FLD_EMPLOYEERANKID = 2;
		public const int FLD_SALARY = 3;
		public const int FLD_ADDRESS = 4;
		public const int FLD_TELEPHONE = 5;
		public const int FLD_MOBILE = 6;
		public const int FLD_IDNUMBER = 7;
		public const int FLD_SSINUMBER = 8;
		public const int FLD_HIREDATE = 9;
		public const int FLD_NUMDEPENDENTS = 10;
		public const int FLD_CREATEDATE = 11;
		public const int FLD_UPDATEDATE = 12;
		public const int FLD_UPDATEUSER = 13;
		public const int FLD_CREATEUSER = 14;
		public const int FLD_EMPLOYEETYPECODE = 15;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_EMPLOYEEID,STR_FLD_EMPLOYEENAME,STR_FLD_EMPLOYEERANKID,STR_FLD_SALARY,STR_FLD_ADDRESS,STR_FLD_TELEPHONE,STR_FLD_MOBILE,STR_FLD_IDNUMBER,STR_FLD_SSINUMBER,STR_FLD_HIREDATE,STR_FLD_NUMDEPENDENTS,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_UPDATEUSER,STR_FLD_CREATEUSER,STR_FLD_EMPLOYEETYPECODE
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _EmployeeId;
	private System.String _EmployeeName = null;
	private System.Int64? _EmployeeRankId = null;
	private System.Decimal? _Salary = null;
	private System.String _Address = null;
	private System.String _Telephone = null;
	private System.String _Mobile = null;
	private System.String _IdNumber = null;
	private System.String _SSINumber = null;
	private System.DateTime? _HireDate = null;
	private System.Int64? _NumDependents = null;
	private System.DateTime? _CreateDate = null;
	private System.DateTime? _UpdateDate = null;
	private System.String _UpdateUser = null;
	private System.String _CreateUser = null;
	private System.String _EmployeeTypeCode = null;
	// ****** CHILD OBJECTS ********************
	private CsModelObjects.EmployeeRank _Rank = null;  // initialize to nothing, for lazy load logic below !!!
	private CsModelObjects.EmployeeInfo _EmployeeInfo = null;  // initialize to nothing, for lazy load logic below !!!
	private List< CsModelObjects.EmployeeProject> _EmployeeProjects = null;  // initialize to nothing, for lazy load logic below !!!
	 private List< CsModelObjects.EmployeeProject> _deletedEmployeeProjects = new List< CsModelObjects.EmployeeProject>();// initialize to empty list !!!

	// *****************************************
	// ****** END CHILD OBJECTS ********************

		#endregion

		#region "Field Properties"

	public virtual System.Int64 EmployeeId  {
	get {
		return _EmployeeId;
	} 
	set {
		if (ModelObject.valueChanged(_EmployeeId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEEID);
			}
			this._EmployeeId = value;

			this.raiseBroadcastIdChange();

		}
	}  
	}
public void setEmployeeId(String val){
	if (Information.IsNumeric(val)) {
		this.EmployeeId = Convert.ToInt32(val);
	} else if (String.IsNullOrEmpty(val)) {
		throw new ApplicationException("Cant update Primary Key to Null");
	} else {
		throw new ApplicationException("Invalid Integer Number, field:EmployeeId, value:" + val);
	}
}
	public virtual System.String EmployeeName  {
	get {
		return _EmployeeName;
	} 
	set {
		if (ModelObject.valueChanged(_EmployeeName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEENAME);
			}
			this._EmployeeName = value;

		}
	}  
	}
public void setEmployeeName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.EmployeeName = val;
	} else {
		this.EmployeeName = null;
	}
}
	public virtual System.Int64? EmployeeRankId  {
	get {
		return _EmployeeRankId;
	} 
	set {
		if (ModelObject.valueChanged(_EmployeeRankId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEERANKID);
			}
			this._EmployeeRankId = value;

		}
	}  
	}
public void setEmployeeRankId(String val){
	if (Information.IsNumeric(val)) {
		this.EmployeeRankId = Convert.ToInt32(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.EmployeeRankId = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:EmployeeRankId, value:" + val);
	}
}
	public virtual System.Decimal? Salary  {
	get {
		return _Salary;
	} 
	set {
		if (ModelObject.valueChanged(_Salary, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SALARY);
			}
			this._Salary = value;

		}
	}  
	}
public void setSalary(String val ){
	if (Information.IsNumeric(val)) {
		this.Salary =  Convert.ToDecimal(val);
	} else if ( string.IsNullOrEmpty(val) ) {
		this.Salary = null;
	} else {
		throw new ApplicationException("Invalid Decimal Number, field:Salary, value:" + val);
	}
}
	public virtual System.String Address  {
	get {
		return _Address;
	} 
	set {
		if (ModelObject.valueChanged(_Address, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_ADDRESS);
			}
			this._Address = value;

		}
	}  
	}
public void setAddress( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.Address = val;
	} else {
		this.Address = null;
	}
}
	public virtual System.String Telephone  {
	get {
		return _Telephone;
	} 
	set {
		if (ModelObject.valueChanged(_Telephone, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_TELEPHONE);
			}
			this._Telephone = value;

		}
	}  
	}
public void setTelephone( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.Telephone = val;
	} else {
		this.Telephone = null;
	}
}
	public virtual System.String Mobile  {
	get {
		return _Mobile;
	} 
	set {
		if (ModelObject.valueChanged(_Mobile, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_MOBILE);
			}
			this._Mobile = value;

		}
	}  
	}
public void setMobile( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.Mobile = val;
	} else {
		this.Mobile = null;
	}
}
	public virtual System.String IdNumber  {
	get {
		return _IdNumber;
	} 
	set {
		if (ModelObject.valueChanged(_IdNumber, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_IDNUMBER);
			}
			this._IdNumber = value;

		}
	}  
	}
public void setIdNumber( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.IdNumber = val;
	} else {
		this.IdNumber = null;
	}
}
	public virtual System.String SSINumber  {
	get {
		return _SSINumber;
	} 
	set {
		if (ModelObject.valueChanged(_SSINumber, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SSINUMBER);
			}
			this._SSINumber = value;

		}
	}  
	}
public void setSSINumber( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.SSINumber = val;
	} else {
		this.SSINumber = null;
	}
}
	public virtual System.DateTime? HireDate  {
	get {
		return _HireDate;
	} 
	set {
		if (ModelObject.valueChanged(_HireDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_HIREDATE);
			}
			this._HireDate = value;

		}
	}  
	}
public void setHireDate( String val ){
	if (Information.IsDate(val)) {
		this.HireDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.HireDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:HireDate, value:" + val);
	}
}
	public virtual System.Int64? NumDependents  {
	get {
		return _NumDependents;
	} 
	set {
		if (ModelObject.valueChanged(_NumDependents, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_NUMDEPENDENTS);
			}
			this._NumDependents = value;

		}
	}  
	}
public void setNumDependents(String val){
	if (Information.IsNumeric(val)) {
		this.NumDependents = Convert.ToInt32(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.NumDependents = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:NumDependents, value:" + val);
	}
}
	public virtual System.DateTime? CreateDate  {
	get {
		return _CreateDate;
	} 
	set {
		if (ModelObject.valueChanged(_CreateDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATEDATE);
			}
			this._CreateDate = value;

		}
	}  
	}
public void setCreateDate( String val ){
	if (Information.IsDate(val)) {
		this.CreateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.CreateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:CreateDate, value:" + val);
	}
}
	public virtual System.DateTime? UpdateDate  {
	get {
		return _UpdateDate;
	} 
	set {
		if (ModelObject.valueChanged(_UpdateDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATEDATE);
			}
			this._UpdateDate = value;

		}
	}  
	}
public void setUpdateDate( String val ){
	if (Information.IsDate(val)) {
		this.UpdateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.UpdateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:UpdateDate, value:" + val);
	}
}
	public virtual System.String UpdateUser  {
	get {
		return _UpdateUser;
	} 
	set {
		if (ModelObject.valueChanged(_UpdateUser, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATEUSER);
			}
			this._UpdateUser = value;

		}
	}  
	}
public void setUpdateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.UpdateUser = val;
	} else {
		this.UpdateUser = null;
	}
}
	public virtual System.String CreateUser  {
	get {
		return _CreateUser;
	} 
	set {
		if (ModelObject.valueChanged(_CreateUser, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATEUSER);
			}
			this._CreateUser = value;

		}
	}  
	}
public void setCreateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.CreateUser = val;
	} else {
		this.CreateUser = null;
	}
}
	public virtual System.String EmployeeTypeCode  {
	get {
		return _EmployeeTypeCode;
	} 
	set {
		if (ModelObject.valueChanged(_EmployeeTypeCode, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEETYPECODE);
			}
			this._EmployeeTypeCode = value;

		}
	}  
	}
public void setEmployeeTypeCode( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.EmployeeTypeCode = val;
	} else {
		this.EmployeeTypeCode = null;
	}
}

		// ASSOCIATIONS GETTERS/SETTERS BELOW!
		//associationParentCSharp.txt
		#region "Association Rank"

		public bool RankLoaded {get;set;}

		/// <summary>
        /// Gets/Sets parent object
        /// </summary>
		public virtual CsModelObjects.EmployeeRank Rank {
		    //1-1 parent association
            set {
                this._Rank = value;
				if ( value != null ) {
					this.EmployeeRankId = value.RankId;
					//AddHandler value.IDChanged, AddressOf this.handleParentIdChanged;
					value.IDChanged += this.handleParentIdChanged;
                } else {
					this.EmployeeRankId = null;
				}

            }


            get {
                //LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._Rank == null ) {
					this.loadRank();
                }
				
                return this._Rank;
            }
        }
        
        /// <summary>
        /// Loads parent object and sets the appropriate properties
        /// </summary>
        public virtual void loadRank() {
			
			if (this.RankLoaded) return;
			
			if ( this._Rank == null && this.EmployeeRankId > 0 ) {
                
				//call the setter here, not the private variable!
                this.Rank = new CsModelMappers.EmployeeRankDBMapper().findByKey(this.EmployeeRankId.Value);
                
            }

            this.RankLoaded=true;
			            
       }
		#endregion

        //associationChildOneCSharp.txt
        public bool EmployeeInfoLoaded {get;set;}

		public virtual CsModelObjects.EmployeeInfo EmployeeInfo {
			//1-1 child association
            set {
                this._EmployeeInfo = value;
				if (  this._EmployeeInfo != null) {
					this._EmployeeInfo.EIEmployeeId = this.EmployeeId;
					value.IDChanged += this.handleParentIdChanged;
				}     
            }
            get {
			    //LAZY LOADING! Only hit the database to get the child object if we need it
                if (! this.EmployeeInfoLoaded) {
					this.loadEmployeeInfo();
                } 
                return this._EmployeeInfo;
            } 
        }
        
        /// <summary>
        /// Loads child object from dabatabase, if not loaded already
        /// <//summary>
        private void loadEmployeeInfo() {
						
			if ( this.EmployeeInfoLoaded) { return; }

			if ( this.EmployeeId > 0)  {
				//call setter here, not the private variable
				this.EmployeeInfo = 
					new CsModelMappers.EmployeeInfoDBMapper().findWhere("EIEmployeeId={0}", this.EmployeeId);
				
			} 

			//set the loaded flag here
			this.EmployeeInfoLoaded = true;
            
        } //End Sub

		

		//associationChildManyCSharp.txt
		#region "Association EmployeeProjects"

		public bool EmployeeProjectsLoaded  {get;set;}

		public virtual CsModelObjects.EmployeeProject getEmployeeProject( int i ) {

            this.loadEmployeeProjects();
            if( this._EmployeeProjects.Count >= (i - 1)) {
                return this._EmployeeProjects[i];
            }
            return null;

        } //End Function        
		
		public virtual void AddEmployeeProject ( CsModelObjects.EmployeeProject val )  {
			//1-Many , add a single item!
			this.loadEmployeeProjects();
			val.EPEmployeeId = this.EmployeeId;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			val.IDChanged += this.handleParentIdChanged;
			this._EmployeeProjects.Add(val);

        }

		public virtual void ClearEmployeeProjects() {

            this.loadEmployeeProjects();
            this._deletedEmployeeProjects.AddRange(this._EmployeeProjects);
            this._EmployeeProjects.Clear();

        }

		public virtual void RemoveEmployeeProject( CsModelObjects.EmployeeProject val ) {
			
			this.loadEmployeeProjects();
			this._deletedEmployeeProjects.Add(val);
			this._EmployeeProjects.Remove(val);

        }
		
		public virtual IEnumerable< CsModelObjects.EmployeeProject > getDeletedEmployeeProjects() {
			
			return this._deletedEmployeeProjects;

        }

        public virtual IEnumerable< CsModelObjects.EmployeeProject > EmployeeProjects {
					

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._EmployeeProjects == null ) {
                    this.loadEmployeeProjects();
                } 
				
                return this._EmployeeProjects;
            }
            
			set {
				if (value == null ) {
					this._EmployeeProjects = null;
                } else {
                    this._EmployeeProjects = new List< CsModelObjects.EmployeeProject >();
                    this.addToEmployeeProjectsList(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the EmployeeProjects List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addToEmployeeProjectsList( IEnumerable< CsModelObjects.EmployeeProject> value ) {

			IEnumerator< CsModelObjects.EmployeeProject> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                CsModelObjects.EmployeeProject v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._EmployeeProjects.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        public virtual void loadEmployeeProjects() {
			
			if (this.EmployeeProjectsLoaded)return;
			//init list
			this._EmployeeProjects = new List< CsModelObjects.EmployeeProject>();

			if (! this.isNew ) {
                this.addToEmployeeProjectsList( new CsModelMappers.EmployeeProjectDBMapper().findList("EPEmployeeId={0}", this.EmployeeId));
            }
            
			this.EmployeeProjectsLoaded = true;
        } //End Sub
		#endregion


		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_EMPLOYEEID:
			return this.EmployeeId;
		case FLD_EMPLOYEENAME:
			return this.EmployeeName;
		case FLD_EMPLOYEERANKID:
			return this.EmployeeRankId;
		case FLD_SALARY:
			return this.Salary;
		case FLD_ADDRESS:
			return this.Address;
		case FLD_TELEPHONE:
			return this.Telephone;
		case FLD_MOBILE:
			return this.Mobile;
		case FLD_IDNUMBER:
			return this.IdNumber;
		case FLD_SSINUMBER:
			return this.SSINumber;
		case FLD_HIREDATE:
			return this.HireDate;
		case FLD_NUMDEPENDENTS:
			return this.NumDependents;
		case FLD_CREATEDATE:
			return this.CreateDate;
		case FLD_UPDATEDATE:
			return this.UpdateDate;
		case FLD_UPDATEUSER:
			return this.UpdateUser;
		case FLD_CREATEUSER:
			return this.CreateUser;
		case FLD_EMPLOYEETYPECODE:
			return this.EmployeeTypeCode;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_EMPLOYEEID.ToLower() ) {
			return this.EmployeeId;
		} else if (fieldKey==STR_FLD_EMPLOYEENAME.ToLower() ) {
			return this.EmployeeName;
		} else if (fieldKey==STR_FLD_EMPLOYEERANKID.ToLower() ) {
			return this.EmployeeRankId;
		} else if (fieldKey==STR_FLD_SALARY.ToLower() ) {
			return this.Salary;
		} else if (fieldKey==STR_FLD_ADDRESS.ToLower() ) {
			return this.Address;
		} else if (fieldKey==STR_FLD_TELEPHONE.ToLower() ) {
			return this.Telephone;
		} else if (fieldKey==STR_FLD_MOBILE.ToLower() ) {
			return this.Mobile;
		} else if (fieldKey==STR_FLD_IDNUMBER.ToLower() ) {
			return this.IdNumber;
		} else if (fieldKey==STR_FLD_SSINUMBER.ToLower() ) {
			return this.SSINumber;
		} else if (fieldKey==STR_FLD_HIREDATE.ToLower() ) {
			return this.HireDate;
		} else if (fieldKey==STR_FLD_NUMDEPENDENTS.ToLower() ) {
			return this.NumDependents;
		} else if (fieldKey==STR_FLD_CREATEDATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATEDATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_UPDATEUSER.ToLower() ) {
			return this.UpdateUser;
		} else if (fieldKey==STR_FLD_CREATEUSER.ToLower() ) {
			return this.CreateUser;
		} else if (fieldKey==STR_FLD_EMPLOYEETYPECODE.ToLower() ) {
			return this.EmployeeTypeCode;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
		switch (fieldKey) {
		case FLD_EMPLOYEEID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			}else{
				this.EmployeeId=(System.Int64)val;
			} //
			return;
		case FLD_EMPLOYEENAME:
			if (val == DBNull.Value || val == null ){
				this.EmployeeName = null;
			}else{
				this.EmployeeName=(System.String)val;
			} //
			return;
		case FLD_EMPLOYEERANKID:
			if (val == DBNull.Value || val == null ){
				this.EmployeeRankId = null;
			}else{
				this.EmployeeRankId=(System.Int64)val;
			} //
			return;
		case FLD_SALARY:
			if (val == DBNull.Value || val == null ){
				this.Salary = null;
			}else{
				this.Salary=(System.Decimal)val;
			} //
			return;
		case FLD_ADDRESS:
			if (val == DBNull.Value || val == null ){
				this.Address = null;
			}else{
				this.Address=(System.String)val;
			} //
			return;
		case FLD_TELEPHONE:
			if (val == DBNull.Value || val == null ){
				this.Telephone = null;
			}else{
				this.Telephone=(System.String)val;
			} //
			return;
		case FLD_MOBILE:
			if (val == DBNull.Value || val == null ){
				this.Mobile = null;
			}else{
				this.Mobile=(System.String)val;
			} //
			return;
		case FLD_IDNUMBER:
			if (val == DBNull.Value || val == null ){
				this.IdNumber = null;
			}else{
				this.IdNumber=(System.String)val;
			} //
			return;
		case FLD_SSINUMBER:
			if (val == DBNull.Value || val == null ){
				this.SSINumber = null;
			}else{
				this.SSINumber=(System.String)val;
			} //
			return;
		case FLD_HIREDATE:
			if (val == DBNull.Value || val == null ){
				this.HireDate = null;
			}else{
				this.HireDate=(System.DateTime)val;
			} //
			return;
		case FLD_NUMDEPENDENTS:
			if (val == DBNull.Value || val == null ){
				this.NumDependents = null;
			}else{
				this.NumDependents=(System.Int64)val;
			} //
			return;
		case FLD_CREATEDATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			}else{
				this.CreateDate=(System.DateTime)val;
			} //
			return;
		case FLD_UPDATEDATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			}else{
				this.UpdateDate=(System.DateTime)val;
			} //
			return;
		case FLD_UPDATEUSER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			}else{
				this.UpdateUser=(System.String)val;
			} //
			return;
		case FLD_CREATEUSER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			}else{
				this.CreateUser=(System.String)val;
			} //
			return;
		case FLD_EMPLOYEETYPECODE:
			if (val == DBNull.Value || val == null ){
				this.EmployeeTypeCode = null;
			}else{
				this.EmployeeTypeCode=(System.String)val;
			} //
			return;
		default:
			return;
		}

		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
		if ( fieldKey==STR_FLD_EMPLOYEEID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.EmployeeId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEENAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.EmployeeName = null;
			} else {
				this.EmployeeName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEERANKID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.EmployeeRankId = null;
			} else {
				this.EmployeeRankId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SALARY.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.Salary = null;
			} else {
				this.Salary=(System.Decimal)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_ADDRESS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.Address = null;
			} else {
				this.Address=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_TELEPHONE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.Telephone = null;
			} else {
				this.Telephone=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_MOBILE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.Mobile = null;
			} else {
				this.Mobile=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_IDNUMBER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.IdNumber = null;
			} else {
				this.IdNumber=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SSINUMBER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.SSINumber = null;
			} else {
				this.SSINumber=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_HIREDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.HireDate = null;
			} else {
				this.HireDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_NUMDEPENDENTS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.NumDependents = null;
			} else {
				this.NumDependents=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEETYPECODE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.EmployeeTypeCode = null;
			} else {
				this.EmployeeTypeCode=(System.String)val;
			}
			return;
		}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(EmployeeBase other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.EmployeeId == other.EmployeeId
				&& this.EmployeeName == other.EmployeeName
				&& this.EmployeeRankId.GetValueOrDefault() == other.EmployeeRankId.GetValueOrDefault()
				&& this.Salary.GetValueOrDefault() == other.Salary.GetValueOrDefault()
				&& this.Address == other.Address
				&& this.Telephone == other.Telephone
				&& this.Mobile == other.Mobile
				&& this.IdNumber == other.IdNumber
				&& this.SSINumber == other.SSINumber
				&& this.HireDate.GetValueOrDefault() == other.HireDate.GetValueOrDefault()
				&& this.NumDependents.GetValueOrDefault() == other.NumDependents.GetValueOrDefault()
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.UpdateUser == other.UpdateUser
				&& this.CreateUser == other.CreateUser
				&& this.EmployeeTypeCode == other.EmployeeTypeCode;;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.EmployeeId.GetHashCode()
				 ^ this.getStringHashCode(this.EmployeeName)
				 ^ this.EmployeeRankId.GetHashCode()
				 ^ this.Salary.GetHashCode()
				 ^ this.getStringHashCode(this.Address)
				 ^ this.getStringHashCode(this.Telephone)
				 ^ this.getStringHashCode(this.Mobile)
				 ^ this.getStringHashCode(this.IdNumber)
				 ^ this.getStringHashCode(this.SSINumber)
				 ^ this.HireDate.GetHashCode()
				 ^ this.NumDependents.GetHashCode()
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.UpdateUser)
				 ^ this.getStringHashCode(this.CreateUser)
				 ^ this.getStringHashCode(this.EmployeeTypeCode);;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is EmployeeBase) {

				return this.Equals((EmployeeBase)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(EmployeeBase obj1, EmployeeBase obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(EmployeeBase obj1, EmployeeBase obj2)
		{
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy()
		{
			//creates a copy

			//NOTE: we can't cast from EmployeeBase to Employee, so below we 
			//instantiate a Employee, NOT a EmployeeBase object
			Employee ret = EmployeeFactory.Create();

		ret.EmployeeId = this.EmployeeId;
		ret.EmployeeName = this.EmployeeName;
		ret.EmployeeRankId = this.EmployeeRankId;
		ret.Salary = this.Salary;
		ret.Address = this.Address;
		ret.Telephone = this.Telephone;
		ret.Mobile = this.Mobile;
		ret.IdNumber = this.IdNumber;
		ret.SSINumber = this.SSINumber;
		ret.HireDate = this.HireDate;
		ret.NumDependents = this.NumDependents;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.UpdateUser = this.UpdateUser;
		ret.CreateUser = this.CreateUser;
		ret.EmployeeTypeCode = this.EmployeeTypeCode;



			return ret;

		}

		public override void merge(IModelObject other)
		{
			//merges this Employee model object (me) with the "other" instance 

			Employee o = (Employee)other;

if (! string.IsNullOrEmpty(o.EmployeeName) && 
		 string.IsNullOrEmpty(this.EmployeeName)){
		this.EmployeeName = o.EmployeeName;
}
if ( o.EmployeeRankId != null && 
		 this.EmployeeRankId == null){
		this.EmployeeRankId = o.EmployeeRankId;
}
if ( o.Salary != null && 
		 this.Salary == null){
		this.Salary = o.Salary;
}
if (! string.IsNullOrEmpty(o.Address) && 
		 string.IsNullOrEmpty(this.Address)){
		this.Address = o.Address;
}
if (! string.IsNullOrEmpty(o.Telephone) && 
		 string.IsNullOrEmpty(this.Telephone)){
		this.Telephone = o.Telephone;
}
if (! string.IsNullOrEmpty(o.Mobile) && 
		 string.IsNullOrEmpty(this.Mobile)){
		this.Mobile = o.Mobile;
}
if (! string.IsNullOrEmpty(o.IdNumber) && 
		 string.IsNullOrEmpty(this.IdNumber)){
		this.IdNumber = o.IdNumber;
}
if (! string.IsNullOrEmpty(o.SSINumber) && 
		 string.IsNullOrEmpty(this.SSINumber)){
		this.SSINumber = o.SSINumber;
}
if ( o.HireDate != null && 
		 this.HireDate == null){
		this.HireDate = o.HireDate;
}
if ( o.NumDependents != null && 
		 this.NumDependents == null){
		this.NumDependents = o.NumDependents;
}
if ( o.CreateDate != null && 
		 this.CreateDate == null){
		this.CreateDate = o.CreateDate;
}
if ( o.UpdateDate != null && 
		 this.UpdateDate == null){
		this.UpdateDate = o.UpdateDate;
}
if (! string.IsNullOrEmpty(o.UpdateUser) && 
		 string.IsNullOrEmpty(this.UpdateUser)){
		this.UpdateUser = o.UpdateUser;
}
if (! string.IsNullOrEmpty(o.CreateUser) && 
		 string.IsNullOrEmpty(this.CreateUser)){
		this.CreateUser = o.CreateUser;
}
if (! string.IsNullOrEmpty(o.EmployeeTypeCode) && 
		 string.IsNullOrEmpty(this.EmployeeTypeCode)){
		this.EmployeeTypeCode = o.EmployeeTypeCode;
}


		}

		public int CompareTo(Employee other ) {
		return  this.EmployeeName.CompareTo(other.EmployeeName);
	}


		#endregion

#region "parentIdChanged"
	//below sub is called when parentIdChanged
	public override void handleParentIdChanged(IModelObject parentMo ){
		// Assocations from CsModelObjects.EmployeeRank
		if ( parentMo is CsModelObjects.EmployeeRank) {
			this.EmployeeRankId= ((CsModelObjects.EmployeeRank)parentMo).RankId;
		}
	}
#endregion



		#region "ID Property"

		public override object Id {
			get { return this._EmployeeId; }
			set {
				this._EmployeeId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class EmployeeRequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			Employee mo = (Employee)imo;
if (string.IsNullOrEmpty( mo.EmployeeName)) {
		throw new ModelObjectRequiredFieldException("EmployeeName");
}
if (mo.EmployeeRankId == null ) {
		throw new ModelObjectRequiredFieldException("EmployeeRankId");
}

		}

	}
	#endregion

}


