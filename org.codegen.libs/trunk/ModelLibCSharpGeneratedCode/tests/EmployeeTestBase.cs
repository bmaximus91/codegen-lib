
using System.Text;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using org.model.lib.Model;
using CsModelObjects;

///<comments>
///************************************************************
/// Class autogenerated on 13-04-2015 07:15:41 by ModelGenerator
/// DO NOT MODIFY CODE IN THIS CLASS!!
///************************************************************
///</comments>
[TestClass()] public class EmployeeTestBase {

    ///<summary>
    ///Gets or sets the test context which provides
    ///information about and functionality for the current test run.
    ///</summary>
    public TestContext TestContext {get;set;}
    

#region "Additional test attributes"
    ///
    /// You can use the following additional attributes as you write your tests:
    ///
    /// Use ClassInitialize to run code before running the first test in the class
    [ClassInitialize()] public static void MyClassInitialize(TestContext testContext ) {
        ModelContext.newForUnitTests();
    }
    
    /// Use ClassCleanup to run code after all tests in a class have run
    [ClassCleanup()] public static void MyClassCleanup() {
        ModelContext.release();
    }


    //Use TestInitialize to run code before running each test
    [TestInitialize()]
    public void MyTestInitialize() {
    }
    
    // Use TestCleanup to run code after each test has run
    [TestCleanup()] public void MyTestCleanup() {
    
	}
    
#endregion


    [TestMethod()] public void TestLoadAndSaveEmployee() {
		
		ModelContext.beginTrans();
		try {

			int pid  = ModelContext.CurrentDBUtils.getIntValue("select top 1 EmployeeId from Employee");
			if (pid == 0) {
				Assert.Inconclusive("No Employee in database, table is empty");
			} else {

				CsModelMappers.EmployeeDBMapper pdb = new CsModelMappers.EmployeeDBMapper();
				Employee p = pdb.findByKey(pid);
				Employee p2 = (Employee)p.copy();

				//Test equality and hash codes
				Assert.AreEqual(p.GetHashCode(), p2.GetHashCode());
				Assert.AreEqual(p, p2);
						
				p.isDirty = true ; // force save
				pdb.save(p);
			
				// now reload object from database
				p = null;
				p = pdb.findByKey(pid);
            
				//test fields to be equal before and after save
						Assert.IsTrue(p.EmployeeId == p2.EmployeeId,"Expected Field EmployeeId to be equal");
		Assert.IsTrue(p.EmployeeName == p2.EmployeeName,"Expected Field EmployeeName to be equal");
		Assert.IsTrue(p.EmployeeRankId.GetValueOrDefault() == p2.EmployeeRankId.GetValueOrDefault(),"Expected Field EmployeeRankId to be equal");
		Assert.IsTrue(p.Salary.GetValueOrDefault() == p2.Salary.GetValueOrDefault(),"Expected Field Salary to be equal");
		Assert.IsTrue(p.Address == p2.Address,"Expected Field Address to be equal");
		Assert.IsTrue(p.Telephone == p2.Telephone,"Expected Field Telephone to be equal");
		Assert.IsTrue(p.Mobile == p2.Mobile,"Expected Field Mobile to be equal");
		Assert.IsTrue(p.IdNumber == p2.IdNumber,"Expected Field IdNumber to be equal");
		Assert.IsTrue(p.SSINumber == p2.SSINumber,"Expected Field SSINumber to be equal");
		Assert.IsTrue(p.HireDate.GetValueOrDefault() == p2.HireDate.GetValueOrDefault(),"Expected Field HireDate to be equal");
		Assert.IsTrue(p.NumDependents.GetValueOrDefault() == p2.NumDependents.GetValueOrDefault(),"Expected Field NumDependents to be equal");

					Assert.IsTrue(p.Rank != null);
	Assert.IsTrue(p.EmployeeInfo != null);
	Assert.IsTrue(p.EmployeeProjects != null);

				
				p.isDirty = true; //to force save
				ModelContext.Current().saveModelObject(p);

				p = ModelContext.Current().loadModelObject< Employee >(p.Id);
				
			}

		} finally {
            ModelContext.rollbackTrans(); // 'Nothing should be saved to the database!
        }

   }

}

