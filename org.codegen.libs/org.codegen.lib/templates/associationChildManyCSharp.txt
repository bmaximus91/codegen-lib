		//associationChildManyCSharp.txt
		#region "Association <association_name>"

		public bool <association_name>Loaded  {get; private set;}

		public virtual <datatype> <prop_prefix><association_name_singular>GetAt( int i ) {

            this.load<association_name>();
            if( this._<association_name>.Count >= (i - 1)) {
                return this._<association_name>[i];
            }
            return null;

        } //End Function        
		
		public virtual void <prop_prefix><association_name_singular>Add( <datatype> val )  {
			//1-Many , add a single item!
			this.load<association_name>();
			val.<child_field_runtime> = this.<parent_field_runtime>;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			this.IDChanged += val.handleParentIdChanged;
			this._<association_name>.Add(val);

        }

		public virtual void <prop_prefix><association_name>Clear() {

            this.load<association_name>();
            this._deleted<association_name>.AddRange(this._<association_name>);
            this._<association_name>.Clear();

        }

		public virtual void <prop_prefix><association_name_singular>Remove( <datatype> val ) {
			
			this.load<association_name>();
			this._deleted<association_name>.Add(val);
			this._<association_name>.Remove(val);

        }
		
		public virtual IEnumerable< <datatype> ><prop_prefix><association_name>GetDeleted() {
			
			return this._deleted<association_name>;

        }

        public virtual IEnumerable< <datatype> > <prop_prefix><association_name> {

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._<association_name> == null ) {
                    this.load<association_name>();
                } 
				<sort>
                return this._<association_name>;
            }
            
			set {
				if (value == null ) {
					this._<association_name> = null;
                } else {
                    this._<association_name> = new List< <datatype> >();
                    this.addTo<association_name>List(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the <association_name> List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addTo<association_name>List( IEnumerable< <datatype>> value ) {

			IEnumerator< <datatype>> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                <datatype> v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._<association_name>.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        private void load<association_name>() {
			
			if (this.<association_name>Loaded)return;
			//init list
			this._<association_name> = new List< <datatype>>();

			if (! this.isNew ) {
                this.addTo<association_name>List( new <db_mapper>().findList("<child_field>=?", this.<parent_field_runtime>));
            }
            
			this.<association_name>Loaded = true;
        } 
		#endregion