using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using org.model.lib;
using org.model.lib.Model;
using org.model.lib.db;

using System.Linq;
using <NAMESPACE>;
using System.Data.Linq.Mapping;

//<comments>
// Template: DBMapperBase.csharp.txt
//************************************************************
// 
// Class autogenerated on<CURDATE> by <GENERATOR>
// Extends base DBMapperBase object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class <MODEL_CLASS_NAME>DBMapper
//
//************************************************************
//</comments>

namespace <DBMAPPER_NAMESPACE> {

	[System.Runtime.InteropServices.ComVisible(false)]<IS_PRIMARY_KEY_AUOGEN_FALSE>
	[Table(Name = "<TABLE_NAME>")]
	[SelectObject("<SELECT_FROM_NAME>")][KeyFieldName("<PK_FIELD_NAME>")]
	public class <MODEL_CLASS_NAME>DBMapper : <MAPPER_BASE_CLASS> {

		#region "Constructors "
		public <MODEL_CLASS_NAME>DBMapper(DBUtils _dbConn) : base(_dbConn) {
		}


		public <MODEL_CLASS_NAME>DBMapper() : base() {
		}
		#endregion

		#region "Overloaded Functions"

		public new <MODEL_CLASS_NAME> findWhere(string sWhereClause, params object[] @params) {

			return (<MODEL_CLASS_NAME>)base.findWhere(sWhereClause, @params);
		}


		public void save<MODEL_CLASS_NAME>(<MODEL_CLASS_NAME> mo) {
			base.save(mo);
		}

		public new <MODEL_CLASS_NAME> findByKey(object keyval) {

			return (<MODEL_CLASS_NAME>)base.findByKey(keyval);

		}

		#endregion


		#region "getUpdateDBCommand"
		public override IDbCommand getUpdateDBCommand(IModelObject modelObj, string sql) {
			<MODEL_CLASS_NAME> obj = (<MODEL_CLASS_NAME>)modelObj;
			IDbCommand stmt = this.dbConn.getCommand(sql);
<FILL_STATEMENT>
			return stmt;
		}
		#endregion
<SAVE_CHILDREN_CODE>
<SAVE_PARENT_CODE>

		#region "Find functions"

		///	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		///	it creates and loads a ModelObject. 
		/// </summary>
		///	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		/// that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		///	<param name="params"> Parameter values to be passed to sql statement </param>
		///	<returns> A List(Of <MODEL_CLASS_NAME>) object containing all objects loaded </returns>
		///	 
		public new List<<MODEL_CLASS_NAME>> findList(string sWhereClause, params object[] @params) {

			string sql = this.getSqlWithWhereClause(sWhereClause);
			IDataReader rs = null;
			List<<MODEL_CLASS_NAME>> molist = new List<<MODEL_CLASS_NAME>>();

			try {
				rs = dbConn.getDataReaderWithParams(sql, @params);
				this.Loader.DataSource = rs;

				while (rs.Read()) {
					IModelObject mo = this.getModelInstance();
					this.Loader.load(mo);
					molist.Add((<MODEL_CLASS_NAME>)mo);

				}


			} finally {
				this.dbConn.closeDataReader(rs);
			}

			return molist;

		}

		///	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		///	it creates and loads a ModelObject. </summary>
		///	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		/// that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		///	<param name="params"> List of IDataParameters to be passed to sql statement </param>
		///	<returns> A List(Of <MODEL_CLASS_NAME>) object containing all objects loaded </returns>
		///	 
		public List<<MODEL_CLASS_NAME>> findList(string sWhereClause, List<IDataParameter> @params) {

			string sql = this.getSqlWithWhereClause(sWhereClause);
			IDataReader rs = null;
			List<<MODEL_CLASS_NAME>> molist = new List<<MODEL_CLASS_NAME>>();

			try {
				rs = dbConn.getDataReader(sql, @params);
				this.Loader.DataSource = rs;

				while (rs.Read()) {
					IModelObject mo = this.getModelInstance();
					this.Loader.load(mo);
					molist.Add((<MODEL_CLASS_NAME>)mo);

				}


			} finally {
				this.dbConn.closeDataReader(rs);
			}

			return molist;

		}


		///    
		///	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		/// <returns>List(Of <MODEL_CLASS_NAME>) </returns>
		public List<<MODEL_CLASS_NAME>> findAll()
		{
			return this.findList(string.Empty);
		}

		public override IModelObjectLoader Loader {
			get {
				if (this._loader == null) {
					this._loader = new <MODEL_CLASS_NAME>DataReaderLoader();
				}
				return this._loader;
			}
			set { this._loader = value; }
		}

		#endregion

		public override IModelObject getModelInstance() {
			return new <MODEL_CLASS_NAME>();
		}

	}

	#region " <MODEL_CLASS_NAME> Loader "
	[System.Runtime.InteropServices.ComVisible(false)]
	public class <MODEL_CLASS_NAME>DataReaderLoader : DataReaderLoader {
		public override void load(IModelObject mo) {
<DATA_READER_CONSTANTS>
			<MODEL_CLASS_NAME> obj = (<MODEL_CLASS_NAME>)mo;
			obj.IsObjectLoading = true;

<LOADFROMRS_CODE>

			obj.isNew = false;
			// since we've just loaded from database, we mark as "old"
			obj.isDirty = false;
			obj.IsObjectLoading = false;
			obj.afterLoad();

			return;

		}

	}

	#endregion

	///<summary>
	/// Final Class with convinience shared methods for loading/saving the <MODEL_CLASS_NAME>Rank ModelObject. 
	///</summary>
	[System.Runtime.InteropServices.ComVisible(false)]
	public sealed class <MODEL_CLASS_NAME>DataUtils {

		#region "Shared ""get"" Functions "

		public static List<<MODEL_CLASS_NAME>> findList(string @where, params object[] @params) {

			<MODEL_CLASS_NAME>DBMapper dbm = new <MODEL_CLASS_NAME>DBMapper();
			return dbm.findList(@where, @params);

		}

		public static List<<MODEL_CLASS_NAME>> findList(string @where, List<IDataParameter> listOfIParams) {

			<MODEL_CLASS_NAME>DBMapper dbm = new <MODEL_CLASS_NAME>DBMapper();
			return dbm.findList(@where,listOfIParams);

		}

		public static <MODEL_CLASS_NAME> findOne(string @where, params object[] @params) {

			<MODEL_CLASS_NAME>DBMapper dbm = new <MODEL_CLASS_NAME>DBMapper();
			return (<MODEL_CLASS_NAME>)dbm.findWhere(@where, @params);

		}

		public static List<<MODEL_CLASS_NAME>> findList(){

			return new <MODEL_CLASS_NAME>DBMapper().findAll();

		}

		public static <MODEL_CLASS_NAME> findByKey(object id) {

			return (<MODEL_CLASS_NAME>)new <MODEL_CLASS_NAME>DBMapper().findByKey(id);

		}

		/// <summary>
		/// Reload the <MODEL_CLASS_NAME> from the database
		/// </summary>
		/// <remarks>
		/// use this method when you want to relad the <MODEL_CLASS_NAME> 
		/// from the database, discarding any changes
		/// </remarks>
		public static void reload(ref <MODEL_CLASS_NAME> mo) {

			if (mo == null) {
				throw new System.ArgumentNullException("null object past to reload function");
			}

			mo = (<MODEL_CLASS_NAME>)new <MODEL_CLASS_NAME>DBMapper().findByKey(mo.Id);

		}

		#endregion

		#region "Shared Save and Delete Functions"
		/// <summary>
		/// Convinience method to save a <MODEL_CLASS_NAME> Object.
		/// Important note: DO NOT CALL THIS IN A LOOP!
		/// </summary>
		/// <param name="<MODEL_CLASS_NAME>Obj"></param>
		/// <remarks>
		/// Important note: DO NOT CALL THIS IN A LOOP!  
		/// This method simply instantiates a <MODEL_CLASS_NAME>DBMapper and calls the save method
		/// </remarks>
		public static void save<MODEL_CLASS_NAME>(params <MODEL_CLASS_NAME>[] <MODEL_CLASS_NAME>Obj)
		{

			<MODEL_CLASS_NAME>DBMapper dbm = new <MODEL_CLASS_NAME>DBMapper();
			dbm.saveList(<MODEL_CLASS_NAME>Obj.ToList());


		}


		public static void delete<MODEL_CLASS_NAME>(<MODEL_CLASS_NAME> <MODEL_CLASS_NAME>Obj)
		{

			<MODEL_CLASS_NAME>DBMapper dbm = new <MODEL_CLASS_NAME>DBMapper();
			dbm.delete(<MODEL_CLASS_NAME>Obj);

		}
		#endregion

		#region "Data Table and data row load/save "

		public static void save<MODEL_CLASS_NAME>(DataRow dr, ref <MODEL_CLASS_NAME> mo) {
			if (mo == null) {
				mo = new <MODEL_CLASS_NAME>();
			}

			foreach (DataColumn dc in dr.Table.Columns) {
				mo.setAttribute(dc.ColumnName, dr[dc.ColumnName]);
			}

			save<MODEL_CLASS_NAME>(mo);

		}

		public static void save<MODEL_CLASS_NAME>(DataTable dt, ref <MODEL_CLASS_NAME> mo) {
			foreach (DataRow dr in dt.Rows) {
				save<MODEL_CLASS_NAME>(dr, ref mo);
			}

		}

		public static <MODEL_CLASS_NAME> loadFromDataRow(DataRow r) {

			DataRowLoader a = new DataRowLoader();
			IModelObject mo = new <MODEL_CLASS_NAME>();
			a.DataSource = r;
			a.load(mo);
			return (<MODEL_CLASS_NAME>)mo;

		}

		#endregion

	}

}

