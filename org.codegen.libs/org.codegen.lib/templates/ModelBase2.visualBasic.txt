
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
Imports System.Runtime.Serialization
Imports System.Data.Linq.Mapping
Imports System.ComponentModel.DataAnnotations

'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on <CURDATE> by <GENERATOR>
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class <MODEL_CLASS_NAME>
'
'************************************************************
'</comments>
Namespace <NAMESPACE>
<Table(Name := "<TABLE_NAME>")>
<DefaultMapperAttr(GetType(<MODEL_CLASS_NAME>DBMapper)), DataContract, _
ComVisible(False),Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
partial class <MODEL_CLASS_NAME>
		Inherits <MODEL_BASE_CLASS>
		Implements IEquatable(Of <MODEL_CLASS_NAME>)<MODEL_CLASS_IFACE_NAME> 

#Region "Constructor"
    
    Friend sub New()
		Me.addValidator(New <MODEL_CLASS_NAME>RequiredFieldsValidator)
		Me.Id = ModelObjectKeyGen.nextId()
    End Sub

#End Region

#Region "Children and Parents"
	
	public Overrides sub loadObjectHierarchy()
		<loadObjectHierarchy>
	End Sub

	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
		<SETUP_CHILDREN_ARRAY>
		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		<SETUP_PARENTS_ARRAY>
		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

<STRCONSTANTS>

<CONSTANTS>


        '''<summary> Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {<STRING_FIELD_LIST>}
        End Function
        
#END Region

#Region "Field Declarations"

<FIELD_DECLARATIONS>

#END Region

#Region "Field Properties"
<CLASS_PROPERTIES>
#End Region

#Region "Getters/Setters of values by field index/name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		
<GET_ATTRS>

    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower
<GET_ATTRS_STR>
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		Try
<SET_ATTRS>
		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try
    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		Try
<SET_ATTRS_STR>
		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try

    End Sub

#End Region
#Region "Overrides of GetHashCode and Equals "
	Public Overloads Function Equals(ByVal other As <MODEL_CLASS_NAME>) As Boolean _     
		Implements System.IEquatable(Of <MODEL_CLASS_NAME>).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return <EQUALS_FIELDS>
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return <X_OR_FIELS> 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, <MODEL_CLASS_NAME>)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As <MODEL_CLASS_NAME>, ByVal obj2 As <MODEL_CLASS_NAME>) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As <MODEL_CLASS_NAME>, ByVal obj2 As <MODEL_CLASS_NAME>) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a shallow copy
        Dim ret as <MODEL_CLASS_NAME> =  new <MODEL_CLASS_NAME>()
<COPY_FIELDS>		
		return ret
		
	End Function
<DEFAULT_SORTER>	
#End Region

<UPDATE_CHILDREN_LINK_FIELD>

#Region "ID Property"
	
    <DataMember>Public NotOverridable Overrides Property Id() As object
        Get
            return me._<PK_MO_FIELD_NAME>
        End Get
        Set(ByVal value As object)
             me._<PK_MO_FIELD_NAME> = <PK_CONVERTER>
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	<MODEL_EXTRA_CODE>
#End Region
	
	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
    Public Class <MODEL_CLASS_NAME>RequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As <MODEL_CLASS_NAME> = CType(imo, <MODEL_CLASS_NAME>)
			<REQ_FIELDS_VALIDATOR>
			
        End Sub

    End Class
#End Region

End Namespace
