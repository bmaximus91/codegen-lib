using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.Serialization;
using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;
using System.Data.Linq.Mapping;
using System.ComponentModel.DataAnnotations;


//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
//</comments>
namespace <NAMESPACE> {

	[Table(Name = "<TABLE_NAME>")]
	[DataContract][SelectObject("<SELECT_FROM_NAME>")][KeyFieldName("<PK_FIELD_NAME>")]
	[DefaultMapperAttr(typeof(<DBMAPPER_NAMESPACE>.<MODEL_CLASS_NAME>DBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	partial class <MODEL_CLASS_NAME>:<MODEL_BASE_CLASS>,IEquatable<<MODEL_CLASS_NAME>> <MODEL_CLASS_IFACE_NAME> {

		#region "Constructor"

		public <MODEL_CLASS_NAME>() {
			this.Id = ModelObjectKeyGen.nextId();
			this.addValidator(new <MODEL_CLASS_NAME>RequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		public override void loadObjectHierarchy() {
<loadObjectHierarchy>
		}

		/// <summary>
		/// Returns the *loaded* children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
			<SETUP_CHILDREN_ARRAY>
			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			<SETUP_PARENTS_ARRAY>
			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

		<STRCONSTANTS>

		<CONSTANTS>


		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				<STRING_FIELD_LIST>
			};
		}

		#endregion

		#region "Field Declarations"
<FIELD_DECLARATIONS>
		#endregion

		#region "Field Properties"
<CLASS_PROPERTIES>
		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){
<GET_ATTRS>
		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();
<GET_ATTRS_STR>
		}

		public override void setAttribute(int fieldKey, object val){
			try {
<SET_ATTRS>
			} catch ( Exception ex ) {
				throw new ApplicationException(
						String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
								fieldKey, val, ex.Message));
			}
		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
			try {
<SET_ATTRS_STR>
			} catch ( Exception ex ) {
				throw new ApplicationException(
					String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
							fieldKey, val, ex.Message));
			}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(<MODEL_CLASS_NAME> other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return <EQUALS_FIELDS>;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return <X_OR_FIELS>;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is <MODEL_CLASS_NAME>) {

				return this.Equals((<MODEL_CLASS_NAME>)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(<MODEL_CLASS_NAME> obj1, <MODEL_CLASS_NAME> obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(<MODEL_CLASS_NAME> obj1, <MODEL_CLASS_NAME> obj2) {
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy() {
			//creates a copy
			<MODEL_CLASS_NAME> ret = new <MODEL_CLASS_NAME>();
<COPY_FIELDS>
			return ret;

		}
<DEFAULT_SORTER>
		#endregion

<UPDATE_CHILDREN_LINK_FIELD>


		#region "ID Property"

		[DataMember]public sealed override object Id {
			get { return this._<PK_MO_FIELD_NAME>; }
			set {
				this._<PK_MO_FIELD_NAME> = <PK_CONVERTER>
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"
<MODEL_EXTRA_CODE>
		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class <MODEL_CLASS_NAME>RequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			<MODEL_CLASS_NAME> mo = (<MODEL_CLASS_NAME>)imo;
<REQ_FIELDS_VALIDATOR>
		}

	}
	#endregion

}

