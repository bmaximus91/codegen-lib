<?xml version="1.0" encoding="windows-1253"?>

<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             targetNamespace="ClassGenerator4">

  <xs:element name="project">
    <xs:complexType>
      <xs:sequence>
        
        <xs:element name="generatorVersion" minOccurs="1">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="4" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>

        <xs:element name="generatorExeRequiredVersion" type="xs:string" 
                    minOccurs="0">
          <xs:annotation>
            <xs:documentation>if present, checks the generator executable version to match</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="projectFile" type="xs:string" minOccurs="1">
          <xs:annotation>
            <xs:documentation>The complete path and file name of the vb.net project file (to automatically add new files)</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="projectName" type="xs:string" minOccurs="1">
          <xs:annotation>
            <xs:documentation>The project name</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="outputDir" type="xs:string" minOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Root Directory Where to save generated Model Object files. relative paths . and .. are
              taken relative to the xml configuarions file
            </xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="dotNetLanguage" minOccurs="0" default="VB">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="VB" />
              <xs:enumeration value="CSHARP" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>

        <xs:element name="testProjectOutputDir" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Root Directory Where to save generated Test files. If omitted, test files are not generated.</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="UIProjectOutputDir" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              Root Directory Where to save generated User Intrerface files.
              If omitted, User Interface files (Controls, Forms, ASP.NET forms) are not generated.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="UIType" minOccurs="0">

          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="ASP.NET" />
              <xs:enumeration value="MVC.NET" />
              <xs:enumeration value="WINDOWS FORMS" />

            </xs:restriction>
          </xs:simpleType>

        </xs:element>

        <xs:element name="defaultNamespace" minOccurs="1" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Default namespace. Important Note: The name space drives the output path of the Files.
              Every dot "." is replaced by "\" and the default output dir as inserted
            </xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="defaultDBMapperNameSpace"  minOccurs="0" type="xs:string">
          <xs:annotation>
            <xs:documentation>
              Default Namespace of DBMappers
              If not specified, value is "defaultNamespace" above
              Important Note: The name space drives the output path of the DBMapper Files.
              Every dot "." is replaced by "\" and the default output dir as inserted

              Also, the sql files are also placed in the same directory as the DBMappers
            </xs:documentation>
          </xs:annotation>

        </xs:element>

        <xs:element name="TestClassNameSpace"  minOccurs="0" type="xs:string" default="" />

        <xs:element name="propertiesPrefix"  minOccurs="0" type="xs:string" default="Fld">
          <xs:annotation>
            <xs:documentation>
              If this is specified, all field properties will be prefixed with the supplied string
            </xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="dbConnectionString" type="xs:string" minOccurs="1" />
        <xs:element name="dbConnectionDialect" minOccurs="1">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="MSSQL" />
              <xs:enumeration value="JET" />
              <xs:enumeration value="ORACLE" />
              <xs:enumeration value="MYSQL" />
              <xs:enumeration value="COMMON" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>

        <xs:element name="dbConnectionType" minOccurs="1">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="CONN_MSSQL" />
              <xs:enumeration value="CONN_ORACLE" />
              <xs:enumeration value="CONN_OLEDB" />
            </xs:restriction>
          </xs:simpleType>
        </xs:element>

        <xs:element name="booleanFields"  minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              Define boolean fields in the database, in the form of tableName.fieldName.
              Example:
              &lt;booleanFields/&gt;
                &lt;booleanField Table="myTable" Field="myfield" /&gt;
              &lt;/booleanFields/&gt;
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
            <xs:element maxOccurs="unbounded" minOccurs="1" name="booleanField">
              <xs:complexType>
              <xs:attribute name="tableName" type="xs:string"></xs:attribute>
              <xs:attribute name="fieldName" type="xs:string"></xs:attribute>
               </xs:complexType>
            </xs:element>
            </xs:sequence>
          </xs:complexType>
          
        </xs:element>

        <xs:element name="enumerationFields"  minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              Specify Enumeration fields in the model object, from Integer fields in the database
              
              &lt;enumarationFields/&gt;
              &lt;enumarationField Table="myTable" Field="myfield" enumType="someEnum"/&gt;
              &lt;/enumarationFields/&gt;
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="1" name="enumarationField">
                <xs:complexType>
                  <xs:attribute name="tableName" type="xs:string"></xs:attribute>
                  <xs:attribute name="fieldName" type="xs:string"></xs:attribute>
                  <xs:attribute name="enumType" type="xs:string"></xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>

        </xs:element>
        
        <xs:element maxOccurs="unbounded" minOccurs="1" name="table">

          <xs:complexType>
           <xsd:all>

              <xs:element name="TableName" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    DatabaseObjectName: A **Table** that exists in the database
                  </xs:documentation>
                </xs:annotation>

              </xs:element>

              <xs:element name="ClassName" minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Generated Class Name, default = Model&lt;DatabaseObjectName&gt;Base.
                    NOTE: you must change the classname thru this element if table name is pural
                  </xs:documentation>
                </xs:annotation>

              </xs:element>

              <xs:element name="Namespace" minOccurs="0" type="xs:string" >
                <xs:annotation>
                  <xs:documentation>
                    Name space of model object
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="SelectObject" minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Table or View that exists in the database, and from which the
                    select statements will be generated.  This is usufull in case you want to
                    select data from a view object but save it to another table
                    Example, employee table and vEmployee view.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="pkfield" minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Primary key field name of selectObject.
                    If this is not specified, the generator will autometically generate it.
                    You must specify it if select object is a view.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="SortField" minOccurs="0" default="" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    if sort field is specified, the class will implement IComparable(Of &lt;class name&gt;)
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="SortAscending" minOccurs="0"
                          default="true" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Only applies if SortField is specified
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="GenerateUI" minOccurs="0"
                         default="true" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Flag to indicate if we are going to generate user interface element of enity
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="GenerateMapper" minOccurs="0"
                                       default="true" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Flag to indicate if we are going to generate DBMapper of entity
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="DBMapperNameSpace"  minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Where to place the DBMapper Class Files
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="ModelBaseClass" type="xs:string" default="ModelObject">
                <xs:annotation>
                  <xs:documentation>
                    if specified, the model object class generated will imherit from 
                    specified class.  Must be a fully qualified class name that inherits from
                    ModelObject
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="ModelImplementedInterfaces"  minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Comma separated interface(s) implemented by the model object
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="Lookups" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FieldName" minOccurs="1" type="xs:string" />
                    <xs:element name="DataSource" type="xs:string" minOccurs="1"/>
                    <xs:element name="ValueMember" type="xs:string" minOccurs="1"/>
                    <xs:element name="DisplayMember" type="xs:string" minOccurs="1"/>

                  </xs:sequence>
                </xs:complexType>
              </xs:element>
             
              <xs:element name="ModelExtraCode" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>
                    Extra code to be appended to model object generated class.
                    Must be valid vb/c# code.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>

              <xs:element name="association" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="relationType" minOccurs="1" default="CHILD">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="PARENT" />
                          <xs:enumeration value="CHILD" />
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                    <!--Is this a type or a parent ? -->
                    <xs:element name="DataType" type="xs:string" />
                    <!--.NET datatype of association.  This must be a fully qualified
                          name of the .net class that is related to this class -->
                    <xs:element name="AssociationName" minOccurs="1" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>
                          Name of association
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>


                    <xs:element name="AssociationSingular" minOccurs="0" type="xs:string" >
                      <xs:annotation>
                        <xs:documentation>
                          Singular Name of association. For example, if AssociationName="Cars" you could have
                          AssociationSingular="Car"
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <!--Name of association -->

                    <xs:element name="cardinality" default="*">
                      <xs:simpleType>
                        <xs:restriction base="xs:string">
                          <xs:enumeration value="1" />
                          <xs:enumeration value="*" />
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>

                    <xs:element name="SortField" minOccurs="0" default="" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>
                          Only applies for one-to-many associations.
                          If SortField is specified, it must correspond to
                          a class field present in the datatype.
                          A comparator will be generated and used to sort the modelobject list
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="SortAscending" minOccurs="0"
                                default="true" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>
                          Only applies if SortField is specified
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>


                    <xs:element name="isReadOnly" minOccurs="0" default="false" type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>
                          if isReadOnly = true, then all no save code is generated
                          for this association
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>



                    <xs:element name="parentFieldName" minOccurs="0" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>
                          The SQL name of the field in the parent table.
                          Example:
                          1. Association between MEMBER -> ADDRESS, with address being the Home Address.
                          2. 2nd Association between MEMBER -> ADDRESS, with address being the Employer Address.
                          On the Member Object, we have home_address_id being the foreign key to the
                          ADDRESS table, and employment_address_id being the foreign key to the
                          ADDRESS table for employment address.

                          In the first case, parentFieldName = "HomeAddressId"
                          In the second case, parentFieldName = "EmploymentAddressId"
                          
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>

                    <xs:element name="childFieldName" minOccurs="0" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>
                          The SQL name of the field that links the 2 tables in the child table.
                        </xs:documentation>
                      </xs:annotation>
                    </xs:element>

                  </xs:sequence>
                </xs:complexType>
              </xs:element>

           </xsd:all>
          </xs:complexType>

        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

</xs:schema>
