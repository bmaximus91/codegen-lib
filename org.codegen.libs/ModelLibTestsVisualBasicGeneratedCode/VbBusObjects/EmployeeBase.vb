
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
Imports System.Runtime.Serialization
Imports System.Data.Linq.Mapping
Imports System.ComponentModel.DataAnnotations

'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on 09/01/2017 12:22:50 by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class Employee
'
'************************************************************
'</comments>
Namespace VbBusObjects
<Table(Name := "Employee")><SelectObject("vEmployee")><KeyFieldName("EmployeeId")> _
<DefaultMapperAttr(GetType(EmployeeDBMapper)), DataContract, _
ComVisible(False),Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
partial class Employee
		Inherits ModelObject
		Implements IEquatable(Of Employee),IAuditable,System.IComparable(Of Employee) 

#Region "Constructor"
    
    Friend sub New()
		Me.addValidator(New EmployeeRequiredFieldsValidator)
		Me.Id = ModelObjectKeyGen.nextId()
    End Sub

#End Region

#Region "Children and Parents"
	<OnDeserializing>
    Public sub OnDeserializingMethod(context as StreamingContext) 
		me.IsObjectLoading = true
    End Sub

	<OnDeserialized>
    Public sub OnDeserializedMethod( context as StreamingContext)
			if me._Rank isNot Nothing Then
				AddHandler me._Rank.IDChanged, AddressOf me.handleParentIdChanged
			End If
			if me._EmployeeInfo isNot Nothing Then
				AddHandler me.IDChanged, AddressOf me._EmployeeInfo.handleParentIdChanged
			End If
			if me._EmployeeProjects isNot Nothing Then
				For Each ep as VbBusObjects.EmployeeProject  in me._EmployeeProjects
					AddHandler me.IDChanged, AddressOf ep.handleParentIdChanged
				Next '
			End If

		me.IsObjectLoading = false
		me.isDirty = true
    End Sub

	Public Overrides sub loadObjectHierarchy()
				LoadPrRank()
		LoadPrEmployeeInfo()
		LoadPrEmployeeProjects()

	End Sub

	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
			if  Me._EmployeeInfo isNot Nothing then
		ret.Add(me.PrEmployeeInfo)
	End If
	if  Me.EmployeeProjectsLoaded Then 'check if loaded first!
		Dim lp As List(Of ModelObject) = Me._EmployeeProjects.ConvertAll( _
				New Converter(Of VbBusObjects.EmployeeProject, ModelObject)(
			Function(pf As VbBusObjects.EmployeeProject)
				Return DirectCast(pf, ModelObject)
			End Function))
		ret.AddRange(lp)
	End If

		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		if  Me._Rank isNot Nothing AndAlso Me.RankLoaded Then
	ret.Add(me.PrRank)
End If

		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

			public Const STR_FLD_EMPLOYEEID as String = "EmployeeId"
			public Const STR_FLD_EMPLOYEENAME as String = "EmployeeName"
			public Const STR_FLD_EMPLOYEERANKID as String = "EmployeeRankId"
			public Const STR_FLD_SALARY as String = "Salary"
			public Const STR_FLD_ADDRESS as String = "Address"
			public Const STR_FLD_TELEPHONE as String = "Telephone"
			public Const STR_FLD_MOBILE as String = "Mobile"
			public Const STR_FLD_IDNUMBER as String = "IdNumber"
			public Const STR_FLD_SSINUMBER as String = "SSINumber"
			public Const STR_FLD_HIREDATE as String = "HireDate"
			public Const STR_FLD_NUMDEPENDENTS as String = "NumDependents"
			public Const STR_FLD_EMPLOYEETYPECODE as String = "EmployeeTypeCode"
			public Const STR_FLD_CREATEDATE as String = "CreateDate"
			public Const STR_FLD_UPDATEDATE as String = "UpdateDate"
			public Const STR_FLD_CREATEUSER as String = "CreateUser"
			public Const STR_FLD_UPDATEUSER as String = "UpdateUser"
			public Const STR_FLD_SAMPLEGUIDFIELD as String = "SampleGuidField"
			public Const STR_FLD_ISACTIVE as String = "IsActive"
			public Const STR_FLD_SAMPLEBIGINT as String = "SampleBigInt"
			public Const STR_FLD_SAMPLESMALLINT as String = "SampleSmallInt"
			public Const STR_FLD_SAMPLENUMERICFIELDINT as String = "SampleNumericFieldInt"
			public Const STR_FLD_SAMPLENUMERICFIELD2DECIMALS as String = "SampleNumericField2Decimals"
			public Const STR_FLD_EMPLOYEETYPEDESCR as String = "EmployeeTypeDescr"
			public Const STR_FLD_RANKDESCR as String = "RankDescr"


		public Const FLD_EMPLOYEEID as Integer = 0
		public Const FLD_EMPLOYEENAME as Integer = 1
		public Const FLD_EMPLOYEERANKID as Integer = 2
		public Const FLD_SALARY as Integer = 3
		public Const FLD_ADDRESS as Integer = 4
		public Const FLD_TELEPHONE as Integer = 5
		public Const FLD_MOBILE as Integer = 6
		public Const FLD_IDNUMBER as Integer = 7
		public Const FLD_SSINUMBER as Integer = 8
		public Const FLD_HIREDATE as Integer = 9
		public Const FLD_NUMDEPENDENTS as Integer = 10
		public Const FLD_EMPLOYEETYPECODE as Integer = 11
		public Const FLD_CREATEDATE as Integer = 12
		public Const FLD_UPDATEDATE as Integer = 13
		public Const FLD_CREATEUSER as Integer = 14
		public Const FLD_UPDATEUSER as Integer = 15
		public Const FLD_SAMPLEGUIDFIELD as Integer = 16
		public Const FLD_ISACTIVE as Integer = 17
		public Const FLD_SAMPLEBIGINT as Integer = 18
		public Const FLD_SAMPLESMALLINT as Integer = 19
		public Const FLD_SAMPLENUMERICFIELDINT as Integer = 20
		public Const FLD_SAMPLENUMERICFIELD2DECIMALS as Integer = 21
		public Const FLD_EMPLOYEETYPEDESCR as Integer = 22
		public Const FLD_RANKDESCR as Integer = 23



        '''<summary>Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_EMPLOYEEID,STR_FLD_EMPLOYEENAME,STR_FLD_EMPLOYEERANKID,STR_FLD_SALARY,STR_FLD_ADDRESS,STR_FLD_TELEPHONE,STR_FLD_MOBILE,STR_FLD_IDNUMBER,STR_FLD_SSINUMBER,STR_FLD_HIREDATE,STR_FLD_NUMDEPENDENTS,STR_FLD_EMPLOYEETYPECODE,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_CREATEUSER,STR_FLD_UPDATEUSER,STR_FLD_SAMPLEGUIDFIELD,STR_FLD_ISACTIVE,STR_FLD_SAMPLEBIGINT,STR_FLD_SAMPLESMALLINT,STR_FLD_SAMPLENUMERICFIELDINT,STR_FLD_SAMPLENUMERICFIELD2DECIMALS,STR_FLD_EMPLOYEETYPEDESCR,STR_FLD_RANKDESCR}
        End Function
        
#END Region

#Region "Field Declarations"


	Private _EmployeeId as System.Int64
	Private _EmployeeName as System.String
	Private _EmployeeRankId as System.Int64? = Nothing
	Private _Salary as System.Decimal? = Nothing
	Private _Address as System.String
	Private _Telephone as System.String
	Private _Mobile as System.String
	Private _IdNumber as System.String
	Private _SSINumber as System.String
	Private _HireDate as System.DateTime? = Nothing
	Private _NumDependents as System.Int64? = Nothing
	Private _EmployeeTypeCode as System.String
	Private _CreateDate as System.DateTime? = Nothing
	Private _UpdateDate as System.DateTime? = Nothing
	Private _CreateUser as System.String
	Private _UpdateUser as System.String
	Private _SampleGuidField as System.Guid? = Nothing
	Private _IsActive as System.Boolean
	Private _SampleBigInt as System.Int64? = Nothing
	Private _SampleSmallInt as System.Int64? = Nothing
	Private _SampleNumericFieldInt as System.Int64? = Nothing
	Private _SampleNumericField2Decimals as System.Decimal? = Nothing
	Private _EmployeeTypeDescr as System.String
	Private _RankDescr as System.String

	' *****************************************
	' ****** CHILD OBJECTS ********************
	<DataMember(Name:="PrRank")>
	private _Rank as VbBusObjects.EmployeeRank = nothing '' initialize to nothing, for lazy load logic below !!!
	<DataMember(Name:="PrEmployeeInfo")>
	private _EmployeeInfo as VbBusObjects.EmployeeInfo = nothing '' initialize to nothing, for lazy load logic below !!!
	<DataMember(Name:="PrEmployeeProjects")>
	private _EmployeeProjects as List(Of VbBusObjects.EmployeeProject) = nothing '' initialize to nothing, for lazy load logic below !!!
	<DataMember(Name:="PrDeletedEmployeeProjects")>
	private _deletedEmployeeProjects as List(Of VbBusObjects.EmployeeProject) = new List(Of VbBusObjects.EmployeeProject)''''' initialize to empty list!!

	' *****************************************
	' ****** END CHILD OBJECTS ********************


#end Region

#Region "Field Properties"

	<Column(Name:="EmployeeId",Storage:="_EmployeeId", IsPrimaryKey:=True,DbType:="int NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property PrEmployeeId as System.Int64
	Get 
		return _EmployeeId
	End Get 
	Set(ByVal value As System.Int64)
		if ModelObject.valueChanged(_EmployeeId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEEID)
			End If
			me._EmployeeId = value

			me.raiseBroadcastIdChange()

		End if
	End Set 
	End Property 
	<Column(Name:="EmployeeName",Storage:="_EmployeeName", IsPrimaryKey:=False,DbType:="nvarchar NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property PrEmployeeName as System.String
	Get 
		return _EmployeeName
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_EmployeeName, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("EmployeeName")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEENAME)
			End If
			me._EmployeeName = value

		End if
	End Set 
	End Property 
	<Column(Name:="EmployeeRankId",Storage:="_EmployeeRankId", IsPrimaryKey:=False,DbType:="int NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property PrEmployeeRankId as System.Int64?
	Get 
		return _EmployeeRankId
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_EmployeeRankId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEERANKID)
						me._Rank= nothing ' reset if id of parent object has changed
						me.RankLoaded= false
			End If
			me._EmployeeRankId = value

		End if
	End Set 
	End Property 
	<Column(Name:="Salary",Storage:="_Salary", IsPrimaryKey:=False,DbType:="decimal",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSalary as System.Decimal?
	Get 
		return _Salary
	End Get 
	Set(ByVal value As System.Decimal?)
		if ModelObject.valueChanged(_Salary, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SALARY)
			End If
			me._Salary = value

		End if
	End Set 
	End Property 
	<Column(Name:="Address",Storage:="_Address", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrAddress as System.String
	Get 
		return _Address
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_Address, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("Address")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ADDRESS)
			End If
			me._Address = value

		End if
	End Set 
	End Property 
	<Column(Name:="Telephone",Storage:="_Telephone", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrTelephone as System.String
	Get 
		return _Telephone
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_Telephone, value) then
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Telephone")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_TELEPHONE)
			End If
			me._Telephone = value

		End if
	End Set 
	End Property 
	<Column(Name:="Mobile",Storage:="_Mobile", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrMobile as System.String
	Get 
		return _Mobile
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_Mobile, value) then
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Mobile")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_MOBILE)
			End If
			me._Mobile = value

		End if
	End Set 
	End Property 
	<Column(Name:="IdNumber",Storage:="_IdNumber", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrIdNumber as System.String
	Get 
		return _IdNumber
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_IdNumber, value) then
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("IdNumber")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_IDNUMBER)
			End If
			me._IdNumber = value

		End if
	End Set 
	End Property 
	<Column(Name:="SSINumber",Storage:="_SSINumber", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSSINumber as System.String
	Get 
		return _SSINumber
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_SSINumber, value) then
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("SSINumber")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SSINUMBER)
			End If
			me._SSINumber = value

		End if
	End Set 
	End Property 
	<Column(Name:="HireDate",Storage:="_HireDate", IsPrimaryKey:=False,DbType:="date",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrHireDate as System.DateTime?
	Get 
		return _HireDate
	End Get 
	Set(ByVal value As System.DateTime?)
		if ModelObject.valueChanged(_HireDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_HIREDATE)
			End If
			me._HireDate = value

		End if
	End Set 
	End Property 
	<Column(Name:="NumDependents",Storage:="_NumDependents", IsPrimaryKey:=False,DbType:="int",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrNumDependents as System.Int64?
	Get 
		return _NumDependents
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_NumDependents, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_NUMDEPENDENTS)
			End If
			me._NumDependents = value

		End if
	End Set 
	End Property 
	<Column(Name:="EmployeeTypeCode",Storage:="_EmployeeTypeCode", IsPrimaryKey:=False,DbType:="varchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrEmployeeTypeCode as System.String
	Get 
		return _EmployeeTypeCode
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_EmployeeTypeCode, value) then
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("EmployeeTypeCode")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEETYPECODE)
			End If
			me._EmployeeTypeCode = value

		End if
	End Set 
	End Property 
	<Column(Name:="createDate",Storage:="_CreateDate", IsPrimaryKey:=False,DbType:="datetime",CanBeNull:=True )> _
<DataMember>	 Overridable Property CreateDate as System.DateTime? _ 
		Implements IAuditable.CreateDate
	Get 
		return _CreateDate
	End Get 
	Set(ByVal value As System.DateTime?)
		if ModelObject.valueChanged(_CreateDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEDATE)
			End If
			me._CreateDate = value

		End if
	End Set 
	End Property 
	<Column(Name:="updateDate",Storage:="_UpdateDate", IsPrimaryKey:=False,DbType:="datetime",CanBeNull:=True )> _
<DataMember>	 Overridable Property UpdateDate as System.DateTime? _ 
		Implements IAuditable.UpdateDate
	Get 
		return _UpdateDate
	End Get 
	Set(ByVal value As System.DateTime?)
		if ModelObject.valueChanged(_UpdateDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEDATE)
			End If
			me._UpdateDate = value

		End if
	End Set 
	End Property 
	<Column(Name:="createUser",Storage:="_CreateUser", IsPrimaryKey:=False,DbType:="varchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property CreateUser as System.String _ 
		Implements IAuditable.CreateUser
	Get 
		return _CreateUser
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_CreateUser, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("createUser")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEUSER)
			End If
			me._CreateUser = value

		End if
	End Set 
	End Property 
	<Column(Name:="updateUser",Storage:="_UpdateUser", IsPrimaryKey:=False,DbType:="varchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property UpdateUser as System.String _ 
		Implements IAuditable.UpdateUser
	Get 
		return _UpdateUser
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_UpdateUser, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("updateUser")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEUSER)
			End If
			me._UpdateUser = value

		End if
	End Set 
	End Property 
	<Column(Name:="sampleGuidField",Storage:="_SampleGuidField", IsPrimaryKey:=False,DbType:="uniqueidentifier",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSampleGuidField as System.Guid?
	Get 
		return _SampleGuidField
	End Get 
	Set(ByVal value As System.Guid?)
		if ModelObject.valueChanged(_SampleGuidField, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLEGUIDFIELD)
			End If
			me._SampleGuidField = value

		End if
	End Set 
	End Property 
	<Column(Name:="isActive",Storage:="_IsActive", IsPrimaryKey:=False,DbType:="bit",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrIsActive as System.Boolean
	Get 
		return _IsActive
	End Get 
	Set(ByVal value As System.Boolean)
		if ModelObject.valueChanged(_IsActive, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ISACTIVE)
			End If
			me._IsActive = value

		End if
	End Set 
	End Property 
	<Column(Name:="sampleBigInt",Storage:="_SampleBigInt", IsPrimaryKey:=False,DbType:="bigint",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSampleBigInt as System.Int64?
	Get 
		return _SampleBigInt
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_SampleBigInt, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLEBIGINT)
			End If
			me._SampleBigInt = value

		End if
	End Set 
	End Property 
	<Column(Name:="sampleSmallInt",Storage:="_SampleSmallInt", IsPrimaryKey:=False,DbType:="smallint",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSampleSmallInt as System.Int64?
	Get 
		return _SampleSmallInt
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_SampleSmallInt, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLESMALLINT)
			End If
			me._SampleSmallInt = value

		End if
	End Set 
	End Property 
	<Column(Name:="sampleNumericFieldInt",Storage:="_SampleNumericFieldInt", IsPrimaryKey:=False,DbType:="decimal",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSampleNumericFieldInt as System.Int64?
	Get 
		return _SampleNumericFieldInt
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_SampleNumericFieldInt, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLENUMERICFIELDINT)
			End If
			me._SampleNumericFieldInt = value

		End if
	End Set 
	End Property 
	<Column(Name:="sampleNumericField2Decimals",Storage:="_SampleNumericField2Decimals", IsPrimaryKey:=False,DbType:="decimal",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSampleNumericField2Decimals as System.Decimal?
	Get 
		return _SampleNumericField2Decimals
	End Get 
	Set(ByVal value As System.Decimal?)
		if ModelObject.valueChanged(_SampleNumericField2Decimals, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLENUMERICFIELD2DECIMALS)
			End If
			me._SampleNumericField2Decimals = value

		End if
	End Set 
	End Property 
	<Column(Name:="EmployeeTypeDescr",Storage:="_EmployeeTypeDescr", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrEmployeeTypeDescr as System.String
	Get 
		return _EmployeeTypeDescr
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_EmployeeTypeDescr, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("EmployeeTypeDescr")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEETYPEDESCR)
			End If
			me._EmployeeTypeDescr = value

		End if
	End Set 
	End Property 
	<Column(Name:="RankDescr",Storage:="_RankDescr", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrRankDescr as System.String
	Get 
		return _RankDescr
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_RankDescr, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("RankDescr")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_RANKDESCR)
			End If
			me._RankDescr = value

		End if
	End Set 
	End Property 
		#end region
		#region "Associations"
		
		'associationParent.txt
		#Region "Association Rank"

		<DataMember>
		friend RankLoaded as Boolean

		''' <summary>
        ''' Gets/Sets parent object PrRank
        ''' </summary>
		Public Overridable Property PrRank() As VbBusObjects.EmployeeRank 

		    '1-1 parent association
            Set(ByVal value As VbBusObjects.EmployeeRank)
                If value isnot Nothing then
					'' note: do not set property, but the field!!
					me._EmployeeRankId = value.PrRankId
					AddHandler value.IDChanged, AddressOf Me.handleParentIdChanged
                Else
					me._EmployeeRankId = Nothing
				End If
				Me._Rank = value
            End Set


            Get
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._Rank Is Nothing Then
					Me.LoadPrRank
                End If 
				
                Return Me._Rank
            End Get
        End Property
        
        ''' <summary>
        ''' Loads parent object and sets the appropriate properties
        ''' </summary>x
        private Sub LoadPrRank
			
			If me.RankLoaded then return
			
			'check if object is not loaded
			If Me._Rank Is Nothing AndAlso _
                   Me.PrEmployeeRankId IsNot Nothing Then
                
				'call the setter here, not the private variable!
                Me.PrRank = new VbBusObjects.DBMappers.EmployeeRankDBMapper().FindByKey( _ 
				                 Me.PrEmployeeRankId.Value)
                
            End If

            me.RankLoaded=true
			            
        End Sub

		#End Region

        
		'associationChildOne.txt

		<DataMember>
        friend EmployeeInfoLoaded as Boolean
		
		Public Overridable Property PrEmployeeInfo() As VbBusObjects.EmployeeInfo 

			'1-1 child association
            Set(ByVal value As VbBusObjects.EmployeeInfo)
                Me._EmployeeInfo = value
				If  Me._EmployeeInfo isnot Nothing then
					Me._EmployeeInfo.PrEIEmployeeId = me.PrEmployeeId
					AddHandler Me.IDChanged, AddressOf value.handleParentIdChanged
				
				End If     
            End Set


            Get
			    'LAZY LOADING! Only hit the database to get the child object if we need it
                If not  Me.EmployeeInfoLoaded Then
					Call Me.LoadPrEmployeeInfo
                End If 
								
                Return Me._EmployeeInfo
                
            End Get
        End Property
        
        ''' <summary>
        ''' Loads child object from dabatabase, if not loaded already
        ''' </summary>
        private Sub LoadPrEmployeeInfo
						
			If Me.EmployeeInfoLoaded then return

			If Me._EmployeeInfo Is Nothing Then

				'IMPORTANT:call setter here, not the private variable
				Me.PrEmployeeInfo = _ 
					new VbBusObjects.DBMappers.EmployeeInfoDBMapper().findWhere("EIEmployeeId=?", Me.PrEmployeeId)
				
				
			End If 

			'set the loaded flag here
			me.EmployeeInfoLoaded = true
            
        End Sub

		

		
		#Region "Association EmployeeProjects"
		'associationChildMany.txt
		<DataMember>
		Friend EmployeeProjectsLoaded as Boolean

		Public Overridable Function PrEmployeeProjectGetAt(ByVal i As Integer) As VbBusObjects.EmployeeProject

            me.LoadPrEmployeeProjects
            If Me._EmployeeProjects.Count >= (i - 1) Then
                Return Me._EmployeeProjects.Item(i)
            End If
            Return Nothing

        End Function        

		Public Overridable Function PrEmployeeProjectAdd()  as VbBusObjects.EmployeeProject
			return  me.PrEmployeeProjectAdd(VbBusObjects.EmployeeProjectFactory.Create())
		End Function
		
		Public Overridable Function PrEmployeeProjectAdd(val As VbBusObjects.EmployeeProject)  as VbBusObjects.EmployeeProject

			'1-Many , add a single item!
			me.LoadPrEmployeeProjects
			If (val Is Nothing) Then
                val = VbBusObjects.EmployeeProjectFactory.Create()
            End If
			val.PrEPEmployeeId = me.PrEmployeeId
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			me._EmployeeProjects.add(val)
			return val

        End Function

		 Public Overridable Sub PrEmployeeProjectsClear()

            Me.LoadPrEmployeeProjects
            Me._deletedEmployeeProjects.AddRange(Me._EmployeeProjects)
            Me._EmployeeProjects.Clear()

        End Sub

		Public Overridable Sub EmployeeProjectRemove(val As VbBusObjects.EmployeeProject) 
			
			me.LoadPrEmployeeProjects
			me._deletedEmployeeProjects.add(val)
			me._EmployeeProjects.remove(val)

        End Sub

		
		Public Overridable Function PrEmployeeProjectsGetDeleted() As IEnumerable(Of VbBusObjects.EmployeeProject)  
			
			return me._deletedEmployeeProjects

        End Function

        Public Overridable Property PrEmployeeProjects() As IEnumerable(Of VbBusObjects.EmployeeProject) 

            Get
				'1 to many relation
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._EmployeeProjects Is Nothing Then
                    me.LoadPrEmployeeProjects
                End If ' me._EmployeeProjects is Nothing
				
                Return Me._EmployeeProjects
            End Get
            
			Set(value as IEnumerable(Of VbBusObjects.EmployeeProject))
				if value is nothing then
					Me._EmployeeProjects = nothing
                Else
                    Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)
                    Me.addToEmployeeProjectsList(value)
                End If
			End Set

        End Property

		''' <summary>
        ''' Private method to add to the EmployeeProjects List. 
		''' The list must have aldready been initialized
        ''' </summary>
		Private Sub addToEmployeeProjectsList(ByVal value As IEnumerable(Of VbBusObjects.EmployeeProject))

			Dim enumtor As IEnumerator(Of VbBusObjects.EmployeeProject) = value.GetEnumerator
        
		    While enumtor.MoveNext
                Dim v As VbBusObjects.EmployeeProject = enumtor.Current
                AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
                Me._EmployeeProjects.Add(v)
            End While

        End Sub
        
        ''' <summary>
        ''' Loads child objects from dabatabase, if not loaded already
        ''' </summary>
        private Sub LoadPrEmployeeProjects
			
			if me.EmployeeProjectsLoaded then return
			'init list
			Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)

			If Not Me.isNew Then
                
                Me.addToEmployeeProjectsList( new VbBusObjects.DBMappers.EmployeeProjectDBMapper().findList( _ 
									"EPEmployeeId=?", Me.PrEmployeeId))
            End If
            
			me.EmployeeProjectsLoaded = true
        End Sub
		#End Region


#End Region

#Region "Getters/Setters of values by field index / name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		

		select case fieldKey
		case FLD_EMPLOYEEID
			return me.PrEmployeeId
		case FLD_EMPLOYEENAME
			return me.PrEmployeeName
		case FLD_EMPLOYEERANKID
			return me.PrEmployeeRankId
		case FLD_SALARY
			return me.PrSalary
		case FLD_ADDRESS
			return me.PrAddress
		case FLD_TELEPHONE
			return me.PrTelephone
		case FLD_MOBILE
			return me.PrMobile
		case FLD_IDNUMBER
			return me.PrIdNumber
		case FLD_SSINUMBER
			return me.PrSSINumber
		case FLD_HIREDATE
			return me.PrHireDate
		case FLD_NUMDEPENDENTS
			return me.PrNumDependents
		case FLD_EMPLOYEETYPECODE
			return me.PrEmployeeTypeCode
		case FLD_CREATEDATE
			return me.CreateDate
		case FLD_UPDATEDATE
			return me.UpdateDate
		case FLD_CREATEUSER
			return me.CreateUser
		case FLD_UPDATEUSER
			return me.UpdateUser
		case FLD_SAMPLEGUIDFIELD
			return me.PrSampleGuidField
		case FLD_ISACTIVE
			return me.PrIsActive
		case FLD_SAMPLEBIGINT
			return me.PrSampleBigInt
		case FLD_SAMPLESMALLINT
			return me.PrSampleSmallInt
		case FLD_SAMPLENUMERICFIELDINT
			return me.PrSampleNumericFieldInt
		case FLD_SAMPLENUMERICFIELD2DECIMALS
			return me.PrSampleNumericField2Decimals
		case FLD_EMPLOYEETYPEDESCR
			return me.PrEmployeeTypeDescr
		case FLD_RANKDESCR
			return me.PrRankDescr
		case else
			return nothing
		end select


    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower

		if fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			return me.PrEmployeeId
		else if fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			return me.PrEmployeeName
		else if fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			return me.PrEmployeeRankId
		else if fieldKey=STR_FLD_SALARY.ToLower() Then
			return me.PrSalary
		else if fieldKey=STR_FLD_ADDRESS.ToLower() Then
			return me.PrAddress
		else if fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			return me.PrTelephone
		else if fieldKey=STR_FLD_MOBILE.ToLower() Then
			return me.PrMobile
		else if fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			return me.PrIdNumber
		else if fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			return me.PrSSINumber
		else if fieldKey=STR_FLD_HIREDATE.ToLower() Then
			return me.PrHireDate
		else if fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			return me.PrNumDependents
		else if fieldKey=STR_FLD_EMPLOYEETYPECODE.ToLower() Then
			return me.PrEmployeeTypeCode
		else if fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			return me.CreateDate
		else if fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			return me.UpdateDate
		else if fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			return me.CreateUser
		else if fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			return me.UpdateUser
		else if fieldKey=STR_FLD_SAMPLEGUIDFIELD.ToLower() Then
			return me.PrSampleGuidField
		else if fieldKey=STR_FLD_ISACTIVE.ToLower() Then
			return me.PrIsActive
		else if fieldKey=STR_FLD_SAMPLEBIGINT.ToLower() Then
			return me.PrSampleBigInt
		else if fieldKey=STR_FLD_SAMPLESMALLINT.ToLower() Then
			return me.PrSampleSmallInt
		else if fieldKey=STR_FLD_SAMPLENUMERICFIELDINT.ToLower() Then
			return me.PrSampleNumericFieldInt
		else if fieldKey=STR_FLD_SAMPLENUMERICFIELD2DECIMALS.ToLower() Then
			return me.PrSampleNumericField2Decimals
		else if fieldKey=STR_FLD_EMPLOYEETYPEDESCR.ToLower() Then
			return me.PrEmployeeTypeDescr
		else if fieldKey=STR_FLD_RANKDESCR.ToLower() Then
			return me.PrRankDescr
		else
			return nothing
		end If
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		Try
		Select Case fieldKey
		case FLD_EMPLOYEEID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeId = Nothing
			Else
				Me.PrEmployeeId=CType(val,System.Int64)
			End If
			return
		case FLD_EMPLOYEENAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeName = Nothing
			Else
				Me.PrEmployeeName=CType(val,System.String)
			End If
			return
		case FLD_EMPLOYEERANKID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeRankId = Nothing
			Else
				Me.PrEmployeeRankId=CType(val,System.Int64?)
			End If
			return
		case FLD_SALARY
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSalary = Nothing
			Else
				Me.PrSalary=CType(val,System.Decimal?)
			End If
			return
		case FLD_ADDRESS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAddress = Nothing
			Else
				Me.PrAddress=CType(val,System.String)
			End If
			return
		case FLD_TELEPHONE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrTelephone = Nothing
			Else
				Me.PrTelephone=CType(val,System.String)
			End If
			return
		case FLD_MOBILE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrMobile = Nothing
			Else
				Me.PrMobile=CType(val,System.String)
			End If
			return
		case FLD_IDNUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIdNumber = Nothing
			Else
				Me.PrIdNumber=CType(val,System.String)
			End If
			return
		case FLD_SSINUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSSINumber = Nothing
			Else
				Me.PrSSINumber=CType(val,System.String)
			End If
			return
		case FLD_HIREDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrHireDate = Nothing
			Else
				Me.PrHireDate=CType(val,System.DateTime?)
			End If
			return
		case FLD_NUMDEPENDENTS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrNumDependents = Nothing
			Else
				Me.PrNumDependents=CType(val,System.Int64?)
			End If
			return
		case FLD_EMPLOYEETYPECODE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeCode = Nothing
			Else
				Me.PrEmployeeTypeCode=CType(val,System.String)
			End If
			return
		case FLD_CREATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=CType(val,System.DateTime?)
			End If
			return
		case FLD_UPDATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=CType(val,System.DateTime?)
			End If
			return
		case FLD_CREATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=CType(val,System.String)
			End If
			return
		case FLD_UPDATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=CType(val,System.String)
			End If
			return
		case FLD_SAMPLEGUIDFIELD
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleGuidField = Nothing
			Else
				Me.PrSampleGuidField=CType(val,System.Guid?)
			End If
			return
		case FLD_ISACTIVE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIsActive = False
			Else
				Me.PrIsActive=CType(val,System.Boolean)
			End If
			return
		case FLD_SAMPLEBIGINT
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleBigInt = Nothing
			Else
				Me.PrSampleBigInt=CType(val,System.Int64?)
			End If
			return
		case FLD_SAMPLESMALLINT
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleSmallInt = Nothing
			Else
				Me.PrSampleSmallInt=CType(val,System.Int64?)
			End If
			return
		case FLD_SAMPLENUMERICFIELDINT
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleNumericFieldInt = Nothing
			Else
				Me.PrSampleNumericFieldInt=CType(val,System.Int64?)
			End If
			return
		case FLD_SAMPLENUMERICFIELD2DECIMALS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleNumericField2Decimals = Nothing
			Else
				Me.PrSampleNumericField2Decimals=CType(val,System.Decimal?)
			End If
			return
		case FLD_EMPLOYEETYPEDESCR
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeDescr = Nothing
			Else
				Me.PrEmployeeTypeDescr=CType(val,System.String)
			End If
			return
		case FLD_RANKDESCR
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrRankDescr = Nothing
			Else
				Me.PrRankDescr=CType(val,System.String)
			End If
			return
		case else
			return
		end select

		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try
    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		Try
		if  fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeId = Nothing
			Else
				Me.PrEmployeeId=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeName = Nothing
			Else
				Me.PrEmployeeName=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeRankId = Nothing
			Else
				Me.PrEmployeeRankId=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_SALARY.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSalary = Nothing
			Else
				Me.PrSalary=Convert.ToDecimal(val)
			End If
			return
		else if  fieldKey=STR_FLD_ADDRESS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAddress = Nothing
			Else
				Me.PrAddress=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrTelephone = Nothing
			Else
				Me.PrTelephone=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_MOBILE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrMobile = Nothing
			Else
				Me.PrMobile=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIdNumber = Nothing
			Else
				Me.PrIdNumber=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSSINumber = Nothing
			Else
				Me.PrSSINumber=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_HIREDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrHireDate = Nothing
			Else
				Me.PrHireDate=Convert.ToDateTime(val)
			End If
			return
		else if  fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrNumDependents = Nothing
			Else
				Me.PrNumDependents=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEETYPECODE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeCode = Nothing
			Else
				Me.PrEmployeeTypeCode=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=Convert.ToDateTime(val)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=Convert.ToDateTime(val)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLEGUIDFIELD.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleGuidField = Nothing
			Else
				Me.PrSampleGuidField=CType(val,System.Guid?)
			End If
			return
		else if  fieldKey=STR_FLD_ISACTIVE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIsActive = False
			Else
				Me.PrIsActive=Convert.ToBoolean(val)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLEBIGINT.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleBigInt = Nothing
			Else
				Me.PrSampleBigInt=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLESMALLINT.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleSmallInt = Nothing
			Else
				Me.PrSampleSmallInt=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLENUMERICFIELDINT.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleNumericFieldInt = Nothing
			Else
				Me.PrSampleNumericFieldInt=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLENUMERICFIELD2DECIMALS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleNumericField2Decimals = Nothing
			Else
				Me.PrSampleNumericField2Decimals=Convert.ToDecimal(val)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEETYPEDESCR.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeDescr = Nothing
			Else
				Me.PrEmployeeTypeDescr=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_RANKDESCR.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrRankDescr = Nothing
			Else
				Me.PrRankDescr=Convert.ToString(val)
			End If
			return
		end If
		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try

    End Sub

#End Region
#Region "Overrides of GetHashCode, Equals "
	Public Overloads Function Equals(ByVal other As Employee) As Boolean _     
		Implements System.IEquatable(Of Employee).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return me.PrEmployeeId= other.PrEmployeeId _
				AndAlso me.PrEmployeeName= other.PrEmployeeName _
				AndAlso me.PrEmployeeRankId.GetValueOrDefault = other.PrEmployeeRankId.GetValueOrDefault _
				AndAlso me.PrSalary.GetValueOrDefault = other.PrSalary.GetValueOrDefault _
				AndAlso me.PrAddress= other.PrAddress _
				AndAlso me.PrTelephone= other.PrTelephone _
				AndAlso me.PrMobile= other.PrMobile _
				AndAlso me.PrIdNumber= other.PrIdNumber _
				AndAlso me.PrSSINumber= other.PrSSINumber _
				AndAlso me.PrHireDate.GetValueOrDefault = other.PrHireDate.GetValueOrDefault _
				AndAlso me.PrNumDependents.GetValueOrDefault = other.PrNumDependents.GetValueOrDefault _
				AndAlso me.PrEmployeeTypeCode= other.PrEmployeeTypeCode _
				AndAlso me.CreateDate.GetValueOrDefault = other.CreateDate.GetValueOrDefault _
				AndAlso me.UpdateDate.GetValueOrDefault = other.UpdateDate.GetValueOrDefault _
				AndAlso me.CreateUser= other.CreateUser _
				AndAlso me.UpdateUser= other.UpdateUser _
				AndAlso me.PrSampleGuidField.GetValueOrDefault = other.PrSampleGuidField.GetValueOrDefault _
				AndAlso me.PrIsActive= other.PrIsActive _
				AndAlso me.PrSampleBigInt.GetValueOrDefault = other.PrSampleBigInt.GetValueOrDefault _
				AndAlso me.PrSampleSmallInt.GetValueOrDefault = other.PrSampleSmallInt.GetValueOrDefault _
				AndAlso me.PrSampleNumericFieldInt.GetValueOrDefault = other.PrSampleNumericFieldInt.GetValueOrDefault _
				AndAlso me.PrSampleNumericField2Decimals.GetValueOrDefault = other.PrSampleNumericField2Decimals.GetValueOrDefault _
				AndAlso me.PrEmployeeTypeDescr= other.PrEmployeeTypeDescr _
				AndAlso me.PrRankDescr= other.PrRankDescr
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return me.PrEmployeeId.GetHashCode _
				Xor me.getStringHashCode(Me.PrEmployeeName) _
				Xor me.PrEmployeeRankId.GetHashCode _
				Xor me.PrSalary.GetHashCode _
				Xor me.getStringHashCode(Me.PrAddress) _
				Xor me.getStringHashCode(Me.PrTelephone) _
				Xor me.getStringHashCode(Me.PrMobile) _
				Xor me.getStringHashCode(Me.PrIdNumber) _
				Xor me.getStringHashCode(Me.PrSSINumber) _
				Xor me.PrHireDate.GetHashCode _
				Xor me.PrNumDependents.GetHashCode _
				Xor me.getStringHashCode(Me.PrEmployeeTypeCode) _
				Xor me.CreateDate.GetHashCode _
				Xor me.UpdateDate.GetHashCode _
				Xor me.getStringHashCode(Me.CreateUser) _
				Xor me.getStringHashCode(Me.UpdateUser) _
				Xor me.PrSampleGuidField.GetHashCode _
				Xor me.PrIsActive.GetHashCode _
				Xor me.PrSampleBigInt.GetHashCode _
				Xor me.PrSampleSmallInt.GetHashCode _
				Xor me.PrSampleNumericFieldInt.GetHashCode _
				Xor me.PrSampleNumericField2Decimals.GetHashCode _
				Xor me.getStringHashCode(Me.PrEmployeeTypeDescr) _
				Xor me.getStringHashCode(Me.PrRankDescr) 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, Employee)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As Employee, ByVal obj2 As Employee) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As Employee, ByVal obj2 As Employee) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a shallow copy
        Dim ret as Employee =  new Employee()
		ret.PrEmployeeId = me.PrEmployeeId
		ret.PrEmployeeName = me.PrEmployeeName
		ret.PrEmployeeRankId = me.PrEmployeeRankId
		ret.PrSalary = me.PrSalary
		ret.PrAddress = me.PrAddress
		ret.PrTelephone = me.PrTelephone
		ret.PrMobile = me.PrMobile
		ret.PrIdNumber = me.PrIdNumber
		ret.PrSSINumber = me.PrSSINumber
		ret.PrHireDate = me.PrHireDate
		ret.PrNumDependents = me.PrNumDependents
		ret.PrEmployeeTypeCode = me.PrEmployeeTypeCode
		ret.CreateDate = me.CreateDate
		ret.UpdateDate = me.UpdateDate
		ret.CreateUser = me.CreateUser
		ret.UpdateUser = me.UpdateUser
		ret.PrSampleGuidField = me.PrSampleGuidField
		ret.PrIsActive = me.PrIsActive
		ret.PrSampleBigInt = me.PrSampleBigInt
		ret.PrSampleSmallInt = me.PrSampleSmallInt
		ret.PrSampleNumericFieldInt = me.PrSampleNumericFieldInt
		ret.PrSampleNumericField2Decimals = me.PrSampleNumericField2Decimals
		ret.PrEmployeeTypeDescr = me.PrEmployeeTypeDescr
		ret.PrRankDescr = me.PrRankDescr
		
		return ret
		
	End Function

	Public Function CompareTo(ByVal other As Employee) As Integer _
		 Implements System.IComparable(Of Employee).CompareTo

		Return  Me.PrEmployeeName.CompareTo(other.PrEmployeeName)
	End Function
	
#End Region

#Region "parentIdChanged"
	'below sub is called when parentIdChanged
	public Overrides Sub handleParentIdChanged(parentMo as Object, e as IDChangedEventArgs)
		' Assocations from VbBusObjects.EmployeeRank
		if (typeof parentMo is VbBusObjects.EmployeeRank) Then
			me.PrEmployeeRankId= DirectCast(parentMo, VbBusObjects.EmployeeRank).PrRankId
		End If
	End Sub
#End Region


#Region "ID Property"
	
    <DataMember>Public NotOverridable Overrides Property Id() As object
        Get
            return me._EmployeeId
        End Get
        Set(ByVal value As object)
             me._EmployeeId = Clng(value)
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	
#End Region
	
	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
    Public Class EmployeeRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As Employee = CType(imo, Employee)
			if String.isNullOrEmpty( mo.PrEmployeeName) Then
		Throw new ModelObjectRequiredFieldException("EmployeeName")
End if 
if mo.PrEmployeeRankId is Nothing then
		Throw new ModelObjectRequiredFieldException("EmployeeRankId")
End if 

			
        End Sub

    End Class
#End Region

End Namespace

