
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on 12-May-15 9:44:10 AM by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class Employee
'
'************************************************************
'</comments>
Namespace VbBusObjects

#Region "Interface"
<System.Runtime.InteropServices.ComVisible(False)> _
	Public Interface IEmployee: Inherits IModelObject
	Property PrEmployeeId as System.Int64
	Property PrEmployeeName as System.String
	Property PrEmployeeRankId as Nullable (of System.Int64)
	Property PrSalary as Nullable (of System.Decimal)
	Property PrAddress as System.String
	Property PrTelephone as System.String
	Property PrMobile as System.String
	Property PrIdNumber as System.String
	Property PrSSINumber as System.String
	Property PrHireDate as Nullable (of System.DateTime)
	Property PrNumDependents as Nullable (of System.Int64)
	Property PrEmployeeTypeCode as System.String
	Property CreateDate as Nullable (of System.DateTime)
	Property UpdateDate as Nullable (of System.DateTime)
	Property CreateUser as System.String
	Property UpdateUser as System.String
	Property PrSampleGuidField as Nullable (of System.Guid)
	Property PrRank as VbBusObjects.EmployeeRank
	Property PrEmployeeInfo as VbBusObjects.EmployeeInfo
	Property PrEmployeeProjects as IEnumerable(Of VbBusObjects.EmployeeProject)
		Sub PrEmployeeProjectAdd(val as VbBusObjects.EmployeeProject)
		Sub PrEmployeeProjectRemove(val as VbBusObjects.EmployeeProject)
		Function PrEmployeeProjectsGetDeleted() as IEnumerable(Of VbBusObjects.EmployeeProject)
		Function PrEmployeeProjectGetAt( i as Integer )  as VbBusObjects.EmployeeProject

End Interface
#End region 

	<DefaultMapperAttr(GetType(EmployeeDBMapper)), _
	 ComVisible(False),Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
	Public class EmployeeBase
		Inherits ModelObject
		Implements IEquatable(Of EmployeeBase),
		IAuditable,System.IComparable(Of Employee),IEmployee 

#Region "Constructor"
    
    public sub New()
		Me.addValidator(New EmployeeRequiredFieldsValidator)
    End Sub

#End Region

#Region "Children and Parents"
	
	public Overrides sub loadObjectHierarchy()
				loadRank()
		loadEmployeeInfo()
		loadEmployeeProjects()

	End Sub

	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
			if  Me._EmployeeInfo isNot Nothing then
		ret.Add(me.PrEmployeeInfo)
	End If
	if  Me._EmployeeProjectsLoaded Then ' check if loaded first!
		Dim lp As List(Of ModelObject) = Me._EmployeeProjects.ConvertAll( _
				New Converter(Of VbBusObjects.EmployeeProject, ModelObject)(
			Function(pf As VbBusObjects.EmployeeProject)
				Return DirectCast(pf, ModelObject)
			End Function))
		ret.AddRange(lp)
	End If

		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		if  Me._Rank isNot Nothing AndAlso Me._RankLoaded Then
	ret.Add(me.PrRank)
End If

		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

			public Const STR_FLD_EMPLOYEEID as String = "EmployeeId"
			public Const STR_FLD_EMPLOYEENAME as String = "EmployeeName"
			public Const STR_FLD_EMPLOYEERANKID as String = "EmployeeRankId"
			public Const STR_FLD_SALARY as String = "Salary"
			public Const STR_FLD_ADDRESS as String = "Address"
			public Const STR_FLD_TELEPHONE as String = "Telephone"
			public Const STR_FLD_MOBILE as String = "Mobile"
			public Const STR_FLD_IDNUMBER as String = "IdNumber"
			public Const STR_FLD_SSINUMBER as String = "SSINumber"
			public Const STR_FLD_HIREDATE as String = "HireDate"
			public Const STR_FLD_NUMDEPENDENTS as String = "NumDependents"
			public Const STR_FLD_EMPLOYEETYPECODE as String = "EmployeeTypeCode"
			public Const STR_FLD_CREATEDATE as String = "CreateDate"
			public Const STR_FLD_UPDATEDATE as String = "UpdateDate"
			public Const STR_FLD_CREATEUSER as String = "CreateUser"
			public Const STR_FLD_UPDATEUSER as String = "UpdateUser"
			public Const STR_FLD_SAMPLEGUIDFIELD as String = "SampleGuidField"


		public Const FLD_EMPLOYEEID as Integer = 0
		public Const FLD_EMPLOYEENAME as Integer = 1
		public Const FLD_EMPLOYEERANKID as Integer = 2
		public Const FLD_SALARY as Integer = 3
		public Const FLD_ADDRESS as Integer = 4
		public Const FLD_TELEPHONE as Integer = 5
		public Const FLD_MOBILE as Integer = 6
		public Const FLD_IDNUMBER as Integer = 7
		public Const FLD_SSINUMBER as Integer = 8
		public Const FLD_HIREDATE as Integer = 9
		public Const FLD_NUMDEPENDENTS as Integer = 10
		public Const FLD_EMPLOYEETYPECODE as Integer = 11
		public Const FLD_CREATEDATE as Integer = 12
		public Const FLD_UPDATEDATE as Integer = 13
		public Const FLD_CREATEUSER as Integer = 14
		public Const FLD_UPDATEUSER as Integer = 15
		public Const FLD_SAMPLEGUIDFIELD as Integer = 16



        '''<summary> Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_EMPLOYEEID,STR_FLD_EMPLOYEENAME,STR_FLD_EMPLOYEERANKID,STR_FLD_SALARY,STR_FLD_ADDRESS,STR_FLD_TELEPHONE,STR_FLD_MOBILE,STR_FLD_IDNUMBER,STR_FLD_SSINUMBER,STR_FLD_HIREDATE,STR_FLD_NUMDEPENDENTS,STR_FLD_EMPLOYEETYPECODE,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_CREATEUSER,STR_FLD_UPDATEUSER,STR_FLD_SAMPLEGUIDFIELD}
        End Function
        
#END Region

#Region "Field Declarations"


	Private _EmployeeId as System.Int64
	Private _EmployeeName as System.String = Nothing
	Private _EmployeeRankId as Nullable (of System.Int64) = Nothing
	Private _Salary as Nullable (of System.Decimal) = Nothing
	Private _Address as System.String = Nothing
	Private _Telephone as System.String = Nothing
	Private _Mobile as System.String = Nothing
	Private _IdNumber as System.String = Nothing
	Private _SSINumber as System.String = Nothing
	Private _HireDate as Nullable (of System.DateTime) = Nothing
	Private _NumDependents as Nullable (of System.Int64) = Nothing
	Private _EmployeeTypeCode as System.String = Nothing
	Private _CreateDate as Nullable (of System.DateTime) = Nothing
	Private _UpdateDate as Nullable (of System.DateTime) = Nothing
	Private _CreateUser as System.String = Nothing
	Private _UpdateUser as System.String = Nothing
	Private _SampleGuidField as Nullable (of System.Guid) = Nothing

	' *****************************************
	' ****** CHILD OBJECTS ********************
	private _Rank as VbBusObjects.EmployeeRank = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _EmployeeInfo as VbBusObjects.EmployeeInfo = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _EmployeeProjects as List(Of VbBusObjects.EmployeeProject) = nothing ''''' initialize to nothing, for lazy load logic below !!!
	private _deletedEmployeeProjects as List(Of VbBusObjects.EmployeeProject) = new List(Of VbBusObjects.EmployeeProject)''''' initialize to empty list !!!

	' *****************************************
	' ****** END CHILD OBJECTS ********************


#END Region

#Region "Field Properties"

	Public Overridable Property PrEmployeeId as System.Int64 _ 
		Implements IEmployee.PrEmployeeId
	Get 
		return _EmployeeId
	End Get 
	Set
		if ModelObject.valueChanged(_EmployeeId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEEID)
			End If
			me._EmployeeId = value

			me.raiseBroadcastIdChange()

		End if
	End Set 
	End Property 
Public Sub setEmployeeId(ByVal val As String)
	If IsNumeric(val) Then
		Me.PrEmployeeId = CType(val, System.Int64)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.PrEmployeeId = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:EmployeeId, value:" & val)
	End If
End Sub
	Public Overridable Property PrEmployeeName as System.String _ 
		Implements IEmployee.PrEmployeeName
	Get 
		return _EmployeeName
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("EmployeeName")
		End If
		if ModelObject.valueChanged(_EmployeeName, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEENAME)
			End If
			me._EmployeeName = value

		End if
	End Set 
	End Property 
Public Sub setEmployeeName(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrEmployeeName = val
	Else
		Me.PrEmployeeName = Nothing
	End If
End Sub
	Public Overridable Property PrEmployeeRankId as Nullable (of System.Int64) _ 
		Implements IEmployee.PrEmployeeRankId
	Get 
		return _EmployeeRankId
	End Get 
	Set(ByVal value As Nullable (of System.Int64))
		if ModelObject.valueChanged(_EmployeeRankId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEERANKID)
			End If
			me._EmployeeRankId = value

		End if
	End Set 
	End Property 
Public Sub setEmployeeRankId(ByVal val As String)
	If IsNumeric(val) Then
		Me.PrEmployeeRankId = CType(val, System.Int64)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.PrEmployeeRankId = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:EmployeeRankId, value:" & val)
	End If
End Sub
	Public Overridable Property PrSalary as Nullable (of System.Decimal) _ 
		Implements IEmployee.PrSalary
	Get 
		return _Salary
	End Get 
	Set(ByVal value As Nullable (of System.Decimal))
		if ModelObject.valueChanged(_Salary, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SALARY)
			End If
			me._Salary = value

		End if
	End Set 
	End Property 
Public Sub setSalary(ByVal val As String)
	If IsNumeric(val) Then
		Me.PrSalary = CDec(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.PrSalary = Nothing
	Else
		Throw new ApplicationException("Invalid Decimal Number, field:Salary, value:" & val)
	End If
End Sub
	Public Overridable Property PrAddress as System.String _ 
		Implements IEmployee.PrAddress
	Get 
		return _Address
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("Address")
		End If
		if ModelObject.valueChanged(_Address, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ADDRESS)
			End If
			me._Address = value

		End if
	End Set 
	End Property 
Public Sub setAddress(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrAddress = val
	Else
		Me.PrAddress = Nothing
	End If
End Sub
	Public Overridable Property PrTelephone as System.String _ 
		Implements IEmployee.PrTelephone
	Get 
		return _Telephone
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Telephone")
		End If
		if ModelObject.valueChanged(_Telephone, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_TELEPHONE)
			End If
			me._Telephone = value

		End if
	End Set 
	End Property 
Public Sub setTelephone(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrTelephone = val
	Else
		Me.PrTelephone = Nothing
	End If
End Sub
	Public Overridable Property PrMobile as System.String _ 
		Implements IEmployee.PrMobile
	Get 
		return _Mobile
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("Mobile")
		End If
		if ModelObject.valueChanged(_Mobile, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_MOBILE)
			End If
			me._Mobile = value

		End if
	End Set 
	End Property 
Public Sub setMobile(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrMobile = val
	Else
		Me.PrMobile = Nothing
	End If
End Sub
	Public Overridable Property PrIdNumber as System.String _ 
		Implements IEmployee.PrIdNumber
	Get 
		return _IdNumber
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("IdNumber")
		End If
		if ModelObject.valueChanged(_IdNumber, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_IDNUMBER)
			End If
			me._IdNumber = value

		End if
	End Set 
	End Property 
Public Sub setIdNumber(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrIdNumber = val
	Else
		Me.PrIdNumber = Nothing
	End If
End Sub
	Public Overridable Property PrSSINumber as System.String _ 
		Implements IEmployee.PrSSINumber
	Get 
		return _SSINumber
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("SSINumber")
		End If
		if ModelObject.valueChanged(_SSINumber, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SSINUMBER)
			End If
			me._SSINumber = value

		End if
	End Set 
	End Property 
Public Sub setSSINumber(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrSSINumber = val
	Else
		Me.PrSSINumber = Nothing
	End If
End Sub
	Public Overridable Property PrHireDate as Nullable (of System.DateTime) _ 
		Implements IEmployee.PrHireDate
	Get 
		return _HireDate
	End Get 
	Set(ByVal value As Nullable (of System.DateTime))
		if ModelObject.valueChanged(_HireDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_HIREDATE)
			End If
			me._HireDate = value

		End if
	End Set 
	End Property 
Public Sub setHireDate(ByVal val As String)
	If IsDate(val) Then
		Me.PrHireDate = CDate(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.PrHireDate = Nothing
	Else
		Throw new ApplicationException("Invalid Date, field:HireDate, value:" & val)
	End If
End Sub
	Public Overridable Property PrNumDependents as Nullable (of System.Int64) _ 
		Implements IEmployee.PrNumDependents
	Get 
		return _NumDependents
	End Get 
	Set(ByVal value As Nullable (of System.Int64))
		if ModelObject.valueChanged(_NumDependents, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_NUMDEPENDENTS)
			End If
			me._NumDependents = value

		End if
	End Set 
	End Property 
Public Sub setNumDependents(ByVal val As String)
	If IsNumeric(val) Then
		Me.PrNumDependents = CType(val, System.Int64)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.PrNumDependents = Nothing
	Else
		Throw new ApplicationException("Invalid Integer Number, field:NumDependents, value:" & val)
	End If
End Sub
	Public Overridable Property PrEmployeeTypeCode as System.String _ 
		Implements IEmployee.PrEmployeeTypeCode
	Get 
		return _EmployeeTypeCode
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 10 Then
			Throw new ModelObjectFieldTooLongException("EmployeeTypeCode")
		End If
		if ModelObject.valueChanged(_EmployeeTypeCode, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_EMPLOYEETYPECODE)
			End If
			me._EmployeeTypeCode = value

		End if
	End Set 
	End Property 
Public Sub setEmployeeTypeCode(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.PrEmployeeTypeCode = val
	Else
		Me.PrEmployeeTypeCode = Nothing
	End If
End Sub
	Public Overridable Property CreateDate as Nullable (of System.DateTime) _ 
		Implements IAuditable.CreateDate,IEmployee.CreateDate
	Get 
		return _CreateDate
	End Get 
	Set(ByVal value As Nullable (of System.DateTime))
		if ModelObject.valueChanged(_CreateDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEDATE)
			End If
			me._CreateDate = value

		End if
	End Set 
	End Property 
Public Sub setCreateDate(ByVal val As String)
	If IsDate(val) Then
		Me.CreateDate = CDate(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.CreateDate = Nothing
	Else
		Throw new ApplicationException("Invalid Date, field:CreateDate, value:" & val)
	End If
End Sub
	Public Overridable Property UpdateDate as Nullable (of System.DateTime) _ 
		Implements IAuditable.UpdateDate,IEmployee.UpdateDate
	Get 
		return _UpdateDate
	End Get 
	Set(ByVal value As Nullable (of System.DateTime))
		if ModelObject.valueChanged(_UpdateDate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEDATE)
			End If
			me._UpdateDate = value

		End if
	End Set 
	End Property 
Public Sub setUpdateDate(ByVal val As String)
	If IsDate(val) Then
		Me.UpdateDate = CDate(val)
	ElseIf String.IsNullOrEmpty(val) Then
		Me.UpdateDate = Nothing
	Else
		Throw new ApplicationException("Invalid Date, field:UpdateDate, value:" & val)
	End If
End Sub
	Public Overridable Property CreateUser as System.String _ 
		Implements IAuditable.CreateUser,IEmployee.CreateUser
	Get 
		return _CreateUser
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("createUser")
		End If
		if ModelObject.valueChanged(_CreateUser, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEUSER)
			End If
			me._CreateUser = value

		End if
	End Set 
	End Property 
Public Sub setCreateUser(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.CreateUser = val
	Else
		Me.CreateUser = Nothing
	End If
End Sub
	Public Overridable Property UpdateUser as System.String _ 
		Implements IAuditable.UpdateUser,IEmployee.UpdateUser
	Get 
		return _UpdateUser
	End Get 
	Set
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("updateUser")
		End If
		if ModelObject.valueChanged(_UpdateUser, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEUSER)
			End If
			me._UpdateUser = value

		End if
	End Set 
	End Property 
Public Sub setUpdateUser(ByVal val As String)
	If not String.isNullOrEmpty(val) Then
		Me.UpdateUser = val
	Else
		Me.UpdateUser = Nothing
	End If
End Sub
	Public Overridable Property PrSampleGuidField as Nullable (of System.Guid) _ 
		Implements IEmployee.PrSampleGuidField
	Get 
		return _SampleGuidField
	End Get 
	Set(ByVal value As Nullable (of System.Guid))
		if ModelObject.valueChanged(_SampleGuidField, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SAMPLEGUIDFIELD)
			End If
			me._SampleGuidField = value

		End if
	End Set 
	End Property 

		' ASSOCIATIONS GETTERS/SETTERS BELOW!
		
		'associationParent.txt
		#Region "Association Rank"
		friend _RankLoaded as Boolean

		''' <summary>
        ''' Gets/Sets parent object
        ''' </summary>
		Public Overridable Property PrRank() As VbBusObjects.EmployeeRank _
			implements IEmployee.PrRank
		    '1-1 parent association
            Set(ByVal value As VbBusObjects.EmployeeRank)
                Me._Rank = value
				If value isnot Nothing then
					me.PrEmployeeRankId = value.PrRankId
					AddHandler value.IDChanged, AddressOf Me.handleParentIdChanged
                Else
					me.PrEmployeeRankId = Nothing
				End If

            End Set


            Get
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._Rank Is Nothing Then
					Me.loadRank
                End If 
				
                Return Me._Rank
            End Get
        End Property
        
        ''' <summary>
        ''' Loads parent object and sets the appropriate properties
        ''' </summary>x
        private Sub loadRank
			
			If me._RankLoaded then return
			
			'check if object is not loaded
			If Me._Rank Is Nothing AndAlso _
                   Me.PrEmployeeRankId IsNot Nothing Then
                
				'call the setter here, not the private variable!
                Me.PrRank = new VbBusObjects.DBMappers.EmployeeRankDBMapper().FindByKey( _ 
				                 Me.PrEmployeeRankId.Value)
                
            End If

            me._RankLoaded=true
			            
        End Sub

		#End Region

        
        friend _EmployeeInfoLoaded as Boolean
		'associationChildOne.txt
		Public Overridable Property PrEmployeeInfo() As VbBusObjects.EmployeeInfo _
			implements IEmployee.PrEmployeeInfo
			'1-1 child association
            Set(ByVal value As VbBusObjects.EmployeeInfo)
                Me._EmployeeInfo = value
				If  Me._EmployeeInfo isnot Nothing then
					Me._EmployeeInfo.PrEIEmployeeId = me.PrEmployeeId
					AddHandler Me.IDChanged, AddressOf value.handleParentIdChanged
				
				End If     
            End Set


            Get
			    'LAZY LOADING! Only hit the database to get the child object if we need it
                If not  Me._EmployeeInfoLoaded Then
					Call Me.loadEmployeeInfo
                End If 
								
                Return Me._EmployeeInfo
                
            End Get
        End Property
        
        ''' <summary>
        ''' Loads child object from dabatabase, if not loaded already
        ''' </summary>
        private Sub loadEmployeeInfo
						
			If Me._EmployeeInfoLoaded then return

			If Me._EmployeeInfo Is Nothing Then

				'IMPORTANT:call setter here, not the private variable
				Me.PrEmployeeInfo = _ 
					new VbBusObjects.DBMappers.EmployeeInfoDBMapper().findWhere( _ 
					   "EIEmployeeId={0}", Me.PrEmployeeId)
				
				
			End If 

			'set the loaded flag here
			me._EmployeeInfoLoaded = true
            
        End Sub

		

		
		#Region "Association EmployeeProjects"
		'associationChildMany.txt
		friend _EmployeeProjectsLoaded as Boolean

		Public Overridable Function PrEmployeeProjectGetAt(ByVal i As Integer) As VbBusObjects.EmployeeProject _
				implements IEmployee.PrEmployeeProjectGetAt

            me.loadEmployeeProjects
            If Me._EmployeeProjects.Count >= (i - 1) Then
                Return Me._EmployeeProjects.Item(i)
            End If
            Return Nothing

        End Function        
		
		Public Overridable Sub PrEmployeeProjectAdd(val As VbBusObjects.EmployeeProject) _
				implements IEmployee.PrEmployeeProjectAdd
			'1-Many , add a single item!
			me.loadEmployeeProjects
			val.PrEPEmployeeId = me.PrEmployeeId
			AddHandler Me.IDChanged, AddressOf val.handleParentIdChanged
			me._EmployeeProjects.add(val)

        End Sub

		 Public Overridable Sub PrEmployeeProjectsClear()

            Me.loadEmployeeProjects()
            Me._deletedEmployeeProjects.AddRange(Me._EmployeeProjects)
            Me._EmployeeProjects.Clear()

        End Sub

		Public Overridable Sub PrEmployeeProjectRemove( _ 
					val As VbBusObjects.EmployeeProject) _
					implements IEmployee.PrEmployeeProjectRemove
			
			me.loadEmployeeProjects
			me._deletedEmployeeProjects.add(val)
			me._EmployeeProjects.remove(val)

        End Sub

		
		Public Overridable Function PrEmployeeProjectsGetDeleted() As IEnumerable(Of VbBusObjects.EmployeeProject) _
					implements IEmployee.PrEmployeeProjectsGetDeleted
			
			return me._deletedEmployeeProjects

        End Function

        Public Overridable Property PrEmployeeProjects() _ 
					As IEnumerable(Of VbBusObjects.EmployeeProject) _
					implements IEmployee.PrEmployeeProjects

            Get
				'1 to many relation
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._EmployeeProjects Is Nothing Then
                    me.loadEmployeeProjects
                End If ' me._EmployeeProjects is Nothing
				
                Return Me._EmployeeProjects
            End Get
            
			Set(value as IEnumerable(Of VbBusObjects.EmployeeProject))
				if value is nothing then
					Me._EmployeeProjects = nothing
                Else
                    Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)
                    Me.addToEmployeeProjectsList(value)
                End If
			End Set

        End Property

		''' <summary>
        ''' Private method to add to the EmployeeProjects List. 
		''' The list must have aldready been initialized
        ''' </summary>
		Private Sub addToEmployeeProjectsList(ByVal value As IEnumerable(Of VbBusObjects.EmployeeProject))

			Dim enumtor As IEnumerator(Of VbBusObjects.EmployeeProject) = value.GetEnumerator
        
		    While enumtor.MoveNext
                Dim v As VbBusObjects.EmployeeProject = enumtor.Current
                AddHandler Me.IDChanged, AddressOf v.handleParentIdChanged
                Me._EmployeeProjects.Add(v)
            End While

        End Sub
        
        ''' <summary>
        ''' Loads child objects from dabatabase, if not loaded already
        ''' </summary>
        private Sub loadEmployeeProjects
			
			if me._EmployeeProjectsLoaded then return
			'init list
			Me._EmployeeProjects = New List(Of VbBusObjects.EmployeeProject)

			If Not Me.isNew Then
                
                Me.addToEmployeeProjectsList( new VbBusObjects.DBMappers.EmployeeProjectDBMapper().findList( _ 
																		"EPEmployeeId={0}", Me.PrEmployeeId))
            End If
            
			me._EmployeeProjectsLoaded = true
        End Sub
		#End Region


#End Region

#Region "Getters/Setters of values by field index/name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		

		select case fieldKey
		case FLD_EMPLOYEEID
			return me.PrEmployeeId
		case FLD_EMPLOYEENAME
			return me.PrEmployeeName
		case FLD_EMPLOYEERANKID
			return me.PrEmployeeRankId
		case FLD_SALARY
			return me.PrSalary
		case FLD_ADDRESS
			return me.PrAddress
		case FLD_TELEPHONE
			return me.PrTelephone
		case FLD_MOBILE
			return me.PrMobile
		case FLD_IDNUMBER
			return me.PrIdNumber
		case FLD_SSINUMBER
			return me.PrSSINumber
		case FLD_HIREDATE
			return me.PrHireDate
		case FLD_NUMDEPENDENTS
			return me.PrNumDependents
		case FLD_EMPLOYEETYPECODE
			return me.PrEmployeeTypeCode
		case FLD_CREATEDATE
			return me.CreateDate
		case FLD_UPDATEDATE
			return me.UpdateDate
		case FLD_CREATEUSER
			return me.CreateUser
		case FLD_UPDATEUSER
			return me.UpdateUser
		case FLD_SAMPLEGUIDFIELD
			return me.PrSampleGuidField
		case else
			return nothing
		end select


    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower

		if fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			return me.PrEmployeeId
		else if fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			return me.PrEmployeeName
		else if fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			return me.PrEmployeeRankId
		else if fieldKey=STR_FLD_SALARY.ToLower() Then
			return me.PrSalary
		else if fieldKey=STR_FLD_ADDRESS.ToLower() Then
			return me.PrAddress
		else if fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			return me.PrTelephone
		else if fieldKey=STR_FLD_MOBILE.ToLower() Then
			return me.PrMobile
		else if fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			return me.PrIdNumber
		else if fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			return me.PrSSINumber
		else if fieldKey=STR_FLD_HIREDATE.ToLower() Then
			return me.PrHireDate
		else if fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			return me.PrNumDependents
		else if fieldKey=STR_FLD_EMPLOYEETYPECODE.ToLower() Then
			return me.PrEmployeeTypeCode
		else if fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			return me.CreateDate
		else if fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			return me.UpdateDate
		else if fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			return me.CreateUser
		else if fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			return me.UpdateUser
		else if fieldKey=STR_FLD_SAMPLEGUIDFIELD.ToLower() Then
			return me.PrSampleGuidField
		else
			return nothing
		end If
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		
		Select Case fieldKey
		case FLD_EMPLOYEEID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeId = Nothing
			Else
				Me.PrEmployeeId=CType(val,System.Int64)
			End If
			return
		case FLD_EMPLOYEENAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeName = Nothing
			Else
				Me.PrEmployeeName=CType(val,System.String)
			End If
			return
		case FLD_EMPLOYEERANKID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeRankId = Nothing
			Else
				Me.PrEmployeeRankId=CType(val,System.Int64)
			End If
			return
		case FLD_SALARY
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSalary = Nothing
			Else
				Me.PrSalary=CType(val,System.Decimal)
			End If
			return
		case FLD_ADDRESS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAddress = Nothing
			Else
				Me.PrAddress=CType(val,System.String)
			End If
			return
		case FLD_TELEPHONE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrTelephone = Nothing
			Else
				Me.PrTelephone=CType(val,System.String)
			End If
			return
		case FLD_MOBILE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrMobile = Nothing
			Else
				Me.PrMobile=CType(val,System.String)
			End If
			return
		case FLD_IDNUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIdNumber = Nothing
			Else
				Me.PrIdNumber=CType(val,System.String)
			End If
			return
		case FLD_SSINUMBER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSSINumber = Nothing
			Else
				Me.PrSSINumber=CType(val,System.String)
			End If
			return
		case FLD_HIREDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrHireDate = Nothing
			Else
				Me.PrHireDate=CType(val,System.DateTime)
			End If
			return
		case FLD_NUMDEPENDENTS
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrNumDependents = Nothing
			Else
				Me.PrNumDependents=CType(val,System.Int64)
			End If
			return
		case FLD_EMPLOYEETYPECODE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeCode = Nothing
			Else
				Me.PrEmployeeTypeCode=CType(val,System.String)
			End If
			return
		case FLD_CREATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=CType(val,System.DateTime)
			End If
			return
		case FLD_UPDATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=CType(val,System.DateTime)
			End If
			return
		case FLD_CREATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=CType(val,System.String)
			End If
			return
		case FLD_UPDATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=CType(val,System.String)
			End If
			return
		case FLD_SAMPLEGUIDFIELD
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleGuidField = Nothing
			Else
				Me.PrSampleGuidField=CType(val,System.Guid)
			End If
			return
		case else
			return
		end select


    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		
		if  fieldKey=STR_FLD_EMPLOYEEID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeId = Nothing
			Else
				Me.PrEmployeeId=CType(val,System.Int64)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEENAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeName = Nothing
			Else
				Me.PrEmployeeName=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEERANKID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeRankId = Nothing
			Else
				Me.PrEmployeeRankId=CType(val,System.Int64)
			End If
			return
		else if  fieldKey=STR_FLD_SALARY.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSalary = Nothing
			Else
				Me.PrSalary=CType(val,System.Decimal)
			End If
			return
		else if  fieldKey=STR_FLD_ADDRESS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAddress = Nothing
			Else
				Me.PrAddress=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_TELEPHONE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrTelephone = Nothing
			Else
				Me.PrTelephone=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_MOBILE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrMobile = Nothing
			Else
				Me.PrMobile=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_IDNUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrIdNumber = Nothing
			Else
				Me.PrIdNumber=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_SSINUMBER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSSINumber = Nothing
			Else
				Me.PrSSINumber=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_HIREDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrHireDate = Nothing
			Else
				Me.PrHireDate=CType(val,System.DateTime)
			End If
			return
		else if  fieldKey=STR_FLD_NUMDEPENDENTS.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrNumDependents = Nothing
			Else
				Me.PrNumDependents=CType(val,System.Int64)
			End If
			return
		else if  fieldKey=STR_FLD_EMPLOYEETYPECODE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrEmployeeTypeCode = Nothing
			Else
				Me.PrEmployeeTypeCode=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=CType(val,System.DateTime)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=CType(val,System.DateTime)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=CType(val,System.String)
			End If
			return
		else if  fieldKey=STR_FLD_SAMPLEGUIDFIELD.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSampleGuidField = Nothing
			Else
				Me.PrSampleGuidField=CType(val,System.Guid)
			End If
			return
		end If

    End Sub

#End Region
#Region "Overrides of GetHashCode and Equals "
	Public Overloads Function Equals(ByVal other As EmployeeBase) As Boolean _     
		Implements System.IEquatable(Of EmployeeBase).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return me.PrEmployeeId= other.PrEmployeeId _
				AndAlso me.PrEmployeeName= other.PrEmployeeName _
				AndAlso me.PrEmployeeRankId.GetValueOrDefault = other.PrEmployeeRankId.GetValueOrDefault _
				AndAlso me.PrSalary.GetValueOrDefault = other.PrSalary.GetValueOrDefault _
				AndAlso me.PrAddress= other.PrAddress _
				AndAlso me.PrTelephone= other.PrTelephone _
				AndAlso me.PrMobile= other.PrMobile _
				AndAlso me.PrIdNumber= other.PrIdNumber _
				AndAlso me.PrSSINumber= other.PrSSINumber _
				AndAlso me.PrHireDate.GetValueOrDefault = other.PrHireDate.GetValueOrDefault _
				AndAlso me.PrNumDependents.GetValueOrDefault = other.PrNumDependents.GetValueOrDefault _
				AndAlso me.PrEmployeeTypeCode= other.PrEmployeeTypeCode _
				AndAlso me.CreateDate.GetValueOrDefault = other.CreateDate.GetValueOrDefault _
				AndAlso me.UpdateDate.GetValueOrDefault = other.UpdateDate.GetValueOrDefault _
				AndAlso me.CreateUser= other.CreateUser _
				AndAlso me.UpdateUser= other.UpdateUser _
				AndAlso me.PrSampleGuidField.GetValueOrDefault = other.PrSampleGuidField.GetValueOrDefault
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return me.PrEmployeeId.GetHashCode _
				Xor me.getStringHashCode(Me.PrEmployeeName) _
				Xor me.PrEmployeeRankId.GetHashCode _
				Xor me.PrSalary.GetHashCode _
				Xor me.getStringHashCode(Me.PrAddress) _
				Xor me.getStringHashCode(Me.PrTelephone) _
				Xor me.getStringHashCode(Me.PrMobile) _
				Xor me.getStringHashCode(Me.PrIdNumber) _
				Xor me.getStringHashCode(Me.PrSSINumber) _
				Xor me.PrHireDate.GetHashCode _
				Xor me.PrNumDependents.GetHashCode _
				Xor me.getStringHashCode(Me.PrEmployeeTypeCode) _
				Xor me.CreateDate.GetHashCode _
				Xor me.UpdateDate.GetHashCode _
				Xor me.getStringHashCode(Me.CreateUser) _
				Xor me.getStringHashCode(Me.UpdateUser) _
				Xor me.PrSampleGuidField.GetHashCode 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, EmployeeBase)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As EmployeeBase, ByVal obj2 As EmployeeBase) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a copy
		
		'NOTE: we can't cast from EmployeeBase to Employee, so below we 
        'instantiate a Employee, NOT a EmployeeBase object
        Dim ret as Employee = EmployeeFactory.Create()
            
				ret.PrEmployeeId = me.PrEmployeeId
		ret.PrEmployeeName = me.PrEmployeeName
		ret.PrEmployeeRankId = me.PrEmployeeRankId
		ret.PrSalary = me.PrSalary
		ret.PrAddress = me.PrAddress
		ret.PrTelephone = me.PrTelephone
		ret.PrMobile = me.PrMobile
		ret.PrIdNumber = me.PrIdNumber
		ret.PrSSINumber = me.PrSSINumber
		ret.PrHireDate = me.PrHireDate
		ret.PrNumDependents = me.PrNumDependents
		ret.PrEmployeeTypeCode = me.PrEmployeeTypeCode
		ret.CreateDate = me.CreateDate
		ret.UpdateDate = me.UpdateDate
		ret.CreateUser = me.CreateUser
		ret.UpdateUser = me.UpdateUser
		ret.PrSampleGuidField = me.PrSampleGuidField

		
		return ret
		
	End Function
	
	Public Overrides Sub merge(other as IModelObject)
		'merges this Employee model object (me) with the "other" instance 
		
		Dim o as Employee = CType(other, Employee)
		If not String.isNullOrEmpty(o.PrEmployeeName) AndAlso _
		 String.isNullOrEmpty(me.PrEmployeeName) Then 
		me.PrEmployeeName = o.PrEmployeeName
End If
If not o.PrEmployeeRankId is Nothing AndAlso _
		 me.PrEmployeeRankId is Nothing Then 
		me.PrEmployeeRankId = o.PrEmployeeRankId
End If
If not o.PrSalary is Nothing AndAlso _
		 me.PrSalary is Nothing Then 
		me.PrSalary = o.PrSalary
End If
If not String.isNullOrEmpty(o.PrAddress) AndAlso _
		 String.isNullOrEmpty(me.PrAddress) Then 
		me.PrAddress = o.PrAddress
End If
If not String.isNullOrEmpty(o.PrTelephone) AndAlso _
		 String.isNullOrEmpty(me.PrTelephone) Then 
		me.PrTelephone = o.PrTelephone
End If
If not String.isNullOrEmpty(o.PrMobile) AndAlso _
		 String.isNullOrEmpty(me.PrMobile) Then 
		me.PrMobile = o.PrMobile
End If
If not String.isNullOrEmpty(o.PrIdNumber) AndAlso _
		 String.isNullOrEmpty(me.PrIdNumber) Then 
		me.PrIdNumber = o.PrIdNumber
End If
If not String.isNullOrEmpty(o.PrSSINumber) AndAlso _
		 String.isNullOrEmpty(me.PrSSINumber) Then 
		me.PrSSINumber = o.PrSSINumber
End If
If not o.PrHireDate is Nothing AndAlso _
		 me.PrHireDate is Nothing Then 
		me.PrHireDate = o.PrHireDate
End If
If not o.PrNumDependents is Nothing AndAlso _
		 me.PrNumDependents is Nothing Then 
		me.PrNumDependents = o.PrNumDependents
End If
If not String.isNullOrEmpty(o.PrEmployeeTypeCode) AndAlso _
		 String.isNullOrEmpty(me.PrEmployeeTypeCode) Then 
		me.PrEmployeeTypeCode = o.PrEmployeeTypeCode
End If
If not o.CreateDate is Nothing AndAlso _
		 me.CreateDate is Nothing Then 
		me.CreateDate = o.CreateDate
End If
If not o.UpdateDate is Nothing AndAlso _
		 me.UpdateDate is Nothing Then 
		me.UpdateDate = o.UpdateDate
End If
If not String.isNullOrEmpty(o.CreateUser) AndAlso _
		 String.isNullOrEmpty(me.CreateUser) Then 
		me.CreateUser = o.CreateUser
End If
If not String.isNullOrEmpty(o.UpdateUser) AndAlso _
		 String.isNullOrEmpty(me.UpdateUser) Then 
		me.UpdateUser = o.UpdateUser
End If
If not o.PrSampleGuidField is Nothing AndAlso _
		 me.PrSampleGuidField is Nothing Then 
		me.PrSampleGuidField = o.PrSampleGuidField
End If

		
	End Sub

	Public Function CompareTo(ByVal other As Employee) As Integer _
		 Implements System.IComparable(Of Employee).CompareTo

		Return  Me.PrEmployeeName.CompareTo(other.PrEmployeeName)
	End Function

	
#End Region

#Region "parentIdChanged"
	'below sub is called when parentIdChanged
	public Overrides Sub handleParentIdChanged(parentMo as IModelObject)
		' Assocations from VbBusObjects.EmployeeRank
		if (typeof parentMo is VbBusObjects.EmployeeRank) Then
			me.PrEmployeeRankId= DirectCast(parentMo, VbBusObjects.EmployeeRank).PrRankId
		End If
	End Sub
#End Region


#Region "ID Property"
	
    Public Overrides Property Id() As object 
        Get
            return me._EmployeeId
        End Get
        Set(ByVal value As object)
             me._EmployeeId = Clng(value)
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	
#End Region
	
	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
    Public Class EmployeeRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As Employee = CType(imo, Employee)
			if String.isNullOrEmpty( mo.PrEmployeeName) Then
		Throw new ModelObjectRequiredFieldException("EmployeeName")
End if 
if mo.PrEmployeeRankId is Nothing then
		Throw new ModelObjectRequiredFieldException("EmployeeRankId")
End if 

			
        End Sub

    End Class
#End Region

End Namespace

