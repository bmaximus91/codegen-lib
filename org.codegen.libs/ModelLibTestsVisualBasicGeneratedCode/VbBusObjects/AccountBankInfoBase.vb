
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
Imports System.Runtime.Serialization
Imports System.Data.Linq.Mapping
Imports System.ComponentModel.DataAnnotations

'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on 23-Jul-15 12:32:02 PM by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class AccountBankInfo
'
'************************************************************
'</comments>
Namespace VbBusObjects
<Table(Name := "AccountInfo")><SelectObject("AccountInfo")><KeyFieldName("AccInfoId")> _
<DefaultMapperAttr(GetType(AccountBankInfoDBMapper)), DataContract, _
ComVisible(False),Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
partial class AccountBankInfo
		Inherits ModelObject
		Implements IEquatable(Of AccountBankInfo),IAuditable 

#Region "Constructor"
    
    Friend sub New()
		Me.addValidator(New AccountBankInfoRequiredFieldsValidator)
		Me.Id = ModelObjectKeyGen.nextId()
    End Sub

#End Region

#Region "Children and Parents"
	
	public Overrides sub loadObjectHierarchy()
				LoadPrBank()

	End Sub

	Public Overrides Function getChildren() As List(Of ModelObject) 
		Dim ret as New List(Of ModelObject)()
		
		return ret
	End Function
	
	Public Overrides Function getParents() As List(Of ModelObject)
		Dim ret as New List(Of ModelObject)()
		if  Me._Bank isNot Nothing AndAlso Me.BankLoaded Then
	ret.Add(me.PrBank)
End If

		return ret
	End Function

#End Region
#Region "Field CONSTANTS"

			public Const STR_FLD_ACCINFOID as String = "AccInfoId"
			public Const STR_FLD_CONTACTNAME as String = "ContactName"
			public Const STR_FLD_CONTACTPHONE as String = "ContactPhone"
			public Const STR_FLD_CONTACTFAX as String = "ContactFax"
			public Const STR_FLD_ACCOUNTID as String = "AccountID"
			public Const STR_FLD_SIGNEEEMPLOYEE as String = "SigneeEmployee"
			public Const STR_FLD_COMPANYNAME as String = "CompanyName"
			public Const STR_FLD_COMPANYBANKCODE as String = "CompanyBankCode"
			public Const STR_FLD_BANKID as String = "BankId"
			public Const STR_FLD_COOPCODE as String = "COOPCode"
			public Const STR_FLD_CREATEDATE as String = "Createdate"
			public Const STR_FLD_UPDATEDATE as String = "Updatedate"
			public Const STR_FLD_UPDATEUSER as String = "Updateuser"
			public Const STR_FLD_CREATEUSER as String = "Createuser"


		public Const FLD_ACCINFOID as Integer = 0
		public Const FLD_CONTACTNAME as Integer = 1
		public Const FLD_CONTACTPHONE as Integer = 2
		public Const FLD_CONTACTFAX as Integer = 3
		public Const FLD_ACCOUNTID as Integer = 4
		public Const FLD_SIGNEEEMPLOYEE as Integer = 5
		public Const FLD_COMPANYNAME as Integer = 6
		public Const FLD_COMPANYBANKCODE as Integer = 7
		public Const FLD_BANKID as Integer = 8
		public Const FLD_COOPCODE as Integer = 9
		public Const FLD_CREATEDATE as Integer = 10
		public Const FLD_UPDATEDATE as Integer = 11
		public Const FLD_UPDATEUSER as Integer = 12
		public Const FLD_CREATEUSER as Integer = 13



        '''<summary>Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_ACCINFOID,STR_FLD_CONTACTNAME,STR_FLD_CONTACTPHONE,STR_FLD_CONTACTFAX,STR_FLD_ACCOUNTID,STR_FLD_SIGNEEEMPLOYEE,STR_FLD_COMPANYNAME,STR_FLD_COMPANYBANKCODE,STR_FLD_BANKID,STR_FLD_COOPCODE,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_UPDATEUSER,STR_FLD_CREATEUSER}
        End Function
        
#END Region

#Region "Field Declarations"


	Private _AccInfoId as System.Int64
	Private _ContactName as System.String
	Private _ContactPhone as System.String
	Private _ContactFax as System.String
	Private _AccountID as System.Int64? = Nothing
	Private _SigneeEmployee as System.String
	Private _CompanyName as System.String
	Private _CompanyBankCode as System.String
	Private _BankId as System.Int64? = Nothing
	Private _COOPCode as System.String
	Private _Createdate as System.DateTime? = Nothing
	Private _Updatedate as System.DateTime? = Nothing
	Private _Updateuser as System.String
	Private _Createuser as System.String

	' *****************************************
	' ****** CHILD OBJECTS ********************
	<DataMember(Name:="PrBank")>
	private _Bank as VbBusObjects.Bank = nothing '' initialize to nothing, for lazy load logic below !!!

	' *****************************************
	' ****** END CHILD OBJECTS ********************


#end Region

#Region "Field Properties"

	<Column(Name:="AccInfoId",Storage:="_AccInfoId", IsPrimaryKey:=True,DbType:="int NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property PrAccInfoId as System.Int64
	Get 
		return _AccInfoId
	End Get 
	Set(ByVal value As System.Int64)
		if ModelObject.valueChanged(_AccInfoId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ACCINFOID)
			End If
			me._AccInfoId = value

			me.raiseBroadcastIdChange()

		End if
	End Set 
	End Property 
	<Column(Name:="ContactName",Storage:="_ContactName", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrContactName as System.String
	Get 
		return _ContactName
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_ContactName, value) then
		if value isNot Nothing andAlso value.Length > 100 Then
			Throw new ModelObjectFieldTooLongException("ContactName")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CONTACTNAME)
			End If
			me._ContactName = value

		End if
	End Set 
	End Property 
	<Column(Name:="ContactPhone",Storage:="_ContactPhone", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrContactPhone as System.String
	Get 
		return _ContactPhone
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_ContactPhone, value) then
		if value isNot Nothing andAlso value.Length > 20 Then
			Throw new ModelObjectFieldTooLongException("ContactPhone")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CONTACTPHONE)
			End If
			me._ContactPhone = value

		End if
	End Set 
	End Property 
	<Column(Name:="ContactFax",Storage:="_ContactFax", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrContactFax as System.String
	Get 
		return _ContactFax
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_ContactFax, value) then
		if value isNot Nothing andAlso value.Length > 20 Then
			Throw new ModelObjectFieldTooLongException("ContactFax")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CONTACTFAX)
			End If
			me._ContactFax = value

		End if
	End Set 
	End Property 
	<Column(Name:="accountID",Storage:="_AccountID", IsPrimaryKey:=False,DbType:="int",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrAccountID as System.Int64?
	Get 
		return _AccountID
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_AccountID, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_ACCOUNTID)
			End If
			me._AccountID = value

		End if
	End Set 
	End Property 
	<Column(Name:="signeeEmployee",Storage:="_SigneeEmployee", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrSigneeEmployee as System.String
	Get 
		return _SigneeEmployee
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_SigneeEmployee, value) then
		if value isNot Nothing andAlso value.Length > 100 Then
			Throw new ModelObjectFieldTooLongException("signeeEmployee")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_SIGNEEEMPLOYEE)
			End If
			me._SigneeEmployee = value

		End if
	End Set 
	End Property 
	<Column(Name:="CompanyName",Storage:="_CompanyName", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrCompanyName as System.String
	Get 
		return _CompanyName
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_CompanyName, value) then
		if value isNot Nothing andAlso value.Length > 255 Then
			Throw new ModelObjectFieldTooLongException("CompanyName")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_COMPANYNAME)
			End If
			me._CompanyName = value

		End if
	End Set 
	End Property 
	<Column(Name:="CompanyBankCode",Storage:="_CompanyBankCode", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrCompanyBankCode as System.String
	Get 
		return _CompanyBankCode
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_CompanyBankCode, value) then
		if value isNot Nothing andAlso value.Length > 20 Then
			Throw new ModelObjectFieldTooLongException("CompanyBankCode")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_COMPANYBANKCODE)
			End If
			me._CompanyBankCode = value

		End if
	End Set 
	End Property 
	<Column(Name:="BankId",Storage:="_BankId", IsPrimaryKey:=False,DbType:="int",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrBankId as System.Int64?
	Get 
		return _BankId
	End Get 
	Set(ByVal value As System.Int64?)
		if ModelObject.valueChanged(_BankId, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_BANKID)
			End If
			me._BankId = value

		End if
	End Set 
	End Property 
	<Column(Name:="COOPCode",Storage:="_COOPCode", IsPrimaryKey:=False,DbType:="nvarchar",CanBeNull:=True )> _
<DataMember>	 Overridable Property PrCOOPCode as System.String
	Get 
		return _COOPCode
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_COOPCode, value) then
		if value isNot Nothing andAlso value.Length > 100 Then
			Throw new ModelObjectFieldTooLongException("COOPCode")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_COOPCODE)
			End If
			me._COOPCode = value

		End if
	End Set 
	End Property 
	<Column(Name:="createdate",Storage:="_Createdate", IsPrimaryKey:=False,DbType:="datetime NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property Createdate as System.DateTime? _ 
		Implements IAuditable.CreateDate
	Get 
		return _Createdate
	End Get 
	Set(ByVal value As System.DateTime?)
		if ModelObject.valueChanged(_Createdate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEDATE)
			End If
			me._Createdate = value

		End if
	End Set 
	End Property 
	<Column(Name:="updatedate",Storage:="_Updatedate", IsPrimaryKey:=False,DbType:="datetime NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property Updatedate as System.DateTime? _ 
		Implements IAuditable.UpdateDate
	Get 
		return _Updatedate
	End Get 
	Set(ByVal value As System.DateTime?)
		if ModelObject.valueChanged(_Updatedate, value) then
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEDATE)
			End If
			me._Updatedate = value

		End if
	End Set 
	End Property 
	<Column(Name:="updateuser",Storage:="_Updateuser", IsPrimaryKey:=False,DbType:="varchar NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property Updateuser as System.String _ 
		Implements IAuditable.UpdateUser
	Get 
		return _Updateuser
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_Updateuser, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("updateuser")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_UPDATEUSER)
			End If
			me._Updateuser = value

		End if
	End Set 
	End Property 
	<Column(Name:="createuser",Storage:="_Createuser", IsPrimaryKey:=False,DbType:="varchar NOT NULL",CanBeNull:=False )> _
<DataMember>	 Overridable Property Createuser as System.String _ 
		Implements IAuditable.CreateUser
	Get 
		return _Createuser
	End Get 
	Set(ByVal value As System.String)
		if ModelObject.valueChanged(_Createuser, value) then
		if value isNot Nothing andAlso value.Length > 50 Then
			Throw new ModelObjectFieldTooLongException("createuser")
		End If
			if me.IsObjectLoading = false then
				me.isDirty = true
				me.setFieldChanged(STR_FLD_CREATEUSER)
			End If
			me._Createuser = value

		End if
	End Set 
	End Property 
		#end region
		#region "Associations"
		
		'associationParent.txt
		#Region "Association Bank"
		friend BankLoaded as Boolean

		''' <summary>
        ''' Gets/Sets parent object PrBank
        ''' </summary>
		Public Overridable Property PrBank() As VbBusObjects.Bank 

		    '1-1 parent association
            Set(ByVal value As VbBusObjects.Bank)
                Me._Bank = value
				If value isnot Nothing then
					me.PrBankId = value.PrBANKID
					AddHandler value.IDChanged, AddressOf Me.handleParentIdChanged
                Else
					me.PrBankId = Nothing
				End If

            End Set


            Get
                'LAZY LOADING! Only hit the database to get the child object if we need it
                If Me._Bank Is Nothing Then
					Me.LoadPrBank
                End If 
				
                Return Me._Bank
            End Get
        End Property
        
        ''' <summary>
        ''' Loads parent object and sets the appropriate properties
        ''' </summary>x
        private Sub LoadPrBank
			
			If me.BankLoaded then return
			
			'check if object is not loaded
			If Me._Bank Is Nothing AndAlso _
                   Me.PrBankId IsNot Nothing Then
                
				'call the setter here, not the private variable!
                Me.PrBank = new VbBusObjects.DBMappers.BankDBMapper().FindByKey( _ 
				                 Me.PrBankId.Value)
                
            End If

            me.BankLoaded=true
			            
        End Sub

		#End Region


#End Region

#Region "Getters/Setters of values by field index / name"
    Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object
		

		select case fieldKey
		case FLD_ACCINFOID
			return me.PrAccInfoId
		case FLD_CONTACTNAME
			return me.PrContactName
		case FLD_CONTACTPHONE
			return me.PrContactPhone
		case FLD_CONTACTFAX
			return me.PrContactFax
		case FLD_ACCOUNTID
			return me.PrAccountID
		case FLD_SIGNEEEMPLOYEE
			return me.PrSigneeEmployee
		case FLD_COMPANYNAME
			return me.PrCompanyName
		case FLD_COMPANYBANKCODE
			return me.PrCompanyBankCode
		case FLD_BANKID
			return me.PrBankId
		case FLD_COOPCODE
			return me.PrCOOPCode
		case FLD_CREATEDATE
			return me.CreateDate
		case FLD_UPDATEDATE
			return me.UpdateDate
		case FLD_UPDATEUSER
			return me.UpdateUser
		case FLD_CREATEUSER
			return me.CreateUser
		case else
			return nothing
		end select


    End Function

    Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
		fieldKey = fieldKey.ToLower

		if fieldKey=STR_FLD_ACCINFOID.ToLower() Then
			return me.PrAccInfoId
		else if fieldKey=STR_FLD_CONTACTNAME.ToLower() Then
			return me.PrContactName
		else if fieldKey=STR_FLD_CONTACTPHONE.ToLower() Then
			return me.PrContactPhone
		else if fieldKey=STR_FLD_CONTACTFAX.ToLower() Then
			return me.PrContactFax
		else if fieldKey=STR_FLD_ACCOUNTID.ToLower() Then
			return me.PrAccountID
		else if fieldKey=STR_FLD_SIGNEEEMPLOYEE.ToLower() Then
			return me.PrSigneeEmployee
		else if fieldKey=STR_FLD_COMPANYNAME.ToLower() Then
			return me.PrCompanyName
		else if fieldKey=STR_FLD_COMPANYBANKCODE.ToLower() Then
			return me.PrCompanyBankCode
		else if fieldKey=STR_FLD_BANKID.ToLower() Then
			return me.PrBankId
		else if fieldKey=STR_FLD_COOPCODE.ToLower() Then
			return me.PrCOOPCode
		else if fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			return me.CreateDate
		else if fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			return me.UpdateDate
		else if fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			return me.UpdateUser
		else if fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			return me.CreateUser
		else
			return nothing
		end If
    End Function

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
		Try
		Select Case fieldKey
		case FLD_ACCINFOID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAccInfoId = Nothing
			Else
				Me.PrAccInfoId=CType(val,System.Int64)
			End If
			return
		case FLD_CONTACTNAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactName = Nothing
			Else
				Me.PrContactName=CType(val,System.String)
			End If
			return
		case FLD_CONTACTPHONE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactPhone = Nothing
			Else
				Me.PrContactPhone=CType(val,System.String)
			End If
			return
		case FLD_CONTACTFAX
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactFax = Nothing
			Else
				Me.PrContactFax=CType(val,System.String)
			End If
			return
		case FLD_ACCOUNTID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAccountID = Nothing
			Else
				Me.PrAccountID=CType(val,System.Int64?)
			End If
			return
		case FLD_SIGNEEEMPLOYEE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSigneeEmployee = Nothing
			Else
				Me.PrSigneeEmployee=CType(val,System.String)
			End If
			return
		case FLD_COMPANYNAME
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCompanyName = Nothing
			Else
				Me.PrCompanyName=CType(val,System.String)
			End If
			return
		case FLD_COMPANYBANKCODE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCompanyBankCode = Nothing
			Else
				Me.PrCompanyBankCode=CType(val,System.String)
			End If
			return
		case FLD_BANKID
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrBankId = Nothing
			Else
				Me.PrBankId=CType(val,System.Int64?)
			End If
			return
		case FLD_COOPCODE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCOOPCode = Nothing
			Else
				Me.PrCOOPCode=CType(val,System.String)
			End If
			return
		case FLD_CREATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=CType(val,System.DateTime?)
			End If
			return
		case FLD_UPDATEDATE
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=CType(val,System.DateTime?)
			End If
			return
		case FLD_UPDATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=CType(val,System.String)
			End If
			return
		case FLD_CREATEUSER
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=CType(val,System.String)
			End If
			return
		case else
			return
		end select

		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try
    End Sub

    Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)
		
		fieldKey = fieldKey.ToLower
		Try
		if  fieldKey=STR_FLD_ACCINFOID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAccInfoId = Nothing
			Else
				Me.PrAccInfoId=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_CONTACTNAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactName = Nothing
			Else
				Me.PrContactName=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_CONTACTPHONE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactPhone = Nothing
			Else
				Me.PrContactPhone=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_CONTACTFAX.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrContactFax = Nothing
			Else
				Me.PrContactFax=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_ACCOUNTID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrAccountID = Nothing
			Else
				Me.PrAccountID=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_SIGNEEEMPLOYEE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrSigneeEmployee = Nothing
			Else
				Me.PrSigneeEmployee=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_COMPANYNAME.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCompanyName = Nothing
			Else
				Me.PrCompanyName=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_COMPANYBANKCODE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCompanyBankCode = Nothing
			Else
				Me.PrCompanyBankCode=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_BANKID.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrBankId = Nothing
			Else
				Me.PrBankId=Convert.ToInt64(val)
			End If
			return
		else if  fieldKey=STR_FLD_COOPCODE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.PrCOOPCode = Nothing
			Else
				Me.PrCOOPCode=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateDate = Nothing
			Else
				Me.CreateDate=Convert.ToDateTime(val)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEDATE.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateDate = Nothing
			Else
				Me.UpdateDate=Convert.ToDateTime(val)
			End If
			return
		else if  fieldKey=STR_FLD_UPDATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.UpdateUser = Nothing
			Else
				Me.UpdateUser=Convert.ToString(val)
			End If
			return
		else if  fieldKey=STR_FLD_CREATEUSER.ToLower() Then
			If Val Is DBNull.Value OrElse Val Is Nothing Then
				Me.CreateUser = Nothing
			Else
				Me.CreateUser=Convert.ToString(val)
			End If
			return
		end If
		Catch ex As Exception
			Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
		End Try

    End Sub

#End Region
#Region "Overrides of GetHashCode, Equals "
	Public Overloads Function Equals(ByVal other As AccountBankInfo) As Boolean _     
		Implements System.IEquatable(Of AccountBankInfo).Equals       
		
			'typesafe equals, checks for equality of fields
			If other Is Nothing Then Return False       
			If other Is Me Then Return True
		
			Return me.PrAccInfoId= other.PrAccInfoId _
				AndAlso me.PrContactName= other.PrContactName _
				AndAlso me.PrContactPhone= other.PrContactPhone _
				AndAlso me.PrContactFax= other.PrContactFax _
				AndAlso me.PrAccountID.GetValueOrDefault = other.PrAccountID.GetValueOrDefault _
				AndAlso me.PrSigneeEmployee= other.PrSigneeEmployee _
				AndAlso me.PrCompanyName= other.PrCompanyName _
				AndAlso me.PrCompanyBankCode= other.PrCompanyBankCode _
				AndAlso me.PrBankId.GetValueOrDefault = other.PrBankId.GetValueOrDefault _
				AndAlso me.PrCOOPCode= other.PrCOOPCode _
				AndAlso me.CreateDate.GetValueOrDefault = other.CreateDate.GetValueOrDefault _
				AndAlso me.UpdateDate.GetValueOrDefault = other.UpdateDate.GetValueOrDefault _
				AndAlso me.UpdateUser= other.UpdateUser _
				AndAlso me.CreateUser= other.CreateUser
				
	End Function
	
	Public Overrides Function GetHashCode() As Integer
        'using Xor has the advantage of not overflowing the integer.
        Return me.PrAccInfoId.GetHashCode _
				Xor me.getStringHashCode(Me.PrContactName) _
				Xor me.getStringHashCode(Me.PrContactPhone) _
				Xor me.getStringHashCode(Me.PrContactFax) _
				Xor me.PrAccountID.GetHashCode _
				Xor me.getStringHashCode(Me.PrSigneeEmployee) _
				Xor me.getStringHashCode(Me.PrCompanyName) _
				Xor me.getStringHashCode(Me.PrCompanyBankCode) _
				Xor me.PrBankId.GetHashCode _
				Xor me.getStringHashCode(Me.PrCOOPCode) _
				Xor me.CreateDate.GetHashCode _
				Xor me.UpdateDate.GetHashCode _
				Xor me.getStringHashCode(Me.UpdateUser) _
				Xor me.getStringHashCode(Me.CreateUser) 
    
    End Function
    
    Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean
		
		Dim temp = TryCast(obj, AccountBankInfo)       
		If temp IsNot Nothing Then 
			Return Me.Equals(temp)
		Else
			Return False
		End If

    End Function
	
	Public Shared Operator =(ByVal obj1 As AccountBankInfo, ByVal obj2 As AccountBankInfo) As Boolean       
		Return Object.Equals(obj1 ,obj2)    
	End Operator    
	
	Public Shared Operator <>(ByVal obj1 As AccountBankInfo, ByVal obj2 As AccountBankInfo) As Boolean       
		Return Not (obj1 = obj2)    
	End Operator

#End Region

#Region "Copy and sort"

	Public Overrides Function copy() as IModelObject
		'creates a shallow copy
        Dim ret as AccountBankInfo =  new AccountBankInfo()
		ret.PrAccInfoId = me.PrAccInfoId
		ret.PrContactName = me.PrContactName
		ret.PrContactPhone = me.PrContactPhone
		ret.PrContactFax = me.PrContactFax
		ret.PrAccountID = me.PrAccountID
		ret.PrSigneeEmployee = me.PrSigneeEmployee
		ret.PrCompanyName = me.PrCompanyName
		ret.PrCompanyBankCode = me.PrCompanyBankCode
		ret.PrBankId = me.PrBankId
		ret.PrCOOPCode = me.PrCOOPCode
		ret.CreateDate = me.CreateDate
		ret.UpdateDate = me.UpdateDate
		ret.UpdateUser = me.UpdateUser
		ret.CreateUser = me.CreateUser
		
		return ret
		
	End Function
	
#End Region

#Region "parentIdChanged"
	'below sub is called when parentIdChanged
	public Overrides Sub handleParentIdChanged(parentMo as Object, e as IDChangedEventArgs)
		' Assocations from VbBusObjects.Account
		if (typeof parentMo is VbBusObjects.Account) Then
			me.PrAccountid= DirectCast(parentMo, VbBusObjects.Account).PrAccountid
		End If
		' Assocations from VbBusObjects.Bank
		if (typeof parentMo is VbBusObjects.Bank) Then
			me.PrBankid= DirectCast(parentMo, VbBusObjects.Bank).PrBankid
		End If
	End Sub
#End Region


#Region "ID Property"
	
    <DataMember>Public NotOverridable Overrides Property Id() As object
        Get
            return me._AccInfoId
        End Get
        Set(ByVal value As object)
             me._AccInfoId = Clng(value)
             me.raiseBroadcastIdChange()
        End Set
    End Property
#End Region
	
#Region "Extra Code"
	
#End Region
	
	End Class

#Region "Req Fields validator"
	<System.Runtime.InteropServices.ComVisible(False)> _
    Public Class AccountBankInfoRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As AccountBankInfo = CType(imo, AccountBankInfo)
			if mo.CreateDate is Nothing then
		Throw new ModelObjectRequiredFieldException("Createdate")
End if 
if mo.UpdateDate is Nothing then
		Throw new ModelObjectRequiredFieldException("Updatedate")
End if 
if String.isNullOrEmpty( mo.UpdateUser) Then
		Throw new ModelObjectRequiredFieldException("Updateuser")
End if 
if String.isNullOrEmpty( mo.CreateUser) Then
		Throw new ModelObjectRequiredFieldException("Createuser")
End if 

			
        End Sub

    End Class
#End Region

End Namespace

