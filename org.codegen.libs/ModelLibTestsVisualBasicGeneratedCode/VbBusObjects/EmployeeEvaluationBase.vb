
'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT
Imports System.Runtime.InteropServices
Imports System.Collections.Generic
Imports System.Xml.Serialization
Imports System.Runtime.Serialization
Imports System.Data.Linq.Mapping
'<comments>
'************************************************************
' Temnplate: ModelBase2.visualBasic.txt
' Class autogenerated on 15/06/2015 4:24:32 PM by ModelGenerator
' Extends base model object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class EmployeeEvaluation
'
'************************************************************
'</comments>
Namespace VbBusObjects
    <Table(Name:="Employee_Evaluation")>
    <DefaultMapperAttr(GetType(EmployeeEvaluationDBMapper)), DataContract, _
    ComVisible(False), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)> _
    Partial Class EmployeeEvaluation
        Inherits ModelObject
        Implements IEquatable(Of EmployeeEvaluation)

#Region "Constructor"

        Friend Sub New()
            Me.addValidator(New EmployeeEvaluationRequiredFieldsValidator)
            Me.Id = ModelObjectKeyGen.nextId()
        End Sub

#End Region

#Region "Children and Parents"

        Public Overrides Sub loadObjectHierarchy()

        End Sub

        Public Overrides Function getChildren() As List(Of ModelObject)
            Dim ret As New List(Of ModelObject)()

            Return ret
        End Function

        Public Overrides Function getParents() As List(Of ModelObject)
            Dim ret As New List(Of ModelObject)()

            Return ret
        End Function

#End Region
#Region "Field CONSTANTS"

        Public Const STR_FLD_EMPLOYEE_EVALUATION_ID As String = "EmployeeEvaluationId"
        Public Const STR_FLD_EVALUATOR_ID As String = "EvaluatorId"
        Public Const STR_FLD_EVALUATION_DATE As String = "EvaluationDate"
        Public Const STR_FLD_EVALUATION_RESULT As String = "EvaluationResult"
        Public Const STR_FLD_EMPLOYEE_ID As String = "EmployeeId"


        Public Const FLD_EMPLOYEE_EVALUATION_ID As Integer = 0
        Public Const FLD_EVALUATOR_ID As Integer = 1
        Public Const FLD_EVALUATION_DATE As Integer = 2
        Public Const FLD_EVALUATION_RESULT As Integer = 3
        Public Const FLD_EMPLOYEE_ID As Integer = 4



        '''<summary> Returns the names of fields in the object as a string array.
        ''' Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
        ''' <returns> string array </returns>	 
        Public Overrides Function getFieldList() As String()
            Return New String() {STR_FLD_EMPLOYEE_EVALUATION_ID, STR_FLD_EVALUATOR_ID, STR_FLD_EVALUATION_DATE, STR_FLD_EVALUATION_RESULT, STR_FLD_EMPLOYEE_ID}
        End Function

#End Region

#Region "Field Declarations"


        Private _EmployeeEvaluationId As System.Int64
        Private _EvaluatorId As System.Int64? = Nothing
        Private _EvaluationDate As System.DateTime? = Nothing
        Private _EvaluationResult As System.Byte()
        Private _EmployeeId As System.Int64? = Nothing


#End Region

#Region "Field Properties"

        <Column(Name:="Employee_Evaluation_Id", Storage:="_EmployeeEvaluationId", IsPrimaryKey:=True, DbType:="int NOT NULL", CanBeNull:=False)> _
    <DataMember> Overridable Property PrEmployeeEvaluationId As System.Int64
            Get
                Return _EmployeeEvaluationId
            End Get
            Set(ByVal value As System.Int64)
                If ModelObject.valueChanged(_EmployeeEvaluationId, value) Then
                    If Me.IsObjectLoading = False Then
                        Me.isDirty = True
                        Me.setFieldChanged(STR_FLD_EMPLOYEE_EVALUATION_ID)
                    End If
                    Me._EmployeeEvaluationId = value

                    Me.raiseBroadcastIdChange()

                End If
            End Set
        End Property
        <Column(Name:="evaluator_id", Storage:="_EvaluatorId", IsPrimaryKey:=False, DbType:="int", CanBeNull:=True)> _
    <DataMember> Overridable Property PrEvaluatorId As System.Int64?
            Get
                Return _EvaluatorId
            End Get
            Set(ByVal value As System.Int64?)
                If ModelObject.valueChanged(_EvaluatorId, value) Then
                    If Me.IsObjectLoading = False Then
                        Me.isDirty = True
                        Me.setFieldChanged(STR_FLD_EVALUATOR_ID)
                    End If
                    Me._EvaluatorId = value

                End If
            End Set
        End Property
        <Column(Name:="evaluation_date", Storage:="_EvaluationDate", IsPrimaryKey:=False, DbType:="datetime", CanBeNull:=True)> _
    <DataMember> Overridable Property PrEvaluationDate As System.DateTime?
            Get
                Return _EvaluationDate
            End Get
            Set(ByVal value As System.DateTime?)
                If ModelObject.valueChanged(_EvaluationDate, value) Then
                    If Me.IsObjectLoading = False Then
                        Me.isDirty = True
                        Me.setFieldChanged(STR_FLD_EVALUATION_DATE)
                    End If
                    Me._EvaluationDate = value

                End If
            End Set
        End Property
        <Column(Name:="evaluation_result", Storage:="_EvaluationResult", IsPrimaryKey:=False, DbType:="varbinary", CanBeNull:=True)> _
    <DataMember> Overridable Property PrEvaluationResult As System.Byte()
            Get
                Return _EvaluationResult
            End Get
            Set(ByVal value As System.Byte())
                If ModelObject.valueChanged(_EvaluationResult, value) Then
                    If Me.IsObjectLoading = False Then
                        Me.isDirty = True
                        Me.setFieldChanged(STR_FLD_EVALUATION_RESULT)
                    End If
                    Me._EvaluationResult = value

                End If
            End Set
        End Property
        <Column(Name:="employee_id", Storage:="_EmployeeId", IsPrimaryKey:=False, DbType:="int", CanBeNull:=True)> _
    <DataMember> Overridable Property PrEmployeeId As System.Int64?
            Get
                Return _EmployeeId
            End Get
            Set(ByVal value As System.Int64?)
                If ModelObject.valueChanged(_EmployeeId, value) Then
                    If Me.IsObjectLoading = False Then
                        Me.isDirty = True
                        Me.setFieldChanged(STR_FLD_EMPLOYEE_ID)
                    End If
                    Me._EmployeeId = value

                End If
            End Set
        End Property

#End Region

#Region "Getters/Setters of values by field index/name"
        Public Overloads Overrides Function getAttribute(ByVal fieldKey As Integer) As Object


            Select Case fieldKey
                Case FLD_EMPLOYEE_EVALUATION_ID
                    Return Me.PrEmployeeEvaluationId
                Case FLD_EVALUATOR_ID
                    Return Me.PrEvaluatorId
                Case FLD_EVALUATION_DATE
                    Return Me.PrEvaluationDate
                Case FLD_EVALUATION_RESULT
                    Return Me.PrEvaluationResult
                Case FLD_EMPLOYEE_ID
                    Return Me.PrEmployeeId
                Case Else
                    Return Nothing
            End Select


        End Function

        Public Overloads Overrides Function getAttribute(ByVal fieldKey As String) As Object
            fieldKey = fieldKey.ToLower

            If fieldKey = STR_FLD_EMPLOYEE_EVALUATION_ID.ToLower() Then
                Return Me.PrEmployeeEvaluationId
            ElseIf fieldKey = STR_FLD_EVALUATOR_ID.ToLower() Then
                Return Me.PrEvaluatorId
            ElseIf fieldKey = STR_FLD_EVALUATION_DATE.ToLower() Then
                Return Me.PrEvaluationDate
            ElseIf fieldKey = STR_FLD_EVALUATION_RESULT.ToLower() Then
                Return Me.PrEvaluationResult
            ElseIf fieldKey = STR_FLD_EMPLOYEE_ID.ToLower() Then
                Return Me.PrEmployeeId
            Else
                Return Nothing
            End If
        End Function

        Public Overloads Overrides Sub setAttribute(ByVal fieldKey As Integer, ByVal val As Object)
            Try
                Select Case fieldKey
                    Case FLD_EMPLOYEE_EVALUATION_ID
                        If Val Is DBNull.Value OrElse Val Is Nothing Then
                            Me.PrEmployeeEvaluationId = Nothing
                        Else
                            Me.PrEmployeeEvaluationId = CType(val, System.Int64)
                        End If
                        Return
                    Case FLD_EVALUATOR_ID
                        If Val Is DBNull.Value OrElse Val Is Nothing Then
                            Me.PrEvaluatorId = Nothing
                        Else
                            Me.PrEvaluatorId = CType(val, System.Int64?)
                        End If
                        Return
                    Case FLD_EVALUATION_DATE
                        If Val Is DBNull.Value OrElse Val Is Nothing Then
                            Me.PrEvaluationDate = Nothing
                        Else
                            Me.PrEvaluationDate = CType(val, System.DateTime?)
                        End If
                        Return
                    Case FLD_EVALUATION_RESULT
                        If Val Is DBNull.Value OrElse Val Is Nothing Then
                            Me.PrEvaluationResult = Nothing
                        Else
                            Me.PrEvaluationResult = CType(val, System.Byte())
                        End If
                        Return
                    Case FLD_EMPLOYEE_ID
                        If Val Is DBNull.Value OrElse Val Is Nothing Then
                            Me.PrEmployeeId = Nothing
                        Else
                            Me.PrEmployeeId = CType(val, System.Int64?)
                        End If
                        Return
                    Case Else
                        Return
                End Select

            Catch ex As Exception
                Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
            End Try
        End Sub

        Public Overloads Overrides Sub setAttribute(ByVal fieldKey As String, ByVal val As Object)

            fieldKey = fieldKey.ToLower
            Try
                If fieldKey = STR_FLD_EMPLOYEE_EVALUATION_ID.ToLower() Then
                    If Val Is DBNull.Value OrElse Val Is Nothing Then
                        Me.PrEmployeeEvaluationId = Nothing
                    Else
                        Me.PrEmployeeEvaluationId = Convert.ToInt64(val)
                    End If
                    Return
                ElseIf fieldKey = STR_FLD_EVALUATOR_ID.ToLower() Then
                    If Val Is DBNull.Value OrElse Val Is Nothing Then
                        Me.PrEvaluatorId = Nothing
                    Else
                        Me.PrEvaluatorId = Convert.ToInt64(val)
                    End If
                    Return
                ElseIf fieldKey = STR_FLD_EVALUATION_DATE.ToLower() Then
                    If Val Is DBNull.Value OrElse Val Is Nothing Then
                        Me.PrEvaluationDate = Nothing
                    Else
                        Me.PrEvaluationDate = Convert.ToDateTime(val)
                    End If
                    Return
                ElseIf fieldKey = STR_FLD_EVALUATION_RESULT.ToLower() Then
                    If Val Is DBNull.Value OrElse Val Is Nothing Then
                        Me.PrEvaluationResult = Nothing
                    Else
                        Me.PrEvaluationResult = CType(val, System.Byte())
                    End If
                    Return
                ElseIf fieldKey = STR_FLD_EMPLOYEE_ID.ToLower() Then
                    If Val Is DBNull.Value OrElse Val Is Nothing Then
                        Me.PrEmployeeId = Nothing
                    Else
                        Me.PrEmployeeId = Convert.ToInt64(val)
                    End If
                    Return
                End If
            Catch ex As Exception
                Throw New ApplicationException(String.Format("Error setting field with index {0}, value ""{1}"" : {2}", fieldKey, val, ex.Message))
            End Try

        End Sub

#End Region
#Region "Overrides of GetHashCode and Equals "
        Public Overloads Function Equals(ByVal other As EmployeeEvaluation) As Boolean _
            Implements System.IEquatable(Of EmployeeEvaluation).Equals

            'typesafe equals, checks for equality of fields
            If other Is Nothing Then Return False
            If other Is Me Then Return True

            Return Me.PrEmployeeEvaluationId = other.PrEmployeeEvaluationId _
                AndAlso Me.PrEvaluatorId.GetValueOrDefault = other.PrEvaluatorId.GetValueOrDefault _
                AndAlso Me.PrEvaluationDate.GetValueOrDefault = other.PrEvaluationDate.GetValueOrDefault _
                AndAlso Me.PrEmployeeId.GetValueOrDefault = other.PrEmployeeId.GetValueOrDefault

        End Function

        Public Overrides Function GetHashCode() As Integer
            'using Xor has the advantage of not overflowing the integer.
            Return Me.PrEmployeeEvaluationId.GetHashCode _
                    Xor Me.PrEvaluatorId.GetHashCode _
                    Xor Me.PrEvaluationDate.GetHashCode _
                    Xor Me.PrEmployeeId.GetHashCode

        End Function

        Public Overloads Overrides Function Equals(ByVal Obj As Object) As Boolean

            Dim temp = TryCast(Obj, EmployeeEvaluation)
            If temp IsNot Nothing Then
                Return Me.Equals(temp)
            Else
                Return False
            End If

        End Function

        Public Shared Operator =(ByVal obj1 As EmployeeEvaluation, ByVal obj2 As EmployeeEvaluation) As Boolean
            Return Object.Equals(obj1, obj2)
        End Operator

        Public Shared Operator <>(ByVal obj1 As EmployeeEvaluation, ByVal obj2 As EmployeeEvaluation) As Boolean
            Return Not (obj1 = obj2)
        End Operator

#End Region

#Region "Copy and sort"

        Public Overrides Function copy() As IModelObject
            'creates a shallow copy
            Dim ret As EmployeeEvaluation = New EmployeeEvaluation()
            ret.PrEmployeeEvaluationId = Me.PrEmployeeEvaluationId
            ret.PrEvaluatorId = Me.PrEvaluatorId
            ret.PrEvaluationDate = Me.PrEvaluationDate
            ret.PrEvaluationResult = Me.PrEvaluationResult
            ret.PrEmployeeId = Me.PrEmployeeId

            Return ret

        End Function

#End Region



#Region "ID Property"

        <DataMember> Public NotOverridable Overrides Property Id() As Object
            Get
                Return Me._EmployeeEvaluationId
            End Get
            Set(ByVal value As Object)
                Me._EmployeeEvaluationId = CLng(value)
                Me.raiseBroadcastIdChange()
            End Set
        End Property
#End Region

#Region "Extra Code"

#End Region

    End Class

#Region "Req Fields validator"
    <System.Runtime.InteropServices.ComVisible(False)> _
 Public Class EmployeeEvaluationRequiredFieldsValidator
        Implements IModelObjectValidator

        Public Sub validate(ByVal imo As org.model.lib.Model.IModelObject) _
                    Implements org.model.lib.IModelObjectValidator.validate

            Dim mo As EmployeeEvaluation = CType(imo, EmployeeEvaluation)


        End Sub

    End Class
#End Region

End Namespace

