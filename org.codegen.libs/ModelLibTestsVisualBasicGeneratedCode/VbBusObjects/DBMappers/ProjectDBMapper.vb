'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

'<comments>
'Template: DBMapperBase.visualBasic.txt
'************************************************************
' Class autogenerated on 13/06/2015 9:04:27 PM by ModelGenerator
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class ProjectDBMapper
'
'************************************************************
'</comments>

Namespace VbBusObjects.DBMappers
    <System.Runtime.InteropServices.ComVisible(False)> _
 Public Class ProjectDBMapper
        Inherits DBMapper

#Region "Constructors "
        Public Sub New(ByVal _dbConn As DBUtils)
            MyBase.new(_dbConn)
        End Sub


        Public Sub New()
            MyBase.new()
        End Sub
#End Region

#Region "Overloaded Functions"

        Public Shadows Function findWhere(ByVal sWhereClause As String, _
                                            ByVal ParamArray params() As Object) As Project

            Return DirectCast(MyBase.findWhere(sWhereClause, params), Project)
        End Function


        Public Sub saveProject(ByVal mo As Project)
            MyBase.save(mo)
        End Sub

        Public Shadows Function findByKey(ByVal keyval As Object) As Project

            Return DirectCast(MyBase.findByKey(keyval), Project)

        End Function

#End Region

#Region "getUpdateDBCommand"
        Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, ByVal sql As String) As IDbCommand

            Dim p As IDataParameter = Nothing
            Dim obj As Project = DirectCast(modelObj, Project)
            Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)
            stmt.Parameters.Add(Me.dbConn.getParameter(Project.STR_FLD_PROJECTNAME, obj.PrProjectName))
            stmt.Parameters.Add(Me.dbConn.getParameter(Project.STR_FLD_ISACTIVE, obj.PrIsActive))
            stmt.Parameters.Add(Me.dbConn.getParameter(Project.STR_FLD_PROJECTTYPEID, CType(IIf(obj.PrProjectTypeId Is Nothing, Nothing, Convert.ToInt64(obj.PrProjectTypeId)), Long?)))

            If obj.isNew Then
            Else
                'only add primary key if we are updating and as the last parameter
                stmt.Parameters.Add(Me.dbConn.getParameter(Project.STR_FLD_PROJECTID, obj.PrProjectId))

            End If '

            Return stmt

        End Function

#End Region
#Region "Save Children Code"
        Public Overrides Sub saveChildren(mo As IModelObject)

            Dim ret As Project = DirectCast(mo, Project)
            '***Child Association:employeeprojects
            If ret._EmployeeProjectsLoaded = True Then
                Dim employeeprojectsMapper As VbBusObjects.DBMappers.EmployeeProjectDBMapper = New VbBusObjects.DBMappers.EmployeeProjectDBMapper(Me.dbConn())
                employeeprojectsMapper.saveList(ret.PrEmployeeProjects())
                employeeprojectsMapper.deleteList(ret.PrEmployeeProjectsGetDeleted())
            End If
        End Sub
#End Region

#Region "Find functions"

        '''	<summary>Given an sql statement, it opens a result set, and for each record returned, it creates and loads a ModelObject. </summary>
        '''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
        ''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
        '''	<param name="params"> Parameter values to be passed to sql statement </param>
        '''	<returns> A List(Of Project) object containing all objects loaded </returns>
        '''	 
        Public Shadows Function findList(ByVal sWhereClause As String, _
                                            ByVal ParamArray params() As Object) _
                                            As List(Of Project)

            Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
            Dim rs As IDataReader = Nothing
            Dim molist As New List(Of Project)

            Try
                rs = dbConn.getDataReaderWithParams(sql, params)
                Me.Loader.DataSource = rs

                Do While rs.Read
                    Dim mo As IModelObject = Me.getModelInstance
                    Me.Loader.load(mo)
                    molist.Add(DirectCast(mo, Project))

                Loop


            Finally
                Me.dbConn.closeDataReader(rs)
            End Try

            Return molist

        End Function

        Public Shadows Function findList(ByVal sWhereClause As String, _
            ByVal params As List(Of IDataParameter)) _
            As List(Of Project)

            Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
            Dim rs As IDataReader = Nothing
            Dim molist As New List(Of Project)

            Try
                rs = dbConn.getDataReader(sql, params)
                Me.Loader.DataSource = rs

                Do While rs.Read
                    Dim mo As IModelObject = Me.getModelInstance
                    Me.Loader.load(mo)
                    molist.Add(DirectCast(mo, Project))

                Loop


            Finally
                Me.dbConn.closeDataReader(rs)
            End Try

            Return molist

        End Function

        '''    
        '''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
        ''' <returns>List(Of Project) </returns>
        Public Function findAll() As List(Of Project)
            Return Me.findList(String.Empty)
        End Function

        Public Overrides Property Loader() As IModelObjectLoader
            Get
                If Me._loader Is Nothing Then
                    Me._loader = New ProjectDataReaderLoader
                End If
                Return Me._loader
            End Get
            Set(value As IModelObjectLoader)
                Me._loader = value
            End Set
        End Property

#End Region

        Protected Overrides Function pkFieldName() As String
            Return "ProjectId"
        End Function

        Public Overrides Function getModelInstance() As IModelObject
            Return New Project()
        End Function

    End Class

#Region " Project Loader "
    <System.Runtime.InteropServices.ComVisible(False)> _
    Public Class ProjectDataReaderLoader
        Inherits DataReaderLoader

        Public Overrides Sub load(ByVal mo As IModelObject)

            Const DATAREADER_FLD_PROJECTID As Integer = 0
            Const DATAREADER_FLD_PROJECTNAME As Integer = 1
            Const DATAREADER_FLD_ISACTIVE As Integer = 2
            Const DATAREADER_FLD_PROJECTTYPEID As Integer = 3


            Dim obj As Project = DirectCast(mo, Project)
            obj.IsObjectLoading = True

            If Me.reader.IsDBNull(DATAREADER_FLD_PROJECTID) = False Then
                obj.PrProjectId = Me.reader.GetInt32(DATAREADER_FLD_PROJECTID)
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_PROJECTNAME) = False Then
                obj.PrProjectName = Me.reader.GetString(DATAREADER_FLD_PROJECTNAME)
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_ISACTIVE) = False Then
                obj.PrIsActive = Me.reader.GetInt32(DATAREADER_FLD_ISACTIVE) <> 0
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_PROJECTTYPEID) = False Then
                obj.PrProjectTypeId = CType(Me.reader.GetInt32(DATAREADER_FLD_PROJECTTYPEID), EnumProjectType?)
            End If


            obj.isNew = False ' since we've just loaded from database, we mark as "old"
            obj.isDirty = False
            obj.IsObjectLoading = False
            obj.afterLoad()

            Return

        End Sub

    End Class

#End Region

    '''<summary>
    ''' Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
    '''</summary>
    <System.Runtime.InteropServices.ComVisible(False)> _
    Public NotInheritable Class ProjectDataUtils

#Region "Shared ""get"" Functions "

        Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
                    As List(Of Project)

            Dim dbm As ProjectDBMapper = New ProjectDBMapper()
            Return dbm.findList(where, params)

        End Function

        Public Shared Function findList(ByVal where As String, ByVal params As List(Of IDataParameter)) _
                                        As List(Of Project)

            Dim dbm As ProjectDBMapper = New ProjectDBMapper()
            Return dbm.findList(where, params)

        End Function

        Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
                    As Project

            Dim dbm As ProjectDBMapper = New ProjectDBMapper()
            Return DirectCast(dbm.findWhere(where, params), Project)

        End Function


        Public Shared Function findList() As List(Of Project)

            Return New ProjectDBMapper().findAll()

        End Function

        Public Shared Function findByKey(id As Object) As Project

            Return DirectCast(New ProjectDBMapper().findByKey(id), Project)

        End Function

        ''' <summary>
        ''' Reload the Project from the database
        ''' </summary>
        ''' <remarks>
        ''' use this method when you want to relad the Project 
        ''' from the database, discarding any changes
        ''' </remarks>
        Public Shared Sub reload(ByRef mo As Project)

            If mo Is Nothing Then
                Throw New System.ArgumentNullException("null object past to reload function")
            End If

            mo = DirectCast(New ProjectDBMapper().findByKey(mo.Id), Project)

        End Sub

#End Region

#Region "Shared Save and Delete Functions"
        ''' <summary>
        ''' Convinience method to save a Project Object.
        ''' Important note: DO NOT CALL THIS IN A LOOP!
        ''' </summary>
        ''' <param name="ProjectObj"></param>
        ''' <remarks>
        ''' Important note: DO NOT CALL THIS IN A LOOP!  
        ''' This method simply instantiates a ProjectDBMapper and calls the save method
        ''' </remarks>
        Public Shared Sub saveProject(ByVal ParamArray ProjectObj() As Project)

            Dim dbm As ProjectDBMapper = New ProjectDBMapper()
            dbm.saveList(ProjectObj.ToList)


        End Sub


        Public Shared Sub deleteProject(ByVal ProjectObj As Project)

            Dim dbm As ProjectDBMapper = New ProjectDBMapper()
            dbm.delete(ProjectObj)

        End Sub
#End Region

#Region "Data Table and data row load/save "
        Public Shared Sub saveProject(ByVal dr As DataRow, _
                                                 Optional ByRef mo As Project = Nothing)

            If mo Is Nothing Then
                mo = New Project()
            End If

            For Each dc As DataColumn In dr.Table.Columns
                mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
            Next

            Call saveProject(mo)

        End Sub


        Public Shared Sub saveProject(ByVal dt As DataTable, _
                                                 Optional ByRef mo As Project = Nothing)

            For Each dr As DataRow In dt.Rows
                Call saveProject(dr, mo)
            Next

        End Sub

        Public Shared Function loadFromDataRow(ByVal r As DataRow) As Project

            Dim a As New DataRowLoader
            Dim mo As IModelObject = New Project()
            a.DataSource = r
            a.load(mo)
            Return DirectCast(mo, Project)

        End Function

#End Region

    End Class

End Namespace

