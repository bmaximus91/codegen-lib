'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

Imports System.Data.Linq.Mapping

'<comments>
'Template: DBMapperBase.visualBasic.txt
'************************************************************
' Class autogenerated on 11/07/2015 12:50:33 PM by ModelGenerator
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class AccountDBMapper
'
'************************************************************
'</comments>
''
Namespace VbBusObjects.DBMappers
	<System.Runtime.InteropServices.ComVisible(False)>
	<Table(Name := "Account")> _
	<SelectObject("Account")><KeyFieldName("accountid")> _
    public Class AccountDBMapper
        Inherits DBMapper
		
#Region "Constructors "
    Public Sub New(ByVal _dbConn As DBUtils)
        MyBase.new(_dbConn)
    End Sub
        
        
    Public Sub New()
        MyBase.new()
    End Sub
#End Region

#Region "Overloaded Functions"
		
	Public Shadows Function findWhere(ByVal sWhereClause As String, _
                                        ByVal ParamArray params() As Object)  As Account
		
        return DirectCast(MyBase.findWhere(sWhereClause, params), Account)
    End Function
        

	Public Sub saveAccount(ByVal mo As Account)
        MyBase.save(mo)
    End Sub
        
    Public Shadows Function findByKey(ByVal keyval As object) As Account

        Return DirectCast(MyBase.findByKey(keyval), Account)

    End Function
        
#End Region

#Region "getUpdateDBCommand"
        Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, ByVal sql As String) As IDbCommand

             Dim p As IDataParameter = Nothing
             Dim obj as Account = DirectCast(modelObj,Account)
             Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_ACCOUNT,obj.PrAccount))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_ACCOUNTTYPEID,obj.PrAccountTypeid))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_BANKACCNUMBER,obj.PrBankaccnumber))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_NEXTCHECKNUMBER,obj.PrNextCheckNumber))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_DESCRIPTION,obj.PrDescription))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_CREATEDATE,obj.CreateDate))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_UPDATEDATE,obj.UpdateDate))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_UPDATEUSER,obj.UpdateUser))
			stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_CREATEUSER,obj.CreateUser))

			If (obj.isNew) Then
			Else
			'only add primary key if we are updating and as the last parameter
				stmt.Parameters.Add(Me.dbConn.getParameter(Account.STR_FLD_ACCOUNTID,obj.PrAccountid))
			End if

             return stmt

        End Function

#End Region
#Region "Save Children Code"
	Public overrides Sub saveChildren(mo as IModelObject )

		 dim ret as Account = DirectCast(mo, Account)
		'** Child Association:bankaccountinfo
		If ret.BankAccountInfoLoaded = True then 
			Dim bankaccountinfoMapper as VbBusObjects.DBMappers.AccountBankInfoDBMapper = new VbBusObjects.DBMappers.AccountBankInfoDBMapper(me.DBConn())
			bankaccountinfoMapper.save(ret.PrBankAccountInfo())
		End if
	End Sub
#End Region

#Region "Find functions"

	'''	<summary>Given an sql statement, it opens a result set, and for each record returned, it creates and loads a ModelObject. </summary>
	'''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
	''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
	'''	<param name="params"> Parameter values to be passed to sql statement </param>
	'''	<returns> A List(Of Account) object containing all objects loaded </returns>
	'''	 
	Public shadows Function findList(ByVal sWhereClause As String, _
										ByVal ParamArray params() As Object) _
										As List(Of Account)

		dim sql as String = Me.getSqlWithWhereClause(sWhereClause)
		Dim rs As IDataReader = Nothing
		Dim molist As New List(Of Account)
						
		Try				
			rs = dbConn.getDataReaderWithParams(sql, params)
            Me.Loader.DataSource = rs
               
			Do While rs.Read
				Dim mo As IModelObject = Me.getModelInstance
				Me.Loader.load(mo)
                molist.Add(DirectCast(mo, Account))
					
			Loop

				
		Finally
			Me.dbConn.closeDataReader(rs)
		End Try

		Return molist

	End Function
    
	Public Shadows Function findList(ByVal sWhereClause As String, _
        ByVal params As List(Of IDataParameter)) _
        As List(Of Account)

        Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
        Dim rs As IDataReader = Nothing
        Dim molist As New List(Of Account)

        Try
            rs = dbConn.getDataReader(sql, params)
            Me.Loader.DataSource = rs

            Do While rs.Read
                Dim mo As IModelObject = Me.getModelInstance
                Me.Loader.load(mo)
                molist.Add(DirectCast(mo, Account))

            Loop


        Finally
            Me.dbConn.closeDataReader(rs)
        End Try

        Return molist

    End Function

	'''    
	'''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
	''' <returns>List(Of Account) </returns>
	Public Function findAll() As List(Of Account)
		Return Me.findList(String.Empty)
	End Function
		
	public Overrides Property Loader() As IModelObjectLoader
		Get
			if me._loader is Nothing then 
				me._loader = New AccountDataReaderLoader
			end If
			return me._loader
        End Get
        Set(value as IModelObjectLoader)
			me._loader = value
        end Set
    End Property

#End Region
		
	Public Overrides Function getModelInstance() As IModelObject
		return new Account()
    End Function
		
End Class

#Region " Account Loader "
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public Class AccountDataReaderLoader
		Inherits DataReaderLoader

			Public Overrides sub load(ByVal mo As IModelObject)

			Const DATAREADER_FLD_ACCOUNTID as Integer = 0
			Const DATAREADER_FLD_ACCOUNT as Integer = 1
			Const DATAREADER_FLD_ACCOUNTTYPEID as Integer = 2
			Const DATAREADER_FLD_BANKACCNUMBER as Integer = 3
			Const DATAREADER_FLD_NEXTCHECKNUMBER as Integer = 4
			Const DATAREADER_FLD_DESCRIPTION as Integer = 5
			Const DATAREADER_FLD_CREATEDATE as Integer = 6
			Const DATAREADER_FLD_UPDATEDATE as Integer = 7
			Const DATAREADER_FLD_UPDATEUSER as Integer = 8
			Const DATAREADER_FLD_CREATEUSER as Integer = 9

			
            Dim obj As Account = directCast(mo, Account)
            obj.IsObjectLoading = True

			if me.reader.IsDBNull(DATAREADER_FLD_ACCOUNTID) = false Then
				obj.PrAccountid = Convert.ToInt64(me.reader.GetInt32(DATAREADER_FLD_ACCOUNTID))
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_ACCOUNT) = false Then
				obj.PrAccount = me.reader.GetString(DATAREADER_FLD_ACCOUNT)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_ACCOUNTTYPEID) = false Then
				obj.PrAccountTypeid = Convert.ToInt64(me.reader.GetInt32(DATAREADER_FLD_ACCOUNTTYPEID))
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_BANKACCNUMBER) = false Then
				obj.PrBankaccnumber = me.reader.GetString(DATAREADER_FLD_BANKACCNUMBER)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_NEXTCHECKNUMBER) = false Then
				obj.PrNextCheckNumber = me.reader.GetString(DATAREADER_FLD_NEXTCHECKNUMBER)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_DESCRIPTION) = false Then
				obj.PrDescription = me.reader.GetString(DATAREADER_FLD_DESCRIPTION)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_CREATEDATE) = false Then
				obj.CreateDate = me.reader.GetDateTime(DATAREADER_FLD_CREATEDATE)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_UPDATEDATE) = false Then
				obj.UpdateDate = me.reader.GetDateTime(DATAREADER_FLD_UPDATEDATE)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_UPDATEUSER) = false Then
				obj.UpdateUser = me.reader.GetString(DATAREADER_FLD_UPDATEUSER)
			End if
			if me.reader.IsDBNull(DATAREADER_FLD_CREATEUSER) = false Then
				obj.CreateUser = me.reader.GetString(DATAREADER_FLD_CREATEUSER)
			End if

            
            obj.isNew = false ' since we've just loaded from database, we mark as "old"
            obj.isDirty = False
			obj.IsObjectLoading = False
			obj.afterLoad()

            return
            
        End sub
	
	End Class

#End Region
		
	'''<summary>
    ''' Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
    '''</summary>
	<System.Runtime.InteropServices.ComVisible(False)> _
	Public NotInheritable Class AccountDataUtils

#Region "Shared ""get"" Functions "

		Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
					As List(Of Account)

            dim dbm as AccountDBMapper = new AccountDBMapper()
            Return dbm.findList(where, params)

        End Function
		
		Public Shared Function findList(ByVal where As String, ByVal params As List(Of IDataParameter)) _
										As List(Of Account)

            Dim dbm As AccountDBMapper = New AccountDBMapper()
            Return dbm.findList(where, params)

        End Function

		Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
					As Account

            Dim dbm As AccountDBMapper = New AccountDBMapper()
            Return DirectCast(dbm.findWhere(where, params), Account)

        End Function
        
        
         Public Shared Function findList() As List(Of Account)
			
			return new AccountDBMapper().findAll()
			
        End Function
        
        Public Shared Function findByKey(id as object) as Account
			
			return DirectCast( new AccountDBMapper().findByKey(id),Account)
                        
        end function
        
		''' <summary>
        ''' Reload the Account from the database
        ''' </summary>
        ''' <remarks>
		''' use this method when you want to relad the Account 
		''' from the database, discarding any changes
		''' </remarks>
		Public Shared Sub reload(ByRef mo As Account)
			
			If mo Is Nothing Then
                Throw New System.ArgumentNullException("null object past to reload function")
            End If
            
			mo = DirectCast(New AccountDBMapper().findByKey(mo.Id), Account)
            
        End Sub

#End Region

#Region "Shared Save and Delete Functions"
		''' <summary>
        ''' Convinience method to save a Account Object.
        ''' Important note: DO NOT CALL THIS IN A LOOP!
        ''' </summary>
        ''' <param name="AccountObj"></param>
        ''' <remarks>
		''' Important note: DO NOT CALL THIS IN A LOOP!  
		''' This method simply instantiates a AccountDBMapper and calls the save method
		''' </remarks>
		public shared sub saveAccount(ByVal ParamArray AccountObj() As Account)
            
            dim dbm as AccountDBMapper = new AccountDBMapper()
            dbm.saveList(AccountObj.ToList)

                       
       end sub
       

       public shared sub deleteAccount(ByVal AccountObj As Account)
            
            dim dbm as AccountDBMapper = new AccountDBMapper()
            dbm.delete(AccountObj)
            
        end sub
#End Region

#Region "Data Table and data row load/save "        
        Public Shared Sub saveAccount(ByVal dr As DataRow, _
                                                 Optional ByRef mo As Account = Nothing)

            if mo is Nothing then 
				mo = new Account()
			end if
			
            For Each dc As DataColumn In dr.Table.Columns
                mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
            Next

            call saveAccount(mo)

        End Sub
        
         
        Public Shared Sub saveAccount(ByVal dt As DataTable, _
                                                 Optional ByRef mo As Account = Nothing)

            For Each dr As DataRow In dt.Rows
            	call saveAccount(dr,mo)
            Next
			
        End Sub
        
		 Public Shared Function loadFromDataRow(ByVal r As DataRow) As Account

            Dim a As New DataRowLoader
            Dim mo As IModelObject = new Account()
            a.DataSource = r
            a.load(mo)
            Return DirectCast(mo, Account)

        End Function

#End Region

    End Class
	
End Namespace

