'NOTE: DO NOT ADD REFERENCES TO COM.NETU.LIB HERE, INSTEAD ADD
'THE IMPORT ON THE REFERENCES OF THE PROJECT

'<comments>
'Template: DBMapperBase.visualBasic.txt
'************************************************************
' Class autogenerated on 30-May-15 9:52:36 AM by ModelGenerator
' Extends base DBMapperBase object class
' *** DO NOT change code in this class.  
'     It will be re-generated and 
'     overwritten by the code generator ****
' Instead, change code in the extender class EmployeeInfoDBMapper
'
'************************************************************
'</comments>

Namespace VbBusObjects.DBMappers
    <System.Runtime.InteropServices.ComVisible(False)> _
 Public Class EmployeeInfoDBMapper
        Inherits DBMapper

#Region "Constructors "
        Public Sub New(ByVal _dbConn As DBUtils)
            MyBase.new(_dbConn)
        End Sub


        Public Sub New()
            MyBase.new()
        End Sub
#End Region

#Region "Overloaded Functions"

        Public Shadows Function findWhere(ByVal sWhereClause As String, _
                                          ByVal ParamArray params() As Object) As EmployeeInfo

            Return DirectCast(MyBase.findWhere(sWhereClause, params), EmployeeInfo)
        End Function


        Public Sub saveEmployeeInfo(ByVal mo As EmployeeInfo)
            MyBase.save(mo)
        End Sub

        Public Shadows Function findByKey(ByVal keyval As Object) As EmployeeInfo

            Return DirectCast(MyBase.findByKey(keyval), EmployeeInfo)

        End Function

#End Region


#Region "getUpdateDBCommand"
        Public Overrides Function getUpdateDBCommand(ByVal modelObj As IModelObject, ByVal sql As String) As IDbCommand

            Dim p As IDataParameter = Nothing
            Dim obj As EmployeeInfo = DirectCast(modelObj, EmployeeInfo)
            Dim stmt As IDbCommand = Me.dbConn.getCommand(sql)
            stmt.Parameters.Add(Me.dbConn.getParameter("@EIEmployeeId", obj.PrEIEmployeeId))
            stmt.Parameters.Add(Me.dbConn.getParameter("@Salary", obj.PrSalary))
            stmt.Parameters.Add(Me.dbConn.getParameter("@Address", obj.PrAddress))

            If obj.isNew Then
            Else
                'only add primary key if we are updating and as the last parameter
                stmt.Parameters.Add(Me.dbConn.getParameter("@EmployeeInfoId", obj.PrEmployeeInfoId))

            End If '

            Return stmt

        End Function

#End Region


#Region "Find functions"

        '''	<summary>Given an sql statement, it opens a result set, and for each record returned, it creates and loads a ModelObject. </summary>
        '''	<param name="sWhereClause">where clause to be applied to "selectall" statement 
        ''' that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
        '''	<param name="params"> Parameter values to be passed to sql statement </param>
        '''	<returns> A List(Of EmployeeInfo) object containing all objects loaded </returns>
        '''	 
        Public Shadows Function findList(ByVal sWhereClause As String, _
                                            ByVal ParamArray params() As Object) _
                                            As List(Of EmployeeInfo)

            Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
            Dim rs As IDataReader = Nothing
            Dim molist As New List(Of EmployeeInfo)

            Try
                rs = dbConn.getDataReaderWithParams(sql, params)
                Me.Loader.DataSource = rs

                Do While rs.Read
                    Dim mo As IModelObject = Me.getModelInstance
                    Me.Loader.load(mo)
                    molist.Add(DirectCast(mo, EmployeeInfo))

                Loop


            Finally
                Me.dbConn.closeDataReader(rs)
            End Try

            Return molist

        End Function

        Public Shadows Function findList(ByVal sWhereClause As String, _
           ByVal params As List(Of IDataParameter)) _
           As List(Of EmployeeInfo)

            Dim sql As String = Me.getSqlWithWhereClause(sWhereClause)
            Dim rs As IDataReader = Nothing
            Dim molist As New List(Of EmployeeInfo)

            Try
                rs = dbConn.getDataReader(sql, params)
                Me.Loader.DataSource = rs

                Do While rs.Read
                    Dim mo As IModelObject = Me.getModelInstance
                    Me.Loader.load(mo)
                    molist.Add(DirectCast(mo, EmployeeInfo))

                Loop


            Finally
                Me.dbConn.closeDataReader(rs)
            End Try

            Return molist

        End Function
        '''    
        '''	 <summary>Returns all records from database for a coresponding ModelObject </summary>
        ''' <returns>List(Of EmployeeInfo) </returns>
        Public Function findAll() As List(Of EmployeeInfo)
            Return Me.findList(String.Empty)
        End Function

        Public Overrides Property Loader() As IModelObjectLoader
            Get
                If Me._loader Is Nothing Then
                    Me._loader = New EmployeeInfoDataReaderLoader
                End If
                Return Me._loader
            End Get
            Set(value As IModelObjectLoader)
                Me._loader = value
            End Set
        End Property

#End Region

        Public Overrides Function getModelInstance() As IModelObject
            Return New EmployeeInfo()
        End Function

    End Class

#Region " EmployeeInfo Loader "
    <System.Runtime.InteropServices.ComVisible(False)> _
    Public Class EmployeeInfoDataReaderLoader
        Inherits DataReaderLoader

        Public Overrides Sub load(ByVal mo As IModelObject)

            Const DATAREADER_FLD_EMPLOYEEINFOID As Integer = 0
            Const DATAREADER_FLD_EIEMPLOYEEID As Integer = 1
            Const DATAREADER_FLD_SALARY As Integer = 2
            Const DATAREADER_FLD_ADDRESS As Integer = 3


            Dim obj As EmployeeInfo = DirectCast(mo, EmployeeInfo)
            obj.IsObjectLoading = True

            If Me.reader.IsDBNull(DATAREADER_FLD_EMPLOYEEINFOID) = False Then
                obj.PrEmployeeInfoId = Me.reader.GetInt32(DATAREADER_FLD_EMPLOYEEINFOID)
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_EIEMPLOYEEID) = False Then
                obj.PrEIEmployeeId = Me.reader.GetInt32(DATAREADER_FLD_EIEMPLOYEEID)
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_SALARY) = False Then
                obj.PrSalary = Me.reader.GetDecimal(DATAREADER_FLD_SALARY)
            End If
            If Me.reader.IsDBNull(DATAREADER_FLD_ADDRESS) = False Then
                obj.PrAddress = Me.reader.GetString(DATAREADER_FLD_ADDRESS)
            End If


            obj.isNew = False ' since we've just loaded from database, we mark as "old"
            obj.isDirty = False
            obj.IsObjectLoading = False
            obj.afterLoad()

            Return

        End Sub

    End Class

#End Region

    '''<summary>
    ''' Final Class with convinience shared methods for loading/saving the EmployeeRank ModelObject. 
    '''</summary>
    <System.Runtime.InteropServices.ComVisible(False)> _
    Public NotInheritable Class EmployeeInfoDataUtils

#Region "Shared ""get"" Functions "

        Public Shared Function findList(ByVal where As String, ByVal ParamArray params() As Object) _
                    As List(Of EmployeeInfo)

            Dim dbm As EmployeeInfoDBMapper = New EmployeeInfoDBMapper()
            Return dbm.findList(where, params)

        End Function

        Public Shared Function findList(ByVal where As String, ByVal params As List(Of IDataParameter)) _
                                        As List(Of EmployeeInfo)

            Dim dbm As EmployeeInfoDBMapper = New EmployeeInfoDBMapper()
            Return dbm.findList(where, params)

        End Function

        Public Shared Function findOne(ByVal where As String, ByVal ParamArray params() As Object) _
                    As EmployeeInfo

            Dim dbm As EmployeeInfoDBMapper = New EmployeeInfoDBMapper()
            Return DirectCast(dbm.findWhere(where, params), EmployeeInfo)

        End Function


        Public Shared Function findList() As List(Of EmployeeInfo)

            Return New EmployeeInfoDBMapper().findAll()

        End Function

        Public Shared Function findByKey(id As Object) As EmployeeInfo

            Return DirectCast(New EmployeeInfoDBMapper().findByKey(id), EmployeeInfo)

        End Function

        ''' <summary>
        ''' Reload the EmployeeInfo from the database
        ''' </summary>
        ''' <remarks>
        ''' use this method when you want to relad the EmployeeInfo 
        ''' from the database, discarding any changes
        ''' </remarks>
        Public Shared Sub reload(ByRef mo As EmployeeInfo)

            If mo Is Nothing Then
                Throw New System.ArgumentNullException("null object past to reload function")
            End If

            mo = DirectCast(New EmployeeInfoDBMapper().findByKey(mo.Id), EmployeeInfo)

        End Sub

#End Region

#Region "Shared Save and Delete Functions"
        ''' <summary>
        ''' Convinience method to save a EmployeeInfo Object.
        ''' Important note: DO NOT CALL THIS IN A LOOP!
        ''' </summary>
        ''' <param name="EmployeeInfoObj"></param>
        ''' <remarks>
        ''' Important note: DO NOT CALL THIS IN A LOOP!  
        ''' This method simply instantiates a EmployeeInfoDBMapper and calls the save method
        ''' </remarks>
        Public Shared Sub saveEmployeeInfo(ByVal ParamArray EmployeeInfoObj() As EmployeeInfo)

            Dim dbm As EmployeeInfoDBMapper = New EmployeeInfoDBMapper()
            dbm.saveList(EmployeeInfoObj.ToList)


        End Sub


        Public Shared Sub deleteEmployeeInfo(ByVal EmployeeInfoObj As EmployeeInfo)

            Dim dbm As EmployeeInfoDBMapper = New EmployeeInfoDBMapper()
            dbm.delete(EmployeeInfoObj)

        End Sub
#End Region

#Region "Data Table and data row load/save "
        Public Shared Sub saveEmployeeInfo(ByVal dr As DataRow, _
                                                 Optional ByRef mo As EmployeeInfo = Nothing)

            If mo Is Nothing Then
                mo = New EmployeeInfo()
            End If

            For Each dc As DataColumn In dr.Table.Columns
                mo.setAttribute(dc.ColumnName, dr.Item(dc.ColumnName))
            Next

            Call saveEmployeeInfo(mo)

        End Sub


        Public Shared Sub saveEmployeeInfo(ByVal dt As DataTable, _
                                                 Optional ByRef mo As EmployeeInfo = Nothing)

            For Each dr As DataRow In dt.Rows
                Call saveEmployeeInfo(dr, mo)
            Next

        End Sub

        Public Shared Function loadFromDataRow(ByVal r As DataRow) As EmployeeInfo

            Dim a As New DataRowLoader
            Dim mo As IModelObject = New EmployeeInfo()
            a.DataSource = r
            a.load(mo)
            Return DirectCast(mo, EmployeeInfo)

        End Function

#End Region

    End Class

End Namespace

