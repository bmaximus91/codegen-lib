
Imports System.Text
Imports System.Collections.Generic
Imports Microsoft.VisualStudio.TestTools.UnitTesting


'<comments>
'Template: TestTemplate.visualbasic.txt
'************************************************************
' Class autogenerated on 5/16/2015 8:52:57 AM by ModelGenerator
' DO NOT MODIFY CODE IN THIS CLASS
'************************************************************
'</comments>
<TestClass()> Public Class EmployeeTestBase

    Private testContextInstance As TestContext

    '''<summary>
    '''Gets/sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext

#Region "Additional test attributes"
    ' You can use the following additional attributes as you write your tests:
    ' Use ClassInitialize to run code before running the first test in the class
    <ClassInitialize()> Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
        ModelContext.newForUnitTests()
    End Sub
    '
    ' Use ClassCleanup to run code after all tests in a class have run
    <ClassCleanup()> Public Shared Sub MyClassCleanup()
        ModelContext.release()
    End Sub

    'Use TestInitialize to run code before running each test
    '<TestInitialize()> _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    ' Use TestCleanup to run code after each test has run
    <TestCleanup()> Public Sub MyTestCleanup()
    End Sub
    '
#End Region

    <TestMethod()> Public Sub TestLoadAndSaveEmployee()
		
		ModelContext.beginTrans()
		Try

			Dim pid As Object = ModelContext.CurrentDBUtils.getObjectValue("select top 1 EmployeeId from Employee")
			If pid is Nothing Then
				Assert.Inconclusive("No Employee in database, table is empty")
			Else

				Dim pdb As New EmployeeDBMapper()
				Dim p As Employee = pdb.findByKey(pid)
				Dim p2 As Employee = directCast(p.copy(),Employee)

				'Test equality and hash codes
				Assert.AreEqual(p.GetHashCode(), p2.GetHashCode())
				Assert.AreEqual(p, p2)
						
				p.isDirty = True 'force save
				pdb.save(p)
			
				'now reload object from database
				p = Nothing
				p = pdb.findByKey(pid)
            
				'test fields to be equal before and after save
						Assert.IsTrue(p.PrEmployeeId = p2.PrEmployeeId,"Expected Field PrEmployeeId to be equal")
		Assert.IsTrue(p.PrEmployeeName = p2.PrEmployeeName,"Expected Field PrEmployeeName to be equal")
		Assert.IsTrue(p.PrEmployeeRankId.GetValueOrDefault = p2.PrEmployeeRankId.GetValueOrDefault,"Expected Field PrEmployeeRankId to be equal")
		Assert.IsTrue(p.PrSalary.GetValueOrDefault = p2.PrSalary.GetValueOrDefault,"Expected Field PrSalary to be equal")
		Assert.IsTrue(p.PrAddress = p2.PrAddress,"Expected Field PrAddress to be equal")
		Assert.IsTrue(p.PrTelephone = p2.PrTelephone,"Expected Field PrTelephone to be equal")
		Assert.IsTrue(p.PrMobile = p2.PrMobile,"Expected Field PrMobile to be equal")
		Assert.IsTrue(p.PrIdNumber = p2.PrIdNumber,"Expected Field PrIdNumber to be equal")
		Assert.IsTrue(p.PrSSINumber = p2.PrSSINumber,"Expected Field PrSSINumber to be equal")
		Assert.IsTrue(p.PrHireDate.GetValueOrDefault = p2.PrHireDate.GetValueOrDefault,"Expected Field PrHireDate to be equal")
		Assert.IsTrue(p.PrNumDependents.GetValueOrDefault = p2.PrNumDependents.GetValueOrDefault,"Expected Field PrNumDependents to be equal")
		Assert.IsTrue(p.PrEmployeeTypeCode = p2.PrEmployeeTypeCode,"Expected Field PrEmployeeTypeCode to be equal")
		Assert.IsTrue(p.CreateDate.GetValueOrDefault = p2.CreateDate.GetValueOrDefault,"Expected Field CreateDate to be equal")
		Assert.IsFalse(p.UpdateDate.GetValueOrDefault = p2.UpdateDate.GetValueOrDefault,"Expected Field UpdateDate NOT to be equal")
		Assert.IsTrue(p.CreateUser = p2.CreateUser,"Expected Field CreateUser to be equal")
		'skip update user!
		Assert.IsTrue(p.PrSampleGuidField.GetValueOrDefault = p2.PrSampleGuidField.GetValueOrDefault,"Expected Field PrSampleGuidField to be equal")
		Assert.IsTrue(p.PrIsActive = p2.PrIsActive,"Expected Field PrIsActive to be equal")
		Assert.IsTrue(p.PrSampleBigInt.GetValueOrDefault = p2.PrSampleBigInt.GetValueOrDefault,"Expected Field PrSampleBigInt to be equal")
		Assert.IsTrue(p.PrSampleSmallInt.GetValueOrDefault = p2.PrSampleSmallInt.GetValueOrDefault,"Expected Field PrSampleSmallInt to be equal")
		Assert.IsTrue(p.PrSampleNumericFieldInt.GetValueOrDefault = p2.PrSampleNumericFieldInt.GetValueOrDefault,"Expected Field PrSampleNumericFieldInt to be equal")
		Assert.IsTrue(p.PrSampleNumericField2Decimals.GetValueOrDefault = p2.PrSampleNumericField2Decimals.GetValueOrDefault,"Expected Field PrSampleNumericField2Decimals to be equal")

					Assert.isTrue(p.PrRank isNot Nothing)
	Assert.isTrue(p.PrEmployeeInfo isNot Nothing)
	Assert.isTrue(p.PrEmployeeProjects isNot Nothing)

				
				p.isDirty = True 'to force save
				ModelContext.Current.saveModelObject(p)
				p = ModelContext.Current.loadModelObject(Of Employee)(p.Id)
				
			End If

		Finally
            ModelContext.rollbackTrans() 'Nothing should be saved to the database!
        End Try

    End Sub

End Class

