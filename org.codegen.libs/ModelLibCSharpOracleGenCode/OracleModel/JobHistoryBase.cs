using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.Serialization;
using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;
using System.Data.Linq.Mapping;
using System.ComponentModel.DataAnnotations;

//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class JobHistory
//
//************************************************************
//</comments>
namespace OracleModel {

	[Table(Name = "JOB_HISTORY")]
	[DataContract][SelectObject("JOB_HISTORY")][KeyFieldName("JOB_HISTORY_ID")]
	[DefaultMapperAttr(typeof(OracleMappers.JobHistoryDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	partial class JobHistory:ModelObject,IEquatable<JobHistory> ,IAuditable {

		#region "Constructor"

		public JobHistory() {
			this.Id = ModelObjectKeyGen.nextId();
			this.addValidator(new JobHistoryRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		public override void loadObjectHierarchy() {

		}

		/// <summary>
		/// Returns the **loaded** children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_JOB_HISTORY_ID = "JobHistoryId";
			public const String STR_FLD_EMPLOYEE_ID = "EmployeeId";
			public const String STR_FLD_START_DATE = "StartDate";
			public const String STR_FLD_END_DATE = "EndDate";
			public const String STR_FLD_JOB_ID = "JobId";
			public const String STR_FLD_DEPARTMENT_ID = "DepartmentId";
			public const String STR_FLD_CREATE_DATE = "CreateDate";
			public const String STR_FLD_UPDATE_DATE = "UpdateDate";
			public const String STR_FLD_CREATE_USER = "CreateUser";
			public const String STR_FLD_UPDATE_USER = "UpdateUser";


				public const int FLD_JOB_HISTORY_ID = 0;
		public const int FLD_EMPLOYEE_ID = 1;
		public const int FLD_START_DATE = 2;
		public const int FLD_END_DATE = 3;
		public const int FLD_JOB_ID = 4;
		public const int FLD_DEPARTMENT_ID = 5;
		public const int FLD_CREATE_DATE = 6;
		public const int FLD_UPDATE_DATE = 7;
		public const int FLD_CREATE_USER = 8;
		public const int FLD_UPDATE_USER = 9;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_JOB_HISTORY_ID,STR_FLD_EMPLOYEE_ID,STR_FLD_START_DATE,STR_FLD_END_DATE,STR_FLD_JOB_ID,STR_FLD_DEPARTMENT_ID,STR_FLD_CREATE_DATE,STR_FLD_UPDATE_DATE,STR_FLD_CREATE_USER,STR_FLD_UPDATE_USER
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _JobHistoryId;
	private System.Int64? _EmployeeId = null;
	private System.DateTime? _StartDate = null;
	private System.DateTime? _EndDate = null;
	private System.String _JobId;
	private System.Int64? _DepartmentId = null;
	private System.DateTime? _CreateDate = null;
	private System.DateTime? _UpdateDate = null;
	private System.String _CreateUser;
	private System.String _UpdateUser;

		#endregion

		#region "Field Properties"

		//Field JOB_HISTORY_ID
	[Required][Column(Name="JOB_HISTORY_ID",Storage = "_JobHistoryId", IsPrimaryKey=true,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.Int64 PrJobHistoryId{
	get{
		return _JobHistoryId;
	}
	set {
		if (ModelObject.valueChanged(_JobHistoryId, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_JOB_HISTORY_ID);
			}
		this._JobHistoryId = value;

			this.raiseBroadcastIdChange();

		}
		}
	}
		//Field EMPLOYEE_ID
	[Key][Required][Column(Name="EMPLOYEE_ID",Storage = "_EmployeeId", IsPrimaryKey=false,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.Int64? PrEmployeeId{
	get{
		return _EmployeeId;
	}
	set {
		if (ModelObject.valueChanged(_EmployeeId, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEE_ID);
			}
		this._EmployeeId = value;

		}
		}
	}
		//Field START_DATE
	[Key][Required][Column(Name="START_DATE",Storage = "_StartDate", IsPrimaryKey=false,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.DateTime? PrStartDate{
	get{
		return _StartDate;
	}
	set {
		if (ModelObject.valueChanged(_StartDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_START_DATE);
			}
		this._StartDate = value;

		}
		}
	}
		//Field END_DATE
	[Key][Required][Column(Name="END_DATE",Storage = "_EndDate", IsPrimaryKey=false,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.DateTime? PrEndDate{
	get{
		return _EndDate;
	}
	set {
		if (ModelObject.valueChanged(_EndDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_END_DATE);
			}
		this._EndDate = value;

		}
		}
	}
		//Field JOB_ID
	[Key][Required][StringLength(10, ErrorMessage="JOB_ID must be 10 characters or less")][Column(Name="JOB_ID",Storage = "_JobId", IsPrimaryKey=false,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.String PrJobId{
	get{
		return _JobId;
	}
	set {
		if (ModelObject.valueChanged(_JobId, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("JOB_ID");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_JOB_ID);
			}
		this._JobId = value;

		}
		}
	}
		//Field DEPARTMENT_ID
	[Key][Column(Name="DEPARTMENT_ID",Storage = "_DepartmentId", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.Int64? PrDepartmentId{
	get{
		return _DepartmentId;
	}
	set {
		if (ModelObject.valueChanged(_DepartmentId, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_DEPARTMENT_ID);
			}
		this._DepartmentId = value;

		}
		}
	}
		//Field CREATE_DATE
	[Key][Column(Name="CREATE_DATE",Storage = "_CreateDate", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.DateTime? CreateDate{
	get{
		return _CreateDate;
	}
	set {
		if (ModelObject.valueChanged(_CreateDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_DATE);
			}
		this._CreateDate = value;

		}
		}
	}
		//Field UPDATE_DATE
	[Key][Column(Name="UPDATE_DATE",Storage = "_UpdateDate", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.DateTime? UpdateDate{
	get{
		return _UpdateDate;
	}
	set {
		if (ModelObject.valueChanged(_UpdateDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_DATE);
			}
		this._UpdateDate = value;

		}
		}
	}
		//Field CREATE_USER
	[Key][StringLength(10, ErrorMessage="CREATE_USER must be 10 characters or less")][Column(Name="CREATE_USER",Storage = "_CreateUser", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String CreateUser{
	get{
		return _CreateUser;
	}
	set {
		if (ModelObject.valueChanged(_CreateUser, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("CREATE_USER");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_USER);
			}
		this._CreateUser = value;

		}
		}
	}
		//Field UPDATE_USER
	[Key][StringLength(10, ErrorMessage="UPDATE_USER must be 10 characters or less")][Column(Name="UPDATE_USER",Storage = "_UpdateUser", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String UpdateUser{
	get{
		return _UpdateUser;
	}
	set {
		if (ModelObject.valueChanged(_UpdateUser, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("UPDATE_USER");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_USER);
			}
		this._UpdateUser = value;

		}
		}
	}

		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_JOB_HISTORY_ID:
			return this.PrJobHistoryId;
		case FLD_EMPLOYEE_ID:
			return this.PrEmployeeId;
		case FLD_START_DATE:
			return this.PrStartDate;
		case FLD_END_DATE:
			return this.PrEndDate;
		case FLD_JOB_ID:
			return this.PrJobId;
		case FLD_DEPARTMENT_ID:
			return this.PrDepartmentId;
		case FLD_CREATE_DATE:
			return this.CreateDate;
		case FLD_UPDATE_DATE:
			return this.UpdateDate;
		case FLD_CREATE_USER:
			return this.CreateUser;
		case FLD_UPDATE_USER:
			return this.UpdateUser;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_JOB_HISTORY_ID.ToLower() ) {
			return this.PrJobHistoryId;
		} else if (fieldKey==STR_FLD_EMPLOYEE_ID.ToLower() ) {
			return this.PrEmployeeId;
		} else if (fieldKey==STR_FLD_START_DATE.ToLower() ) {
			return this.PrStartDate;
		} else if (fieldKey==STR_FLD_END_DATE.ToLower() ) {
			return this.PrEndDate;
		} else if (fieldKey==STR_FLD_JOB_ID.ToLower() ) {
			return this.PrJobId;
		} else if (fieldKey==STR_FLD_DEPARTMENT_ID.ToLower() ) {
			return this.PrDepartmentId;
		} else if (fieldKey==STR_FLD_CREATE_DATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATE_DATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_CREATE_USER.ToLower() ) {
			return this.CreateUser;
		} else if (fieldKey==STR_FLD_UPDATE_USER.ToLower() ) {
			return this.UpdateUser;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
			try {
		switch (fieldKey) {
		case FLD_JOB_HISTORY_ID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrJobHistoryId=(System.Int64)val;
			} //
			return;
		case FLD_EMPLOYEE_ID:
			if (val == DBNull.Value || val == null ){
				this.PrEmployeeId = null;
			} else {
				this.PrEmployeeId=(System.Int64?)val;
			} //
			return;
		case FLD_START_DATE:
			if (val == DBNull.Value || val == null ){
				this.PrStartDate = null;
			} else {
				this.PrStartDate=(System.DateTime?)val;
			} //
			return;
		case FLD_END_DATE:
			if (val == DBNull.Value || val == null ){
				this.PrEndDate = null;
			} else {
				this.PrEndDate=(System.DateTime?)val;
			} //
			return;
		case FLD_JOB_ID:
			if (val == DBNull.Value || val == null ){
				this.PrJobId = null;
			} else {
				this.PrJobId=(System.String)val;
			} //
			return;
		case FLD_DEPARTMENT_ID:
			if (val == DBNull.Value || val == null ){
				this.PrDepartmentId = null;
			} else {
				this.PrDepartmentId=(System.Int64?)val;
			} //
			return;
		case FLD_CREATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_UPDATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_CREATE_USER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			} //
			return;
		case FLD_UPDATE_USER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			} //
			return;
		default:
			return;
		}

			} catch ( Exception ex ) {
				throw new ApplicationException(
						String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
								fieldKey, val, ex.Message));
			}
		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
			try {
		if ( fieldKey==STR_FLD_JOB_HISTORY_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrJobHistoryId=Convert.ToInt64(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEE_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEmployeeId = null;
			} else {
				this.PrEmployeeId=Convert.ToInt64(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_START_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrStartDate = null;
			} else {
				this.PrStartDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_END_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEndDate = null;
			} else {
				this.PrEndDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_JOB_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrJobId = null;
			} else {
				this.PrJobId=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_DEPARTMENT_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrDepartmentId = null;
			} else {
				this.PrDepartmentId=Convert.ToInt64(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=Convert.ToString(val);
			}
			return;
		}
			} catch ( Exception ex ) {
				throw new ApplicationException(
					String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
							fieldKey, val, ex.Message));
			}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(JobHistory other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.PrJobHistoryId == other.PrJobHistoryId
				&& this.PrEmployeeId.GetValueOrDefault() == other.PrEmployeeId.GetValueOrDefault()
				&& this.PrStartDate.GetValueOrDefault() == other.PrStartDate.GetValueOrDefault()
				&& this.PrEndDate.GetValueOrDefault() == other.PrEndDate.GetValueOrDefault()
				&& this.PrJobId == other.PrJobId
				&& this.PrDepartmentId.GetValueOrDefault() == other.PrDepartmentId.GetValueOrDefault()
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.CreateUser == other.CreateUser
				&& this.UpdateUser == other.UpdateUser;;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.PrJobHistoryId.GetHashCode()
				 ^ this.PrEmployeeId.GetHashCode()
				 ^ this.PrStartDate.GetHashCode()
				 ^ this.PrEndDate.GetHashCode()
				 ^ this.getStringHashCode(this.PrJobId)
				 ^ this.PrDepartmentId.GetHashCode()
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.CreateUser)
				 ^ this.getStringHashCode(this.UpdateUser);;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is JobHistory) {

				return this.Equals((JobHistory)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(JobHistory obj1, JobHistory obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(JobHistory obj1, JobHistory obj2) {
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy() {
			//creates a copy
			JobHistory ret = new JobHistory();
		ret.PrJobHistoryId = this.PrJobHistoryId;
		ret.PrEmployeeId = this.PrEmployeeId;
		ret.PrStartDate = this.PrStartDate;
		ret.PrEndDate = this.PrEndDate;
		ret.PrJobId = this.PrJobId;
		ret.PrDepartmentId = this.PrDepartmentId;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.CreateUser = this.CreateUser;
		ret.UpdateUser = this.UpdateUser;

			return ret;

		}

		#endregion

#region "parentIdChanged"
	//below sub is called when parentIdChanged
	public override void handleParentIdChanged(Object parentMo, IDChangedEventArgs e){
		// Assocations from OracleModel.Employee
		if ( parentMo is OracleModel.Employee) {
			this.PrEmployeeId= ((OracleModel.Employee)parentMo).PrEmployeeId;
		}
	}
#endregion



		#region "ID Property"

		[DataMember]public sealed override object Id {
			get { return this._JobHistoryId; }
			set {
				this._JobHistoryId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class JobHistoryRequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			JobHistory mo = (JobHistory)imo;
if (mo.PrEmployeeId == null ) {
		throw new ModelObjectRequiredFieldException("EmployeeId");
}
if (mo.PrStartDate == null ) {
		throw new ModelObjectRequiredFieldException("StartDate");
}
if (mo.PrEndDate == null ) {
		throw new ModelObjectRequiredFieldException("EndDate");
}
if (string.IsNullOrEmpty( mo.PrJobId)) {
		throw new ModelObjectRequiredFieldException("JobId");
}

		}

	}
	#endregion

}


