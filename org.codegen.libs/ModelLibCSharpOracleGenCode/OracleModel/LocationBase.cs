using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.Serialization;
using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;
using System.Data.Linq.Mapping;
using System.ComponentModel.DataAnnotations;


//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
//</comments>
namespace OracleModel {

	[Table(Name = "LOCATIONS")]
	[DataContract][SelectObject("LOCATIONS")][KeyFieldName("LOCATION_ID")]
	[DefaultMapperAttr(typeof(OracleMappers.LocationDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	partial class Location:ModelObject,IEquatable<Location> ,IAuditable {

		#region "Constructor"

		public Location() {
			this.Id = ModelObjectKeyGen.nextId();
			this.addValidator(new LocationRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		public override void loadObjectHierarchy() {

		}

		/// <summary>
		/// Returns the *loaded* children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_LOCATION_ID = "LocationId";
			public const String STR_FLD_STREET_ADDRESS = "StreetAddress";
			public const String STR_FLD_POSTAL_CODE = "PostalCode";
			public const String STR_FLD_CITY = "CITY";
			public const String STR_FLD_STATE_PROVINCE = "StateProvince";
			public const String STR_FLD_COUNTRY_ID = "CountryId";
			public const String STR_FLD_CREATE_DATE = "CreateDate";
			public const String STR_FLD_UPDATE_DATE = "UpdateDate";
			public const String STR_FLD_CREATE_USER = "CreateUser";
			public const String STR_FLD_UPDATE_USER = "UpdateUser";


				public const int FLD_LOCATION_ID = 0;
		public const int FLD_STREET_ADDRESS = 1;
		public const int FLD_POSTAL_CODE = 2;
		public const int FLD_CITY = 3;
		public const int FLD_STATE_PROVINCE = 4;
		public const int FLD_COUNTRY_ID = 5;
		public const int FLD_CREATE_DATE = 6;
		public const int FLD_UPDATE_DATE = 7;
		public const int FLD_CREATE_USER = 8;
		public const int FLD_UPDATE_USER = 9;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_LOCATION_ID,STR_FLD_STREET_ADDRESS,STR_FLD_POSTAL_CODE,STR_FLD_CITY,STR_FLD_STATE_PROVINCE,STR_FLD_COUNTRY_ID,STR_FLD_CREATE_DATE,STR_FLD_UPDATE_DATE,STR_FLD_CREATE_USER,STR_FLD_UPDATE_USER
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _LocationId;
	private System.String _StreetAddress;
	private System.String _PostalCode;
	private System.String _CITY;
	private System.String _StateProvince;
	private System.String _CountryId;
	private System.DateTime? _CreateDate = null;
	private System.DateTime? _UpdateDate = null;
	private System.String _CreateUser;
	private System.String _UpdateUser;

		#endregion

		#region "Field Properties"

		//Field LOCATION_ID
	[Required][Column(Name="LOCATION_ID",Storage = "_LocationId", IsPrimaryKey=true,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.Int64 PrLocationId{
	get{
		return _LocationId;
	}
	set {
		if (ModelObject.valueChanged(_LocationId, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_LOCATION_ID);
			}
		this._LocationId = value;

			this.raiseBroadcastIdChange();

		}
		}
	}
		//Field STREET_ADDRESS
	[Key][StringLength(40, ErrorMessage="STREET_ADDRESS must be 40 characters or less")][Column(Name="STREET_ADDRESS",Storage = "_StreetAddress", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String PrStreetAddress{
	get{
		return _StreetAddress;
	}
	set {
		if (ModelObject.valueChanged(_StreetAddress, value)){
		if (value != null && value.Length > 40){
			throw new ModelObjectFieldTooLongException("STREET_ADDRESS");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_STREET_ADDRESS);
			}
		this._StreetAddress = value;

		}
		}
	}
		//Field POSTAL_CODE
	[Key][StringLength(12, ErrorMessage="POSTAL_CODE must be 12 characters or less")][Column(Name="POSTAL_CODE",Storage = "_PostalCode", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String PrPostalCode{
	get{
		return _PostalCode;
	}
	set {
		if (ModelObject.valueChanged(_PostalCode, value)){
		if (value != null && value.Length > 12){
			throw new ModelObjectFieldTooLongException("POSTAL_CODE");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_POSTAL_CODE);
			}
		this._PostalCode = value;

		}
		}
	}
		//Field CITY
	[Key][Required][StringLength(30, ErrorMessage="CITY must be 30 characters or less")][Column(Name="CITY",Storage = "_CITY", IsPrimaryKey=false,DbType = " NOT NULL",CanBeNull = false)]
	[DataMember]public virtual System.String PrCITY{
	get{
		return _CITY;
	}
	set {
		if (ModelObject.valueChanged(_CITY, value)){
		if (value != null && value.Length > 30){
			throw new ModelObjectFieldTooLongException("CITY");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CITY);
			}
		this._CITY = value;

		}
		}
	}
		//Field STATE_PROVINCE
	[Key][StringLength(25, ErrorMessage="STATE_PROVINCE must be 25 characters or less")][Column(Name="STATE_PROVINCE",Storage = "_StateProvince", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String PrStateProvince{
	get{
		return _StateProvince;
	}
	set {
		if (ModelObject.valueChanged(_StateProvince, value)){
		if (value != null && value.Length > 25){
			throw new ModelObjectFieldTooLongException("STATE_PROVINCE");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_STATE_PROVINCE);
			}
		this._StateProvince = value;

		}
		}
	}
		//Field COUNTRY_ID
	[Key][StringLength(2, ErrorMessage="COUNTRY_ID must be 2 characters or less")][Column(Name="COUNTRY_ID",Storage = "_CountryId", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String PrCountryId{
	get{
		return _CountryId;
	}
	set {
		if (ModelObject.valueChanged(_CountryId, value)){
		if (value != null && value.Length > 2){
			throw new ModelObjectFieldTooLongException("COUNTRY_ID");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_COUNTRY_ID);
			}
		this._CountryId = value;

		}
		}
	}
		//Field CREATE_DATE
	[Key][Column(Name="CREATE_DATE",Storage = "_CreateDate", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.DateTime? CreateDate{
	get{
		return _CreateDate;
	}
	set {
		if (ModelObject.valueChanged(_CreateDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_DATE);
			}
		this._CreateDate = value;

		}
		}
	}
		//Field UPDATE_DATE
	[Key][Column(Name="UPDATE_DATE",Storage = "_UpdateDate", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.DateTime? UpdateDate{
	get{
		return _UpdateDate;
	}
	set {
		if (ModelObject.valueChanged(_UpdateDate, value)){
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_DATE);
			}
		this._UpdateDate = value;

		}
		}
	}
		//Field CREATE_USER
	[Key][StringLength(20, ErrorMessage="CREATE_USER must be 20 characters or less")][Column(Name="CREATE_USER",Storage = "_CreateUser", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String CreateUser{
	get{
		return _CreateUser;
	}
	set {
		if (ModelObject.valueChanged(_CreateUser, value)){
		if (value != null && value.Length > 20){
			throw new ModelObjectFieldTooLongException("CREATE_USER");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_USER);
			}
		this._CreateUser = value;

		}
		}
	}
		//Field UPDATE_USER
	[Key][StringLength(20, ErrorMessage="UPDATE_USER must be 20 characters or less")][Column(Name="UPDATE_USER",Storage = "_UpdateUser", IsPrimaryKey=false,DbType = "",CanBeNull = true)]
	[DataMember]public virtual System.String UpdateUser{
	get{
		return _UpdateUser;
	}
	set {
		if (ModelObject.valueChanged(_UpdateUser, value)){
		if (value != null && value.Length > 20){
			throw new ModelObjectFieldTooLongException("UPDATE_USER");
		}
			if (!this.IsObjectLoading) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_USER);
			}
		this._UpdateUser = value;

		}
		}
	}

		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_LOCATION_ID:
			return this.PrLocationId;
		case FLD_STREET_ADDRESS:
			return this.PrStreetAddress;
		case FLD_POSTAL_CODE:
			return this.PrPostalCode;
		case FLD_CITY:
			return this.PrCITY;
		case FLD_STATE_PROVINCE:
			return this.PrStateProvince;
		case FLD_COUNTRY_ID:
			return this.PrCountryId;
		case FLD_CREATE_DATE:
			return this.CreateDate;
		case FLD_UPDATE_DATE:
			return this.UpdateDate;
		case FLD_CREATE_USER:
			return this.CreateUser;
		case FLD_UPDATE_USER:
			return this.UpdateUser;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_LOCATION_ID.ToLower() ) {
			return this.PrLocationId;
		} else if (fieldKey==STR_FLD_STREET_ADDRESS.ToLower() ) {
			return this.PrStreetAddress;
		} else if (fieldKey==STR_FLD_POSTAL_CODE.ToLower() ) {
			return this.PrPostalCode;
		} else if (fieldKey==STR_FLD_CITY.ToLower() ) {
			return this.PrCITY;
		} else if (fieldKey==STR_FLD_STATE_PROVINCE.ToLower() ) {
			return this.PrStateProvince;
		} else if (fieldKey==STR_FLD_COUNTRY_ID.ToLower() ) {
			return this.PrCountryId;
		} else if (fieldKey==STR_FLD_CREATE_DATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATE_DATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_CREATE_USER.ToLower() ) {
			return this.CreateUser;
		} else if (fieldKey==STR_FLD_UPDATE_USER.ToLower() ) {
			return this.UpdateUser;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
			try {
		switch (fieldKey) {
		case FLD_LOCATION_ID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrLocationId=(System.Int64)val;
			} //
			return;
		case FLD_STREET_ADDRESS:
			if (val == DBNull.Value || val == null ){
				this.PrStreetAddress = null;
			} else {
				this.PrStreetAddress=(System.String)val;
			} //
			return;
		case FLD_POSTAL_CODE:
			if (val == DBNull.Value || val == null ){
				this.PrPostalCode = null;
			} else {
				this.PrPostalCode=(System.String)val;
			} //
			return;
		case FLD_CITY:
			if (val == DBNull.Value || val == null ){
				this.PrCITY = null;
			} else {
				this.PrCITY=(System.String)val;
			} //
			return;
		case FLD_STATE_PROVINCE:
			if (val == DBNull.Value || val == null ){
				this.PrStateProvince = null;
			} else {
				this.PrStateProvince=(System.String)val;
			} //
			return;
		case FLD_COUNTRY_ID:
			if (val == DBNull.Value || val == null ){
				this.PrCountryId = null;
			} else {
				this.PrCountryId=(System.String)val;
			} //
			return;
		case FLD_CREATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_UPDATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_CREATE_USER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			} //
			return;
		case FLD_UPDATE_USER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			} //
			return;
		default:
			return;
		}

			} catch ( Exception ex ) {
				throw new ApplicationException(
						String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
								fieldKey, val, ex.Message));
			}
		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
			try {
		if ( fieldKey==STR_FLD_LOCATION_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrLocationId=Convert.ToInt64(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_STREET_ADDRESS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrStreetAddress = null;
			} else {
				this.PrStreetAddress=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_POSTAL_CODE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrPostalCode = null;
			} else {
				this.PrPostalCode=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CITY.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCITY = null;
			} else {
				this.PrCITY=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_STATE_PROVINCE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrStateProvince = null;
			} else {
				this.PrStateProvince=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_COUNTRY_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCountryId = null;
			} else {
				this.PrCountryId=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=Convert.ToString(val);
			}
			return;
		}
			} catch ( Exception ex ) {
				throw new ApplicationException(
					String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
							fieldKey, val, ex.Message));
			}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(Location other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.PrLocationId == other.PrLocationId
				&& this.PrStreetAddress == other.PrStreetAddress
				&& this.PrPostalCode == other.PrPostalCode
				&& this.PrCITY == other.PrCITY
				&& this.PrStateProvince == other.PrStateProvince
				&& this.PrCountryId == other.PrCountryId
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.CreateUser == other.CreateUser
				&& this.UpdateUser == other.UpdateUser;;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.PrLocationId.GetHashCode()
				 ^ this.getStringHashCode(this.PrStreetAddress)
				 ^ this.getStringHashCode(this.PrPostalCode)
				 ^ this.getStringHashCode(this.PrCITY)
				 ^ this.getStringHashCode(this.PrStateProvince)
				 ^ this.getStringHashCode(this.PrCountryId)
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.CreateUser)
				 ^ this.getStringHashCode(this.UpdateUser);;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is Location) {

				return this.Equals((Location)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(Location obj1, Location obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(Location obj1, Location obj2) {
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy() {
			//creates a copy
			Location ret = new Location();
		ret.PrLocationId = this.PrLocationId;
		ret.PrStreetAddress = this.PrStreetAddress;
		ret.PrPostalCode = this.PrPostalCode;
		ret.PrCITY = this.PrCITY;
		ret.PrStateProvince = this.PrStateProvince;
		ret.PrCountryId = this.PrCountryId;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.CreateUser = this.CreateUser;
		ret.UpdateUser = this.UpdateUser;

			return ret;

		}

		#endregion




		#region "ID Property"

		[DataMember]public sealed override object Id {
			get { return this._LocationId; }
			set {
				this._LocationId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class LocationRequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			Location mo = (Location)imo;
if (string.IsNullOrEmpty( mo.PrCITY)) {
		throw new ModelObjectRequiredFieldException("CITY");
}

		}

	}
	#endregion

}


