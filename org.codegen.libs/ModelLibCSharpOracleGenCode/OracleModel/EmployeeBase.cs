using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;

using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;

//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class Employee
//
//************************************************************
//</comments>
namespace OracleModel
{

	#region "Interface"
[System.Runtime.InteropServices.ComVisible(false)] 
	public interface IEmployee: IModelObject {
	System.Int64 PrEmployeeId {get;set;} 
	System.String PrFirstName {get;set;} 
	System.String PrLastName {get;set;} 
	System.String PrEMAIL {get;set;} 
	System.String PrPhoneNumber {get;set;} 
	System.DateTime? PrHireDate {get;set;} 
	System.String PrJobId {get;set;} 
	System.Decimal? PrSALARY {get;set;} 
	System.Decimal? PrCommissionPct {get;set;} 
	System.Int64? PrManagerId {get;set;} 
	System.Int64? PrDepartmentId {get;set;} 
	System.DateTime? CreateDate {get;set;} 
	System.DateTime? UpdateDate {get;set;} 
	System.String CreateUser {get;set;} 
	System.String UpdateUser {get;set;} 
	System.Int64? PrLocationId {get;set;} 
	System.String PrCountryId {get;set;} 
	System.String PrDepartmentName {get;set;} 
	System.String PrJobTitle {get;set;} 
	System.String PrCITY {get;set;} 
	System.String PrStateProvince {get;set;} 
	System.String PrCountryName {get;set;} 
	System.String PrRegionName {get;set;} 
	System.String PrManagerName {get;set;} 
	IEnumerable< OracleModel.JobHistory>PrJobHistory {get; set;}
		void PrJobHistoryAdd(OracleModel.JobHistory val);
		void PrJobHistoryRemove(OracleModel.JobHistory val);
		IEnumerable<OracleModel.JobHistory> PrJobHistoryGetDeleted();
		OracleModel.JobHistory PrJobHistoryGetAt( int i ) ;

	OracleModel.Department PrDepartment {get;set;} //association
	IEnumerable< OracleModel.EmployeeTrainingHistory>PrCourses {get; set;}
		void PrCoursesAdd(OracleModel.EmployeeTrainingHistory val);
		void PrCoursesRemove(OracleModel.EmployeeTrainingHistory val);
		IEnumerable<OracleModel.EmployeeTrainingHistory> PrCoursesGetDeleted();
		OracleModel.EmployeeTrainingHistory PrCoursesGetAt( int i ) ;

	IEnumerable< OracleModel.EmployeeTrainingHistory>PrTrainingHistory {get; set;}
		void PrTrainingHistoryAdd(OracleModel.EmployeeTrainingHistory val);
		void PrTrainingHistoryRemove(OracleModel.EmployeeTrainingHistory val);
		IEnumerable<OracleModel.EmployeeTrainingHistory> PrTrainingHistoryGetDeleted();
		OracleModel.EmployeeTrainingHistory PrTrainingHistoryGetAt( int i ) ;

}
#endregion

	
	[DefaultMapperAttr(typeof(OracleMappers.EmployeeDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	public class EmployeeBase : ModelObject, IEquatable<EmployeeBase>, IAuditable,IEmployee {

		#region "Constructor"

		public EmployeeBase() {
			this.addValidator(new EmployeeRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		public override void loadObjectHierarchy() {
		loadJobHistory();
		loadDepartment();
		loadCourses();
		loadTrainingHistory();

		}

		/// <summary>
		/// Returns the **loaded** children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
				if  (this.JobHistoryLoaded) { // check if loaded first!
		List< ModelObject > lp = this._JobHistory.ConvertAll(
				new Converter< OracleModel.JobHistory, ModelObject>((
			OracleModel.JobHistory pf )=> {				return (ModelObject)pf;}));
		ret.AddRange(lp);
	}
	if  (this.CoursesLoaded) { // check if loaded first!
		List< ModelObject > lp = this._Courses.ConvertAll(
				new Converter< OracleModel.EmployeeTrainingHistory, ModelObject>((
			OracleModel.EmployeeTrainingHistory pf )=> {				return (ModelObject)pf;}));
		ret.AddRange(lp);
	}
	if  (this.TrainingHistoryLoaded) { // check if loaded first!
		List< ModelObject > lp = this._TrainingHistory.ConvertAll(
				new Converter< OracleModel.EmployeeTrainingHistory, ModelObject>((
			OracleModel.EmployeeTrainingHistory pf )=> {				return (ModelObject)pf;}));
		ret.AddRange(lp);
	}

			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			if  ( this._Department!=null && this.DepartmentLoaded) {
	ret.Add(this.PrDepartment);
}

			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_EMPLOYEE_ID = "EmployeeId";
			public const String STR_FLD_FIRST_NAME = "FirstName";
			public const String STR_FLD_LAST_NAME = "LastName";
			public const String STR_FLD_EMAIL = "EMAIL";
			public const String STR_FLD_PHONE_NUMBER = "PhoneNumber";
			public const String STR_FLD_HIRE_DATE = "HireDate";
			public const String STR_FLD_JOB_ID = "JobId";
			public const String STR_FLD_SALARY = "SALARY";
			public const String STR_FLD_COMMISSION_PCT = "CommissionPct";
			public const String STR_FLD_MANAGER_ID = "ManagerId";
			public const String STR_FLD_DEPARTMENT_ID = "DepartmentId";
			public const String STR_FLD_CREATE_DATE = "CreateDate";
			public const String STR_FLD_UPDATE_DATE = "UpdateDate";
			public const String STR_FLD_CREATE_USER = "CreateUser";
			public const String STR_FLD_UPDATE_USER = "UpdateUser";
			public const String STR_FLD_LOCATION_ID = "LocationId";
			public const String STR_FLD_COUNTRY_ID = "CountryId";
			public const String STR_FLD_DEPARTMENT_NAME = "DepartmentName";
			public const String STR_FLD_JOB_TITLE = "JobTitle";
			public const String STR_FLD_CITY = "CITY";
			public const String STR_FLD_STATE_PROVINCE = "StateProvince";
			public const String STR_FLD_COUNTRY_NAME = "CountryName";
			public const String STR_FLD_REGION_NAME = "RegionName";
			public const String STR_FLD_MANAGER_NAME = "ManagerName";


				public const int FLD_EMPLOYEE_ID = 0;
		public const int FLD_FIRST_NAME = 1;
		public const int FLD_LAST_NAME = 2;
		public const int FLD_EMAIL = 3;
		public const int FLD_PHONE_NUMBER = 4;
		public const int FLD_HIRE_DATE = 5;
		public const int FLD_JOB_ID = 6;
		public const int FLD_SALARY = 7;
		public const int FLD_COMMISSION_PCT = 8;
		public const int FLD_MANAGER_ID = 9;
		public const int FLD_DEPARTMENT_ID = 10;
		public const int FLD_CREATE_DATE = 11;
		public const int FLD_UPDATE_DATE = 12;
		public const int FLD_CREATE_USER = 13;
		public const int FLD_UPDATE_USER = 14;
		public const int FLD_LOCATION_ID = 15;
		public const int FLD_COUNTRY_ID = 16;
		public const int FLD_DEPARTMENT_NAME = 17;
		public const int FLD_JOB_TITLE = 18;
		public const int FLD_CITY = 19;
		public const int FLD_STATE_PROVINCE = 20;
		public const int FLD_COUNTRY_NAME = 21;
		public const int FLD_REGION_NAME = 22;
		public const int FLD_MANAGER_NAME = 23;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_EMPLOYEE_ID,STR_FLD_FIRST_NAME,STR_FLD_LAST_NAME,STR_FLD_EMAIL,STR_FLD_PHONE_NUMBER,STR_FLD_HIRE_DATE,STR_FLD_JOB_ID,STR_FLD_SALARY,STR_FLD_COMMISSION_PCT,STR_FLD_MANAGER_ID,STR_FLD_DEPARTMENT_ID,STR_FLD_CREATE_DATE,STR_FLD_UPDATE_DATE,STR_FLD_CREATE_USER,STR_FLD_UPDATE_USER,STR_FLD_LOCATION_ID,STR_FLD_COUNTRY_ID,STR_FLD_DEPARTMENT_NAME,STR_FLD_JOB_TITLE,STR_FLD_CITY,STR_FLD_STATE_PROVINCE,STR_FLD_COUNTRY_NAME,STR_FLD_REGION_NAME,STR_FLD_MANAGER_NAME
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _EmployeeId;
	private System.String _FirstName = null;
	private System.String _LastName = null;
	private System.String _EMAIL = null;
	private System.String _PhoneNumber = null;
	private System.DateTime? _HireDate = null;
	private System.String _JobId = null;
	private System.Decimal? _SALARY = null;
	private System.Decimal? _CommissionPct = null;
	private System.Int64? _ManagerId = null;
	private System.Int64? _DepartmentId = null;
	private System.DateTime? _CreateDate = null;
	private System.DateTime? _UpdateDate = null;
	private System.String _CreateUser = null;
	private System.String _UpdateUser = null;
	private System.Int64? _LocationId = null;
	private System.String _CountryId = null;
	private System.String _DepartmentName = null;
	private System.String _JobTitle = null;
	private System.String _CITY = null;
	private System.String _StateProvince = null;
	private System.String _CountryName = null;
	private System.String _RegionName = null;
	private System.String _ManagerName = null;
	// ****** CHILD OBJECTS ********************
	private List< OracleModel.JobHistory> _JobHistory = null;  // initialize to nothing, for lazy load logic below !!!
	 private List< OracleModel.JobHistory> _deletedJobHistory = new List< OracleModel.JobHistory>();// initialize to empty list !!!
	private OracleModel.Department _Department = null;  // initialize to nothing, for lazy load logic below !!!
	private List< OracleModel.EmployeeTrainingHistory> _Courses = null;  // initialize to nothing, for lazy load logic below !!!
	 private List< OracleModel.EmployeeTrainingHistory> _deletedCourses = new List< OracleModel.EmployeeTrainingHistory>();// initialize to empty list !!!
	private List< OracleModel.EmployeeTrainingHistory> _TrainingHistory = null;  // initialize to nothing, for lazy load logic below !!!
	 private List< OracleModel.EmployeeTrainingHistory> _deletedTrainingHistory = new List< OracleModel.EmployeeTrainingHistory>();// initialize to empty list !!!

	// *****************************************
	// ****** END CHILD OBJECTS ********************

		#endregion

		#region "Field Properties"

	public virtual System.Int64 PrEmployeeId  {
	get {
		return _EmployeeId;
	} 
	set {
		if (ModelObject.valueChanged(_EmployeeId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEE_ID);
			}
			this._EmployeeId = value;

			this.raiseBroadcastIdChange();

		}
	}  
	}
public void setEmployeeId(String val){
	if (Information.IsNumeric(val)) {
		this.PrEmployeeId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		throw new ApplicationException("Cant update Primary Key to Null");
	} else {
		throw new ApplicationException("Invalid Integer Number, field:EmployeeId, value:" + val);
	}
}
	public virtual System.String PrFirstName  {
	get {
		return _FirstName;
	} 
	set {
		if (ModelObject.valueChanged(_FirstName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_FIRST_NAME);
			}
			this._FirstName = value;

		}
	}  
	}
public void setFirstName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrFirstName = val;
	} else {
		this.PrFirstName = null;
	}
}
	public virtual System.String PrLastName  {
	get {
		return _LastName;
	} 
	set {
		if (ModelObject.valueChanged(_LastName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_LAST_NAME);
			}
			this._LastName = value;

		}
	}  
	}
public void setLastName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrLastName = val;
	} else {
		this.PrLastName = null;
	}
}
	public virtual System.String PrEMAIL  {
	get {
		return _EMAIL;
	} 
	set {
		if (ModelObject.valueChanged(_EMAIL, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMAIL);
			}
			this._EMAIL = value;

		}
	}  
	}
public void setEMAIL( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrEMAIL = val;
	} else {
		this.PrEMAIL = null;
	}
}
	public virtual System.String PrPhoneNumber  {
	get {
		return _PhoneNumber;
	} 
	set {
		if (ModelObject.valueChanged(_PhoneNumber, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_PHONE_NUMBER);
			}
			this._PhoneNumber = value;

		}
	}  
	}
public void setPhoneNumber( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrPhoneNumber = val;
	} else {
		this.PrPhoneNumber = null;
	}
}
	public virtual System.DateTime? PrHireDate  {
	get {
		return _HireDate;
	} 
	set {
		if (ModelObject.valueChanged(_HireDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_HIRE_DATE);
			}
			this._HireDate = value;

		}
	}  
	}
public void setHireDate( String val ){
	if (Information.IsDate(val)) {
		this.PrHireDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.PrHireDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:HireDate, value:" + val);
	}
}
	public virtual System.String PrJobId  {
	get {
		return _JobId;
	} 
	set {
		if (ModelObject.valueChanged(_JobId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_JOB_ID);
			}
			this._JobId = value;

		}
	}  
	}
public void setJobId( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrJobId = val;
	} else {
		this.PrJobId = null;
	}
}
	public virtual System.Decimal? PrSALARY  {
	get {
		return _SALARY;
	} 
	set {
		if (ModelObject.valueChanged(_SALARY, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SALARY);
			}
			this._SALARY = value;

		}
	}  
	}
public void setSALARY(String val ){
	if (Information.IsNumeric(val)) {
		this.PrSALARY =  Convert.ToDecimal(val);
	} else if ( string.IsNullOrEmpty(val) ) {
		this.PrSALARY = null;
	} else {
		throw new ApplicationException("Invalid Decimal Number, field:SALARY, value:" + val);
	}
}
	public virtual System.Decimal? PrCommissionPct  {
	get {
		return _CommissionPct;
	} 
	set {
		if (ModelObject.valueChanged(_CommissionPct, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_COMMISSION_PCT);
			}
			this._CommissionPct = value;

		}
	}  
	}
public void setCommissionPct(String val ){
	if (Information.IsNumeric(val)) {
		this.PrCommissionPct =  Convert.ToDecimal(val);
	} else if ( string.IsNullOrEmpty(val) ) {
		this.PrCommissionPct = null;
	} else {
		throw new ApplicationException("Invalid Decimal Number, field:CommissionPct, value:" + val);
	}
}
	public virtual System.Int64? PrManagerId  {
	get {
		return _ManagerId;
	} 
	set {
		if (ModelObject.valueChanged(_ManagerId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_MANAGER_ID);
			}
			this._ManagerId = value;

		}
	}  
	}
public void setManagerId(String val){
	if (Information.IsNumeric(val)) {
		this.PrManagerId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrManagerId = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:ManagerId, value:" + val);
	}
}
	public virtual System.Int64? PrDepartmentId  {
	get {
		return _DepartmentId;
	} 
	set {
		if (ModelObject.valueChanged(_DepartmentId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_DEPARTMENT_ID);
			}
			this._DepartmentId = value;

		}
	}  
	}
public void setDepartmentId(String val){
	if (Information.IsNumeric(val)) {
		this.PrDepartmentId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrDepartmentId = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:DepartmentId, value:" + val);
	}
}
	public virtual System.DateTime? CreateDate  {
	get {
		return _CreateDate;
	} 
	set {
		if (ModelObject.valueChanged(_CreateDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_DATE);
			}
			this._CreateDate = value;

		}
	}  
	}
public void setCreateDate( String val ){
	if (Information.IsDate(val)) {
		this.CreateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.CreateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:CreateDate, value:" + val);
	}
}
	public virtual System.DateTime? UpdateDate  {
	get {
		return _UpdateDate;
	} 
	set {
		if (ModelObject.valueChanged(_UpdateDate, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_DATE);
			}
			this._UpdateDate = value;

		}
	}  
	}
public void setUpdateDate( String val ){
	if (Information.IsDate(val)) {
		this.UpdateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.UpdateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:UpdateDate, value:" + val);
	}
}
	public virtual System.String CreateUser  {
	get {
		return _CreateUser;
	} 
	set {
		if (ModelObject.valueChanged(_CreateUser, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATE_USER);
			}
			this._CreateUser = value;

		}
	}  
	}
public void setCreateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.CreateUser = val;
	} else {
		this.CreateUser = null;
	}
}
	public virtual System.String UpdateUser  {
	get {
		return _UpdateUser;
	} 
	set {
		if (ModelObject.valueChanged(_UpdateUser, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATE_USER);
			}
			this._UpdateUser = value;

		}
	}  
	}
public void setUpdateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.UpdateUser = val;
	} else {
		this.UpdateUser = null;
	}
}
	public virtual System.Int64? PrLocationId  {
	get {
		return _LocationId;
	} 
	set {
		if (ModelObject.valueChanged(_LocationId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_LOCATION_ID);
			}
			this._LocationId = value;

		}
	}  
	}
public void setLocationId(String val){
	if (Information.IsNumeric(val)) {
		this.PrLocationId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrLocationId = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:LocationId, value:" + val);
	}
}
	public virtual System.String PrCountryId  {
	get {
		return _CountryId;
	} 
	set {
		if (ModelObject.valueChanged(_CountryId, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_COUNTRY_ID);
			}
			this._CountryId = value;

		}
	}  
	}
public void setCountryId( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrCountryId = val;
	} else {
		this.PrCountryId = null;
	}
}
	public virtual System.String PrDepartmentName  {
	get {
		return _DepartmentName;
	} 
	set {
		if (ModelObject.valueChanged(_DepartmentName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_DEPARTMENT_NAME);
			}
			this._DepartmentName = value;

		}
	}  
	}
public void setDepartmentName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrDepartmentName = val;
	} else {
		this.PrDepartmentName = null;
	}
}
	public virtual System.String PrJobTitle  {
	get {
		return _JobTitle;
	} 
	set {
		if (ModelObject.valueChanged(_JobTitle, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_JOB_TITLE);
			}
			this._JobTitle = value;

		}
	}  
	}
public void setJobTitle( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrJobTitle = val;
	} else {
		this.PrJobTitle = null;
	}
}
	public virtual System.String PrCITY  {
	get {
		return _CITY;
	} 
	set {
		if (ModelObject.valueChanged(_CITY, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CITY);
			}
			this._CITY = value;

		}
	}  
	}
public void setCITY( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrCITY = val;
	} else {
		this.PrCITY = null;
	}
}
	public virtual System.String PrStateProvince  {
	get {
		return _StateProvince;
	} 
	set {
		if (ModelObject.valueChanged(_StateProvince, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_STATE_PROVINCE);
			}
			this._StateProvince = value;

		}
	}  
	}
public void setStateProvince( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrStateProvince = val;
	} else {
		this.PrStateProvince = null;
	}
}
	public virtual System.String PrCountryName  {
	get {
		return _CountryName;
	} 
	set {
		if (ModelObject.valueChanged(_CountryName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_COUNTRY_NAME);
			}
			this._CountryName = value;

		}
	}  
	}
public void setCountryName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrCountryName = val;
	} else {
		this.PrCountryName = null;
	}
}
	public virtual System.String PrRegionName  {
	get {
		return _RegionName;
	} 
	set {
		if (ModelObject.valueChanged(_RegionName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_REGION_NAME);
			}
			this._RegionName = value;

		}
	}  
	}
public void setRegionName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrRegionName = val;
	} else {
		this.PrRegionName = null;
	}
}
	public virtual System.String PrManagerName  {
	get {
		return _ManagerName;
	} 
	set {
		if (ModelObject.valueChanged(_ManagerName, value)) {
			if (!this.IsObjectLoading ) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_MANAGER_NAME);
			}
			this._ManagerName = value;

		}
	}  
	}
public void setManagerName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrManagerName = val;
	} else {
		this.PrManagerName = null;
	}
}

		// ASSOCIATIONS GETTERS/SETTERS BELOW!
		//associationChildManyCSharp.txt
		#region "Association JobHistory"

		public bool JobHistoryLoaded  {get; private set;}

		public virtual OracleModel.JobHistory PrJobHistoryGetAt( int i ) {

            this.loadJobHistory();
            if( this._JobHistory.Count >= (i - 1)) {
                return this._JobHistory[i];
            }
            return null;

        } //End Function        
		
		public virtual void PrJobHistoryAdd( OracleModel.JobHistory val )  {
			//1-Many , add a single item!
			this.loadJobHistory();
			val.PrEmployeeId = this.PrEmployeeId;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			this.IDChanged += val.handleParentIdChanged;
			this._JobHistory.Add(val);

        }

		public virtual void PrJobHistoryClear() {

            this.loadJobHistory();
            this._deletedJobHistory.AddRange(this._JobHistory);
            this._JobHistory.Clear();

        }

		public virtual void PrJobHistoryRemove( OracleModel.JobHistory val ) {
			
			this.loadJobHistory();
			this._deletedJobHistory.Add(val);
			this._JobHistory.Remove(val);

        }
		
		public virtual IEnumerable< OracleModel.JobHistory >PrJobHistoryGetDeleted() {
			
			return this._deletedJobHistory;

        }

        public virtual IEnumerable< OracleModel.JobHistory > PrJobHistory {

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._JobHistory == null ) {
                    this.loadJobHistory();
                } 
				
                return this._JobHistory;
            }
            
			set {
				if (value == null ) {
					this._JobHistory = null;
                } else {
                    this._JobHistory = new List< OracleModel.JobHistory >();
                    this.addToJobHistoryList(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the JobHistory List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addToJobHistoryList( IEnumerable< OracleModel.JobHistory> value ) {

			IEnumerator< OracleModel.JobHistory> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                OracleModel.JobHistory v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._JobHistory.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        private void loadJobHistory() {
			
			if (this.JobHistoryLoaded)return;
			//init list
			this._JobHistory = new List< OracleModel.JobHistory>();

			if (! this.isNew ) {
                this.addToJobHistoryList( new OracleMappers.JobHistoryDBMapper().findList("employee_id={0}", this.PrEmployeeId));
            }
            
			this.JobHistoryLoaded = true;
        } 
		#endregion

		//associationParentCSharp.txt
		#region "Association Department"

		private bool DepartmentLoaded {get;set;}

		/// <summary>
        /// Gets/Sets parent object
        /// </summary>
		public virtual OracleModel.Department PrDepartment {
		    //1-1 parent association
            set {
                this._Department = value;
				if ( value != null ) {
					this.PrDepartmentId = value.PrDepartmentId;
					//AddHandler value.IDChanged, AddressOf this.handleParentIdChanged;
					value.IDChanged += this.handleParentIdChanged;
                } else {
					this.PrDepartmentId = null;
				}

            }


            get {
                //LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._Department == null ) {
					this.loadDepartment();
                }
				
                return this._Department;
            }
        }
        
        /// <summary>
        /// Loads parent object and sets the appropriate properties
        /// </summary>
        private void loadDepartment() {
			
			if (this.DepartmentLoaded) return;
			
			if ( this._Department == null && this.PrDepartmentId != null ) {
                
				//call the setter here, not the private variable!
                this.PrDepartment = new OracleMappers.DepartmentDBMapper().findByKey(this.PrDepartmentId);
                
            }

            this.DepartmentLoaded=true;
			            
       }
		#endregion

		//associationChildManyCSharp.txt
		#region "Association Courses"

		public bool CoursesLoaded  {get; private set;}

		public virtual OracleModel.EmployeeTrainingHistory PrCoursesGetAt( int i ) {

            this.loadCourses();
            if( this._Courses.Count >= (i - 1)) {
                return this._Courses[i];
            }
            return null;

        } //End Function        
		
		public virtual void PrCoursesAdd( OracleModel.EmployeeTrainingHistory val )  {
			//1-Many , add a single item!
			this.loadCourses();
			val.PrEmployeeId = this.PrEmployeeId;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			this.IDChanged += val.handleParentIdChanged;
			this._Courses.Add(val);

        }

		public virtual void PrCoursesClear() {

            this.loadCourses();
            this._deletedCourses.AddRange(this._Courses);
            this._Courses.Clear();

        }

		public virtual void PrCoursesRemove( OracleModel.EmployeeTrainingHistory val ) {
			
			this.loadCourses();
			this._deletedCourses.Add(val);
			this._Courses.Remove(val);

        }
		
		public virtual IEnumerable< OracleModel.EmployeeTrainingHistory >PrCoursesGetDeleted() {
			
			return this._deletedCourses;

        }

        public virtual IEnumerable< OracleModel.EmployeeTrainingHistory > PrCourses {

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._Courses == null ) {
                    this.loadCourses();
                } 
				
                return this._Courses;
            }
            
			set {
				if (value == null ) {
					this._Courses = null;
                } else {
                    this._Courses = new List< OracleModel.EmployeeTrainingHistory >();
                    this.addToCoursesList(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the Courses List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addToCoursesList( IEnumerable< OracleModel.EmployeeTrainingHistory> value ) {

			IEnumerator< OracleModel.EmployeeTrainingHistory> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                OracleModel.EmployeeTrainingHistory v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._Courses.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        private void loadCourses() {
			
			if (this.CoursesLoaded)return;
			//init list
			this._Courses = new List< OracleModel.EmployeeTrainingHistory>();

			if (! this.isNew ) {
                this.addToCoursesList( new OracleMappers.EmployeeTrainingHistoryDBMapper().findList("employee_id={0}", this.PrEmployeeId));
            }
            
			this.CoursesLoaded = true;
        } 
		#endregion

		//associationChildManyCSharp.txt
		#region "Association TrainingHistory"

		public bool TrainingHistoryLoaded  {get; private set;}

		public virtual OracleModel.EmployeeTrainingHistory PrTrainingHistoryGetAt( int i ) {

            this.loadTrainingHistory();
            if( this._TrainingHistory.Count >= (i - 1)) {
                return this._TrainingHistory[i];
            }
            return null;

        } //End Function        
		
		public virtual void PrTrainingHistoryAdd( OracleModel.EmployeeTrainingHistory val )  {
			//1-Many , add a single item!
			this.loadTrainingHistory();
			val.PrEmployeeId = this.PrEmployeeId;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			this.IDChanged += val.handleParentIdChanged;
			this._TrainingHistory.Add(val);

        }

		public virtual void PrTrainingHistoryClear() {

            this.loadTrainingHistory();
            this._deletedTrainingHistory.AddRange(this._TrainingHistory);
            this._TrainingHistory.Clear();

        }

		public virtual void PrTrainingHistoryRemove( OracleModel.EmployeeTrainingHistory val ) {
			
			this.loadTrainingHistory();
			this._deletedTrainingHistory.Add(val);
			this._TrainingHistory.Remove(val);

        }
		
		public virtual IEnumerable< OracleModel.EmployeeTrainingHistory >PrTrainingHistoryGetDeleted() {
			
			return this._deletedTrainingHistory;

        }

        public virtual IEnumerable< OracleModel.EmployeeTrainingHistory > PrTrainingHistory {

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._TrainingHistory == null ) {
                    this.loadTrainingHistory();
                } 
				
                return this._TrainingHistory;
            }
            
			set {
				if (value == null ) {
					this._TrainingHistory = null;
                } else {
                    this._TrainingHistory = new List< OracleModel.EmployeeTrainingHistory >();
                    this.addToTrainingHistoryList(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the TrainingHistory List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addToTrainingHistoryList( IEnumerable< OracleModel.EmployeeTrainingHistory> value ) {

			IEnumerator< OracleModel.EmployeeTrainingHistory> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                OracleModel.EmployeeTrainingHistory v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._TrainingHistory.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        private void loadTrainingHistory() {
			
			if (this.TrainingHistoryLoaded)return;
			//init list
			this._TrainingHistory = new List< OracleModel.EmployeeTrainingHistory>();

			if (! this.isNew ) {
                this.addToTrainingHistoryList( new OracleMappers.EmployeeTrainingHistoryDBMapper().findList("employee_id={0}", this.PrEmployeeId));
            }
            
			this.TrainingHistoryLoaded = true;
        } 
		#endregion


		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_EMPLOYEE_ID:
			return this.PrEmployeeId;
		case FLD_FIRST_NAME:
			return this.PrFirstName;
		case FLD_LAST_NAME:
			return this.PrLastName;
		case FLD_EMAIL:
			return this.PrEMAIL;
		case FLD_PHONE_NUMBER:
			return this.PrPhoneNumber;
		case FLD_HIRE_DATE:
			return this.PrHireDate;
		case FLD_JOB_ID:
			return this.PrJobId;
		case FLD_SALARY:
			return this.PrSALARY;
		case FLD_COMMISSION_PCT:
			return this.PrCommissionPct;
		case FLD_MANAGER_ID:
			return this.PrManagerId;
		case FLD_DEPARTMENT_ID:
			return this.PrDepartmentId;
		case FLD_CREATE_DATE:
			return this.CreateDate;
		case FLD_UPDATE_DATE:
			return this.UpdateDate;
		case FLD_CREATE_USER:
			return this.CreateUser;
		case FLD_UPDATE_USER:
			return this.UpdateUser;
		case FLD_LOCATION_ID:
			return this.PrLocationId;
		case FLD_COUNTRY_ID:
			return this.PrCountryId;
		case FLD_DEPARTMENT_NAME:
			return this.PrDepartmentName;
		case FLD_JOB_TITLE:
			return this.PrJobTitle;
		case FLD_CITY:
			return this.PrCITY;
		case FLD_STATE_PROVINCE:
			return this.PrStateProvince;
		case FLD_COUNTRY_NAME:
			return this.PrCountryName;
		case FLD_REGION_NAME:
			return this.PrRegionName;
		case FLD_MANAGER_NAME:
			return this.PrManagerName;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_EMPLOYEE_ID.ToLower() ) {
			return this.PrEmployeeId;
		} else if (fieldKey==STR_FLD_FIRST_NAME.ToLower() ) {
			return this.PrFirstName;
		} else if (fieldKey==STR_FLD_LAST_NAME.ToLower() ) {
			return this.PrLastName;
		} else if (fieldKey==STR_FLD_EMAIL.ToLower() ) {
			return this.PrEMAIL;
		} else if (fieldKey==STR_FLD_PHONE_NUMBER.ToLower() ) {
			return this.PrPhoneNumber;
		} else if (fieldKey==STR_FLD_HIRE_DATE.ToLower() ) {
			return this.PrHireDate;
		} else if (fieldKey==STR_FLD_JOB_ID.ToLower() ) {
			return this.PrJobId;
		} else if (fieldKey==STR_FLD_SALARY.ToLower() ) {
			return this.PrSALARY;
		} else if (fieldKey==STR_FLD_COMMISSION_PCT.ToLower() ) {
			return this.PrCommissionPct;
		} else if (fieldKey==STR_FLD_MANAGER_ID.ToLower() ) {
			return this.PrManagerId;
		} else if (fieldKey==STR_FLD_DEPARTMENT_ID.ToLower() ) {
			return this.PrDepartmentId;
		} else if (fieldKey==STR_FLD_CREATE_DATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATE_DATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_CREATE_USER.ToLower() ) {
			return this.CreateUser;
		} else if (fieldKey==STR_FLD_UPDATE_USER.ToLower() ) {
			return this.UpdateUser;
		} else if (fieldKey==STR_FLD_LOCATION_ID.ToLower() ) {
			return this.PrLocationId;
		} else if (fieldKey==STR_FLD_COUNTRY_ID.ToLower() ) {
			return this.PrCountryId;
		} else if (fieldKey==STR_FLD_DEPARTMENT_NAME.ToLower() ) {
			return this.PrDepartmentName;
		} else if (fieldKey==STR_FLD_JOB_TITLE.ToLower() ) {
			return this.PrJobTitle;
		} else if (fieldKey==STR_FLD_CITY.ToLower() ) {
			return this.PrCITY;
		} else if (fieldKey==STR_FLD_STATE_PROVINCE.ToLower() ) {
			return this.PrStateProvince;
		} else if (fieldKey==STR_FLD_COUNTRY_NAME.ToLower() ) {
			return this.PrCountryName;
		} else if (fieldKey==STR_FLD_REGION_NAME.ToLower() ) {
			return this.PrRegionName;
		} else if (fieldKey==STR_FLD_MANAGER_NAME.ToLower() ) {
			return this.PrManagerName;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
		switch (fieldKey) {
		case FLD_EMPLOYEE_ID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			}else{
				this.PrEmployeeId=(System.Int64)val;
			} //
			return;
		case FLD_FIRST_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrFirstName = null;
			}else{
				this.PrFirstName=(System.String)val;
			} //
			return;
		case FLD_LAST_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrLastName = null;
			}else{
				this.PrLastName=(System.String)val;
			} //
			return;
		case FLD_EMAIL:
			if (val == DBNull.Value || val == null ){
				this.PrEMAIL = null;
			}else{
				this.PrEMAIL=(System.String)val;
			} //
			return;
		case FLD_PHONE_NUMBER:
			if (val == DBNull.Value || val == null ){
				this.PrPhoneNumber = null;
			}else{
				this.PrPhoneNumber=(System.String)val;
			} //
			return;
		case FLD_HIRE_DATE:
			if (val == DBNull.Value || val == null ){
				this.PrHireDate = null;
			}else{
				this.PrHireDate=(System.DateTime)val;
			} //
			return;
		case FLD_JOB_ID:
			if (val == DBNull.Value || val == null ){
				this.PrJobId = null;
			}else{
				this.PrJobId=(System.String)val;
			} //
			return;
		case FLD_SALARY:
			if (val == DBNull.Value || val == null ){
				this.PrSALARY = null;
			}else{
				this.PrSALARY=(System.Decimal)val;
			} //
			return;
		case FLD_COMMISSION_PCT:
			if (val == DBNull.Value || val == null ){
				this.PrCommissionPct = null;
			}else{
				this.PrCommissionPct=(System.Decimal)val;
			} //
			return;
		case FLD_MANAGER_ID:
			if (val == DBNull.Value || val == null ){
				this.PrManagerId = null;
			}else{
				this.PrManagerId=(System.Int64)val;
			} //
			return;
		case FLD_DEPARTMENT_ID:
			if (val == DBNull.Value || val == null ){
				this.PrDepartmentId = null;
			}else{
				this.PrDepartmentId=(System.Int64)val;
			} //
			return;
		case FLD_CREATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			}else{
				this.CreateDate=(System.DateTime)val;
			} //
			return;
		case FLD_UPDATE_DATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			}else{
				this.UpdateDate=(System.DateTime)val;
			} //
			return;
		case FLD_CREATE_USER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			}else{
				this.CreateUser=(System.String)val;
			} //
			return;
		case FLD_UPDATE_USER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			}else{
				this.UpdateUser=(System.String)val;
			} //
			return;
		case FLD_LOCATION_ID:
			if (val == DBNull.Value || val == null ){
				this.PrLocationId = null;
			}else{
				this.PrLocationId=(System.Int64)val;
			} //
			return;
		case FLD_COUNTRY_ID:
			if (val == DBNull.Value || val == null ){
				this.PrCountryId = null;
			}else{
				this.PrCountryId=(System.String)val;
			} //
			return;
		case FLD_DEPARTMENT_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrDepartmentName = null;
			}else{
				this.PrDepartmentName=(System.String)val;
			} //
			return;
		case FLD_JOB_TITLE:
			if (val == DBNull.Value || val == null ){
				this.PrJobTitle = null;
			}else{
				this.PrJobTitle=(System.String)val;
			} //
			return;
		case FLD_CITY:
			if (val == DBNull.Value || val == null ){
				this.PrCITY = null;
			}else{
				this.PrCITY=(System.String)val;
			} //
			return;
		case FLD_STATE_PROVINCE:
			if (val == DBNull.Value || val == null ){
				this.PrStateProvince = null;
			}else{
				this.PrStateProvince=(System.String)val;
			} //
			return;
		case FLD_COUNTRY_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrCountryName = null;
			}else{
				this.PrCountryName=(System.String)val;
			} //
			return;
		case FLD_REGION_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrRegionName = null;
			}else{
				this.PrRegionName=(System.String)val;
			} //
			return;
		case FLD_MANAGER_NAME:
			if (val == DBNull.Value || val == null ){
				this.PrManagerName = null;
			}else{
				this.PrManagerName=(System.String)val;
			} //
			return;
		default:
			return;
		}

		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
		if ( fieldKey==STR_FLD_EMPLOYEE_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrEmployeeId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_FIRST_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrFirstName = null;
			} else {
				this.PrFirstName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_LAST_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrLastName = null;
			} else {
				this.PrLastName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMAIL.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEMAIL = null;
			} else {
				this.PrEMAIL=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_PHONE_NUMBER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrPhoneNumber = null;
			} else {
				this.PrPhoneNumber=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_HIRE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrHireDate = null;
			} else {
				this.PrHireDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_JOB_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrJobId = null;
			} else {
				this.PrJobId=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SALARY.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSALARY = null;
			} else {
				this.PrSALARY=(System.Decimal)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_COMMISSION_PCT.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCommissionPct = null;
			} else {
				this.PrCommissionPct=(System.Decimal)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_MANAGER_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrManagerId = null;
			} else {
				this.PrManagerId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_DEPARTMENT_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrDepartmentId = null;
			} else {
				this.PrDepartmentId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_DATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATE_USER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_LOCATION_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrLocationId = null;
			} else {
				this.PrLocationId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_COUNTRY_ID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCountryId = null;
			} else {
				this.PrCountryId=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_DEPARTMENT_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrDepartmentName = null;
			} else {
				this.PrDepartmentName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_JOB_TITLE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrJobTitle = null;
			} else {
				this.PrJobTitle=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CITY.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCITY = null;
			} else {
				this.PrCITY=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_STATE_PROVINCE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrStateProvince = null;
			} else {
				this.PrStateProvince=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_COUNTRY_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrCountryName = null;
			} else {
				this.PrCountryName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_REGION_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrRegionName = null;
			} else {
				this.PrRegionName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_MANAGER_NAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrManagerName = null;
			} else {
				this.PrManagerName=(System.String)val;
			}
			return;
		}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(EmployeeBase other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.PrEmployeeId == other.PrEmployeeId
				&& this.PrFirstName == other.PrFirstName
				&& this.PrLastName == other.PrLastName
				&& this.PrEMAIL == other.PrEMAIL
				&& this.PrPhoneNumber == other.PrPhoneNumber
				&& this.PrHireDate.GetValueOrDefault() == other.PrHireDate.GetValueOrDefault()
				&& this.PrJobId == other.PrJobId
				&& this.PrSALARY.GetValueOrDefault() == other.PrSALARY.GetValueOrDefault()
				&& this.PrCommissionPct.GetValueOrDefault() == other.PrCommissionPct.GetValueOrDefault()
				&& this.PrManagerId.GetValueOrDefault() == other.PrManagerId.GetValueOrDefault()
				&& this.PrDepartmentId.GetValueOrDefault() == other.PrDepartmentId.GetValueOrDefault()
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.CreateUser == other.CreateUser
				&& this.UpdateUser == other.UpdateUser
				&& this.PrLocationId.GetValueOrDefault() == other.PrLocationId.GetValueOrDefault()
				&& this.PrCountryId == other.PrCountryId
				&& this.PrDepartmentName == other.PrDepartmentName
				&& this.PrJobTitle == other.PrJobTitle
				&& this.PrCITY == other.PrCITY
				&& this.PrStateProvince == other.PrStateProvince
				&& this.PrCountryName == other.PrCountryName
				&& this.PrRegionName == other.PrRegionName
				&& this.PrManagerName == other.PrManagerName;;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.PrEmployeeId.GetHashCode()
				 ^ this.getStringHashCode(this.PrFirstName)
				 ^ this.getStringHashCode(this.PrLastName)
				 ^ this.getStringHashCode(this.PrEMAIL)
				 ^ this.getStringHashCode(this.PrPhoneNumber)
				 ^ this.PrHireDate.GetHashCode()
				 ^ this.getStringHashCode(this.PrJobId)
				 ^ this.PrSALARY.GetHashCode()
				 ^ this.PrCommissionPct.GetHashCode()
				 ^ this.PrManagerId.GetHashCode()
				 ^ this.PrDepartmentId.GetHashCode()
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.CreateUser)
				 ^ this.getStringHashCode(this.UpdateUser)
				 ^ this.PrLocationId.GetHashCode()
				 ^ this.getStringHashCode(this.PrCountryId)
				 ^ this.getStringHashCode(this.PrDepartmentName)
				 ^ this.getStringHashCode(this.PrJobTitle)
				 ^ this.getStringHashCode(this.PrCITY)
				 ^ this.getStringHashCode(this.PrStateProvince)
				 ^ this.getStringHashCode(this.PrCountryName)
				 ^ this.getStringHashCode(this.PrRegionName)
				 ^ this.getStringHashCode(this.PrManagerName);;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is EmployeeBase) {

				return this.Equals((EmployeeBase)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(EmployeeBase obj1, EmployeeBase obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(EmployeeBase obj1, EmployeeBase obj2)
		{
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy()
		{
			//creates a copy

			//NOTE: we can't cast from EmployeeBase to Employee, so below we 
			//instantiate a Employee, NOT a EmployeeBase object
			Employee ret = EmployeeFactory.Create();

		ret.PrEmployeeId = this.PrEmployeeId;
		ret.PrFirstName = this.PrFirstName;
		ret.PrLastName = this.PrLastName;
		ret.PrEMAIL = this.PrEMAIL;
		ret.PrPhoneNumber = this.PrPhoneNumber;
		ret.PrHireDate = this.PrHireDate;
		ret.PrJobId = this.PrJobId;
		ret.PrSALARY = this.PrSALARY;
		ret.PrCommissionPct = this.PrCommissionPct;
		ret.PrManagerId = this.PrManagerId;
		ret.PrDepartmentId = this.PrDepartmentId;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.CreateUser = this.CreateUser;
		ret.UpdateUser = this.UpdateUser;
		ret.PrLocationId = this.PrLocationId;
		ret.PrCountryId = this.PrCountryId;
		ret.PrDepartmentName = this.PrDepartmentName;
		ret.PrJobTitle = this.PrJobTitle;
		ret.PrCITY = this.PrCITY;
		ret.PrStateProvince = this.PrStateProvince;
		ret.PrCountryName = this.PrCountryName;
		ret.PrRegionName = this.PrRegionName;
		ret.PrManagerName = this.PrManagerName;



			return ret;

		}

		public override void merge(IModelObject other)
		{
			//merges this Employee model object (me) with the "other" instance 

			Employee o = (Employee)other;

if (! string.IsNullOrEmpty(o.PrFirstName) && 
		 string.IsNullOrEmpty(this.PrFirstName)){
		this.PrFirstName = o.PrFirstName;
}
if (! string.IsNullOrEmpty(o.PrLastName) && 
		 string.IsNullOrEmpty(this.PrLastName)){
		this.PrLastName = o.PrLastName;
}
if (! string.IsNullOrEmpty(o.PrEMAIL) && 
		 string.IsNullOrEmpty(this.PrEMAIL)){
		this.PrEMAIL = o.PrEMAIL;
}
if (! string.IsNullOrEmpty(o.PrPhoneNumber) && 
		 string.IsNullOrEmpty(this.PrPhoneNumber)){
		this.PrPhoneNumber = o.PrPhoneNumber;
}
if ( o.PrHireDate != null && 
		 this.PrHireDate == null){
		this.PrHireDate = o.PrHireDate;
}
if (! string.IsNullOrEmpty(o.PrJobId) && 
		 string.IsNullOrEmpty(this.PrJobId)){
		this.PrJobId = o.PrJobId;
}
if ( o.PrSALARY != null && 
		 this.PrSALARY == null){
		this.PrSALARY = o.PrSALARY;
}
if ( o.PrCommissionPct != null && 
		 this.PrCommissionPct == null){
		this.PrCommissionPct = o.PrCommissionPct;
}
if ( o.PrManagerId != null && 
		 this.PrManagerId == null){
		this.PrManagerId = o.PrManagerId;
}
if ( o.PrDepartmentId != null && 
		 this.PrDepartmentId == null){
		this.PrDepartmentId = o.PrDepartmentId;
}
if ( o.CreateDate != null && 
		 this.CreateDate == null){
		this.CreateDate = o.CreateDate;
}
if ( o.UpdateDate != null && 
		 this.UpdateDate == null){
		this.UpdateDate = o.UpdateDate;
}
if (! string.IsNullOrEmpty(o.CreateUser) && 
		 string.IsNullOrEmpty(this.CreateUser)){
		this.CreateUser = o.CreateUser;
}
if (! string.IsNullOrEmpty(o.UpdateUser) && 
		 string.IsNullOrEmpty(this.UpdateUser)){
		this.UpdateUser = o.UpdateUser;
}
if ( o.PrLocationId != null && 
		 this.PrLocationId == null){
		this.PrLocationId = o.PrLocationId;
}
if (! string.IsNullOrEmpty(o.PrCountryId) && 
		 string.IsNullOrEmpty(this.PrCountryId)){
		this.PrCountryId = o.PrCountryId;
}
if (! string.IsNullOrEmpty(o.PrDepartmentName) && 
		 string.IsNullOrEmpty(this.PrDepartmentName)){
		this.PrDepartmentName = o.PrDepartmentName;
}
if (! string.IsNullOrEmpty(o.PrJobTitle) && 
		 string.IsNullOrEmpty(this.PrJobTitle)){
		this.PrJobTitle = o.PrJobTitle;
}
if (! string.IsNullOrEmpty(o.PrCITY) && 
		 string.IsNullOrEmpty(this.PrCITY)){
		this.PrCITY = o.PrCITY;
}
if (! string.IsNullOrEmpty(o.PrStateProvince) && 
		 string.IsNullOrEmpty(this.PrStateProvince)){
		this.PrStateProvince = o.PrStateProvince;
}
if (! string.IsNullOrEmpty(o.PrCountryName) && 
		 string.IsNullOrEmpty(this.PrCountryName)){
		this.PrCountryName = o.PrCountryName;
}
if (! string.IsNullOrEmpty(o.PrRegionName) && 
		 string.IsNullOrEmpty(this.PrRegionName)){
		this.PrRegionName = o.PrRegionName;
}
if (! string.IsNullOrEmpty(o.PrManagerName) && 
		 string.IsNullOrEmpty(this.PrManagerName)){
		this.PrManagerName = o.PrManagerName;
}


		}

		

		#endregion

#region "parentIdChanged"
	//below sub is called when parentIdChanged
	public override void handleParentIdChanged(IModelObject parentMo ){
		// Assocations from OracleModel.Department
		if ( parentMo is OracleModel.Department) {
			this.PrDepartmentId= ((OracleModel.Department)parentMo).PrDepartmentId;
		}
	}
#endregion



		#region "ID Property"

		public override object Id {
			get { return this._EmployeeId; }
			set {
				this._EmployeeId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class EmployeeRequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			Employee mo = (Employee)imo;
if (string.IsNullOrEmpty( mo.PrLastName)) {
		throw new ModelObjectRequiredFieldException("LastName");
}
if (string.IsNullOrEmpty( mo.PrEMAIL)) {
		throw new ModelObjectRequiredFieldException("EMAIL");
}
if (mo.PrHireDate == null ) {
		throw new ModelObjectRequiredFieldException("HireDate");
}
if (string.IsNullOrEmpty( mo.PrJobId)) {
		throw new ModelObjectRequiredFieldException("JobId");
}

		}

	}
	#endregion

}


