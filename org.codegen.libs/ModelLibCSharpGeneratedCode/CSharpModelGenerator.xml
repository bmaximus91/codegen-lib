<?xml version="1.0" encoding="utf-8"?>
<project xmlns="ClassGenerator4"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="ClassGenerator4 https://raw.githubusercontent.com/christoforosl/codegen-lib/master/org.codegen.libs/org.codegen.lib/classGenerator.4.xsd" >


  <GeneratorVersion>4</GeneratorVersion><!-- do not change -->
  
  <!-- 
  projectFile: provide the full file path and file name of the .net project that will include the generated ORM Classes 
  The path can be relative to the path where this xml file exists
  -->
  <projectFile>.\ModelLibCSharpGeneratedCode.csproj</projectFile>
  
  <projectName>ModelLibCSharpTests</projectName>
  
  <!-- 
  outputDir: provide the full path where the generated ORM classes will be saved to.  
  The path can be relative to the path where this xml file exists
  -->
  <outputDir>.\</outputDir>
  
  <!-- dotNetLanguage: Enumaration, VB or CSHARP -->
  <dotNetLanguage>CSHARP</dotNetLanguage>
  
  <!-- 
  testProjectOutputDir: provide the full path where the generated unit tests 
  for the generated ORM classes will be saved to.  
  The path can be relative to the path where this xml file exists
  -->
  <testProjectOutputDir>..\GeneratorTests\cstests</testProjectOutputDir>
  
  <!-- the namespace of the generated POCOs -->
  <defaultNamespace>CsModelObjects</defaultNamespace>
  <!-- the namespace of the generated db mapper POCOs. DB mappers save the POCOs to the database -->
  <defaultDBMapperNameSpace>CsModelMappers</defaultDBMapperNameSpace>
  
  <!-- Every field in the database will become a property.  Specify a property prefix to have 
  all field proprties grouped together in Intellisense prompts--> 
  <propertiesPrefix>Pr</propertiesPrefix>
  
  <!-- Connection String, Dialect and Connection Type to database -->
  <dbConnectionString>
    Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=modelTest;Data Source=.\SQLEXPRESS
  </dbConnectionString>
  <dbConnectionDialect>MSSQL</dbConnectionDialect>
  <dbConnectionType>CONN_MSSQL</dbConnectionType>
  
  <!-- Following is the list of tables you want to generate -->
  <table>
    
    <TableName>Employee</TableName><!-- Table name as is in the database -->
    
    <ClassName>Employee</ClassName>
    <!-- Optional, the generated POCO class name. If omitted, a name is derived from the database table -->
    
    <SortField>EmployeeName</SortField>
    <SortAscending>true</SortAscending>
    
    <!-- Optional, definition of one or more lookup fields, ie fields that have encoded values 
    corresponding to a description sored in a parent table-->
    <Lookups>
      <FieldName>EmployeeRankId</FieldName>
      <DataSource>CsModelObjects.EmployeeRank</DataSource>
      <ValueMember>RankId</ValueMember>
      <DisplayMember>Rank</DisplayMember>
    </Lookups>
    
    <!-- Optional, associations between other generated tables -->
    <association>
      
      <!-- Can be PARENT or CHILD -->
      <relationType>PARENT</relationType>
      
      <!-- fully qualified datatype of associated object -->
      <DataType>CsModelObjects.EmployeeRank</DataType>
      <!-- an association name -->
      <AssociationName>Rank</AssociationName>
      <!-- cardinality is either 1 or * (many) -->
      <cardinality>1</cardinality>
      
      <!-- specify parent table field name that links the 2 tables together and forms the association --> 
      <parentFieldName>RankId</parentFieldName>
      <!-- specify child table field name that links the 2 tables together and forms the association --> 
      <childFieldName>EmployeeRankId</childFieldName>

    </association>
    <association>
      <relationType>CHILD</relationType>
      <DataType>CsModelObjects.EmployeeInfo</DataType>
      <AssociationName>EmployeeInfo</AssociationName>
      <cardinality>1</cardinality>

      <parentFieldName>EmployeeId</parentFieldName>
      <childFieldName>EIEmployeeId</childFieldName>

    </association>

    <association>
      <relationType>CHILD</relationType>
      <DataType>CsModelObjects.EmployeeProject</DataType>
      <AssociationName>EmployeeProjects</AssociationName>
      <AssociationSingular>EmployeeProject</AssociationSingular>
      <cardinality>*</cardinality>

      <parentFieldName>EmployeeId</parentFieldName>
      <childFieldName>EPEmployeeId</childFieldName>

    </association>

  </table>

  <table>
    <TableName>EmployeeProject</TableName>
    <ClassName>EmployeeProject</ClassName>
    <GenerateUI>1</GenerateUI>
	<association>
	  <relationType>PARENT</relationType>
	  <DataType>CsModelObjects.Project</DataType>
	  <AssociationName>Project</AssociationName>
	  <AssociationSingular>Project</AssociationSingular>
	  <cardinality>1</cardinality>

	  <parentFieldName>ProjectId</parentFieldName>
	  <childFieldName>EPProjectId</childFieldName>

	</association>
	
  </table>

  <table>
    <TableName>EmployeeRank</TableName>
    <ClassName>EmployeeRank</ClassName>
    <GenerateUI>1</GenerateUI>
  </table>
  <table>
    <TableName>EmployeeInfo</TableName>
    <GenerateUI>1</GenerateUI>
  </table>

  <table>
    <TableName>Project</TableName>
    <ClassName>Project</ClassName>
    <GenerateUI>1</GenerateUI>
    
    <association>
      <relationType>CHILD</relationType>
      <DataType>CsModelObjects.EmployeeProject</DataType>
      <AssociationName>EmployeeProjects</AssociationName>
      <AssociationSingular>EmployeeProject</AssociationSingular>
      <cardinality>*</cardinality>
      <parentFieldName>ProjectId</parentFieldName>
      <childFieldName>EPProjectId</childFieldName>
    </association>

  </table>
  
  <table>
    <TableName>EmployeeType</TableName>
  </table>
  
</project>
