using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using org.model.lib;
using org.model.lib.Model;
using org.model.lib.db;

using System.Linq;
using CsModelObjects;
using System.Data.Linq.Mapping;

//<comments>
// Template: DBMapperBase.csharp.txt
//************************************************************
// 
// Class autogenerated on09/01/2017 22:31:58 by ModelGenerator
// Extends base DBMapperBase object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class TestTableNoIncrementDBMapper
//
//************************************************************
//</comments>

namespace CsModelMappers {

	[System.Runtime.InteropServices.ComVisible(false)]
	[AttrIsPrimaryKeyAutogenerated(false)]
	[Table(Name = "TestTableNoIncrement")]
	[SelectObject("TestTableNoIncrement")][KeyFieldName("TestTableNoIncrementId")]
	public class TestTableNoIncrementDBMapper : DBMapper {

		#region "Constructors "
		public TestTableNoIncrementDBMapper(DBUtils _dbConn) : base(_dbConn) {
		}


		public TestTableNoIncrementDBMapper() : base() {
		}
		#endregion

		#region "Overloaded Functions"

		public new TestTableNoIncrement findWhere(string sWhereClause, params object[] @params) {

			return (TestTableNoIncrement)base.findWhere(sWhereClause, @params);
		}


		public void saveTestTableNoIncrement(TestTableNoIncrement mo) {
			base.save(mo);
		}

		public new TestTableNoIncrement findByKey(object keyval) {

			return (TestTableNoIncrement)base.findByKey(keyval);

		}

		#endregion


		#region "getUpdateDBCommand"
		public override IDbCommand getUpdateDBCommand(IModelObject modelObj, string sql) {
			TestTableNoIncrement obj = (TestTableNoIncrement)modelObj;
			IDbCommand stmt = this.dbConn.getCommand(sql);
			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_TESTTABLENOINCREMENT,obj.PrTestTableNoIncrement));
			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_CREATEDATE,obj.CreateDate));
			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_UPDATEDATE,obj.UpdateDate));
			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_UPDATEUSER,obj.UpdateUser));
			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_CREATEUSER,obj.CreateUser));

			stmt.Parameters.Add(this.dbConn.getParameter(TestTableNoIncrement.STR_FLD_TESTTABLENOINCREMENTID,obj.PrTestTableNoIncrementId));


			return stmt;
		}
		#endregion



		#region "Find functions"

		///	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		///	it creates and loads a ModelObject. 
		/// </summary>
		///	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		/// that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		///	<param name="params"> Parameter values to be passed to sql statement </param>
		///	<returns> A List(Of TestTableNoIncrement) object containing all objects loaded </returns>
		///	 
		public new List<TestTableNoIncrement> findList(string sWhereClause, params object[] @params) {

			string sql = this.getSqlWithWhereClause(sWhereClause);
			IDataReader rs = null;
			List<TestTableNoIncrement> molist = new List<TestTableNoIncrement>();

			try {
				rs = dbConn.getDataReaderWithParams(sql, @params);
				this.Loader.DataSource = rs;

				while (rs.Read()) {
					IModelObject mo = this.getModelInstance();
					this.Loader.load(mo);
					molist.Add((TestTableNoIncrement)mo);

				}


			} finally {
				this.dbConn.closeDataReader(rs);
			}

			return molist;

		}

		///	<summary>Given an sql statement, it opens a result set, and for each record returned, 
		///	it creates and loads a ModelObject. </summary>
		///	<param name="sWhereClause">where clause to be applied to "selectall" statement 
		/// that returns one or more records from the database, corresponding to the ModelObject we are going to load </param>
		///	<param name="params"> List of IDataParameters to be passed to sql statement </param>
		///	<returns> A List(Of TestTableNoIncrement) object containing all objects loaded </returns>
		///	 
		public List<TestTableNoIncrement> findList(string sWhereClause, List<IDataParameter> @params) {

			string sql = this.getSqlWithWhereClause(sWhereClause);
			IDataReader rs = null;
			List<TestTableNoIncrement> molist = new List<TestTableNoIncrement>();

			try {
				rs = dbConn.getDataReader(sql, @params);
				this.Loader.DataSource = rs;

				while (rs.Read()) {
					IModelObject mo = this.getModelInstance();
					this.Loader.load(mo);
					molist.Add((TestTableNoIncrement)mo);

				}


			} finally {
				this.dbConn.closeDataReader(rs);
			}

			return molist;

		}


		///    
		///	 <summary>Returns all records from database for a coresponding ModelObject </summary>
		/// <returns>List(Of TestTableNoIncrement) </returns>
		public List<TestTableNoIncrement> findAll()
		{
			return this.findList(string.Empty);
		}

		public override IModelObjectLoader Loader {
			get {
				if (this._loader == null) {
					this._loader = new TestTableNoIncrementDataReaderLoader();
				}
				return this._loader;
			}
			set { this._loader = value; }
		}

		#endregion

		public override IModelObject getModelInstance() {
			return new TestTableNoIncrement();
		}

	}

	#region " TestTableNoIncrement Loader "
	[System.Runtime.InteropServices.ComVisible(false)]
	public class TestTableNoIncrementDataReaderLoader : DataReaderLoader {
		public override void load(IModelObject mo) {
			const int DATAREADER_FLD_TESTTABLENOINCREMENTID = 0;
			const int DATAREADER_FLD_TESTTABLENOINCREMENT = 1;
			const int DATAREADER_FLD_CREATEDATE = 2;
			const int DATAREADER_FLD_UPDATEDATE = 3;
			const int DATAREADER_FLD_UPDATEUSER = 4;
			const int DATAREADER_FLD_CREATEUSER = 5;

			TestTableNoIncrement obj = (TestTableNoIncrement)mo;
			obj.IsObjectLoading = true;

			if (!this.reader.IsDBNull(DATAREADER_FLD_TESTTABLENOINCREMENTID) ) {
				obj.PrTestTableNoIncrementId = Convert.ToInt64(this.reader.GetInt32(DATAREADER_FLD_TESTTABLENOINCREMENTID));
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_TESTTABLENOINCREMENT) ) {
				obj.PrTestTableNoIncrement = this.reader.GetString(DATAREADER_FLD_TESTTABLENOINCREMENT);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_CREATEDATE) ) {
				obj.CreateDate = this.reader.GetDateTime(DATAREADER_FLD_CREATEDATE);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_UPDATEDATE) ) {
				obj.UpdateDate = this.reader.GetDateTime(DATAREADER_FLD_UPDATEDATE);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_UPDATEUSER) ) {
				obj.UpdateUser = this.reader.GetString(DATAREADER_FLD_UPDATEUSER);
			}
			if (!this.reader.IsDBNull(DATAREADER_FLD_CREATEUSER) ) {
				obj.CreateUser = this.reader.GetString(DATAREADER_FLD_CREATEUSER);
			}


			obj.isNew = false;
			// since we've just loaded from database, we mark as "old"
			obj.isDirty = false;
			obj.IsObjectLoading = false;
			obj.afterLoad();

			return;

		}

	}

	#endregion

	///<summary>
	/// Final Class with convinience shared methods for loading/saving the TestTableNoIncrementRank ModelObject. 
	///</summary>
	[System.Runtime.InteropServices.ComVisible(false)]
	public sealed class TestTableNoIncrementDataUtils {

		#region "Shared ""get"" Functions "

		public static List<TestTableNoIncrement> findList(string @where, params object[] @params) {

			TestTableNoIncrementDBMapper dbm = new TestTableNoIncrementDBMapper();
			return dbm.findList(@where, @params);

		}

		public static List<TestTableNoIncrement> findList(string @where, List<IDataParameter> listOfIParams) {

			TestTableNoIncrementDBMapper dbm = new TestTableNoIncrementDBMapper();
			return dbm.findList(@where,listOfIParams);

		}

		public static TestTableNoIncrement findOne(string @where, params object[] @params) {

			TestTableNoIncrementDBMapper dbm = new TestTableNoIncrementDBMapper();
			return (TestTableNoIncrement)dbm.findWhere(@where, @params);

		}

		public static List<TestTableNoIncrement> findList(){

			return new TestTableNoIncrementDBMapper().findAll();

		}

		public static TestTableNoIncrement findByKey(object id) {

			return (TestTableNoIncrement)new TestTableNoIncrementDBMapper().findByKey(id);

		}

		/// <summary>
		/// Reload the TestTableNoIncrement from the database
		/// </summary>
		/// <remarks>
		/// use this method when you want to relad the TestTableNoIncrement 
		/// from the database, discarding any changes
		/// </remarks>
		public static void reload(ref TestTableNoIncrement mo) {

			if (mo == null) {
				throw new System.ArgumentNullException("null object past to reload function");
			}

			mo = (TestTableNoIncrement)new TestTableNoIncrementDBMapper().findByKey(mo.Id);

		}

		#endregion

		#region "Shared Save and Delete Functions"
		/// <summary>
		/// Convinience method to save a TestTableNoIncrement Object.
		/// Important note: DO NOT CALL THIS IN A LOOP!
		/// </summary>
		/// <param name="TestTableNoIncrementObj"></param>
		/// <remarks>
		/// Important note: DO NOT CALL THIS IN A LOOP!  
		/// This method simply instantiates a TestTableNoIncrementDBMapper and calls the save method
		/// </remarks>
		public static void saveTestTableNoIncrement(params TestTableNoIncrement[] TestTableNoIncrementObj)
		{

			TestTableNoIncrementDBMapper dbm = new TestTableNoIncrementDBMapper();
			dbm.saveList(TestTableNoIncrementObj.ToList());


		}


		public static void deleteTestTableNoIncrement(TestTableNoIncrement TestTableNoIncrementObj)
		{

			TestTableNoIncrementDBMapper dbm = new TestTableNoIncrementDBMapper();
			dbm.delete(TestTableNoIncrementObj);

		}
		#endregion

		#region "Data Table and data row load/save "

		public static void saveTestTableNoIncrement(DataRow dr, ref TestTableNoIncrement mo) {
			if (mo == null) {
				mo = new TestTableNoIncrement();
			}

			foreach (DataColumn dc in dr.Table.Columns) {
				mo.setAttribute(dc.ColumnName, dr[dc.ColumnName]);
			}

			saveTestTableNoIncrement(mo);

		}

		public static void saveTestTableNoIncrement(DataTable dt, ref TestTableNoIncrement mo) {
			foreach (DataRow dr in dt.Rows) {
				saveTestTableNoIncrement(dr, ref mo);
			}

		}

		public static TestTableNoIncrement loadFromDataRow(DataRow r) {

			DataRowLoader a = new DataRowLoader();
			IModelObject mo = new TestTableNoIncrement();
			a.DataSource = r;
			a.load(mo);
			return (TestTableNoIncrement)mo;

		}

		#endregion

	}

}


