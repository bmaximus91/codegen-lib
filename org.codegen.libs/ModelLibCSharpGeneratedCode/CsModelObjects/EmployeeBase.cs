using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;

using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;

//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
// Instead, change code in the extender class Employee
//
//************************************************************
//</comments>
namespace CsModelObjects
{

	#region "Interface"
[System.Runtime.InteropServices.ComVisible(false)] 
	public interface IEmployee: IModelObject {
	System.Int64 PrEmployeeId {get;set;} 
	System.String PrEmployeeName {get;set;} 
	System.Int64? PrEmployeeRankId {get;set;} 
	System.Decimal? PrSalary {get;set;} 
	System.String PrAddress {get;set;} 
	System.String PrTelephone {get;set;} 
	System.String PrMobile {get;set;} 
	System.String PrIdNumber {get;set;} 
	System.String PrSSINumber {get;set;} 
	System.DateTime? PrHireDate {get;set;} 
	System.Int64? PrNumDependents {get;set;} 
	System.String PrEmployeeTypeCode {get;set;} 
	System.DateTime? CreateDate {get;set;} 
	System.DateTime? UpdateDate {get;set;} 
	System.String CreateUser {get;set;} 
	System.String UpdateUser {get;set;} 
	System.Guid? PrSampleGuidField {get;set;} 
	System.Boolean PrIsActive {get;set;} 
	System.Int64? PrSampleBigInt {get;set;} 
	System.Int64? PrSampleSmallInt {get;set;} 
	System.Int64? PrSampleNumericFieldInt {get;set;} 
	System.Decimal? PrSampleNumericField2Decimals {get;set;} 
	CsModelObjects.EmployeeRank PrRank {get;set;} //association
	CsModelObjects.EmployeeInfo PrEmployeeInfo {get;set;} //association
	IEnumerable< CsModelObjects.EmployeeProject>PrEmployeeProjects {get; set;}
		void PrEmployeeProjectAdd(CsModelObjects.EmployeeProject val);
		void PrEmployeeProjectRemove(CsModelObjects.EmployeeProject val);
		IEnumerable<CsModelObjects.EmployeeProject> PrEmployeeProjectsGetDeleted();
		CsModelObjects.EmployeeProject PrEmployeeProjectGetAt( int i ) ;

}
#endregion

	
	[DefaultMapperAttr(typeof(CsModelMappers.EmployeeDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	public class EmployeeBase : ModelObject, IEquatable<EmployeeBase>, IAuditable,System.IComparable< Employee>,IEmployee {

		#region "Constructor"

		public EmployeeBase() {
			this.addValidator(new EmployeeRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		public override void loadObjectHierarchy() {
		loadRank();
		loadEmployeeInfo();
		loadEmployeeProjects();

		}

		/// <summary>
		/// Returns the **loaded** children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
				if  (this.PrEmployeeInfo!=null) {
		ret.Add(this.PrEmployeeInfo);
	}
	if  (this.EmployeeProjectsLoaded) { // check if loaded first!
		List< ModelObject > lp = this._EmployeeProjects.ConvertAll(
				new Converter< CsModelObjects.EmployeeProject, ModelObject>((
			CsModelObjects.EmployeeProject pf )=> {				return (ModelObject)pf;}));
		ret.AddRange(lp);
	}

			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			if  ( this._Rank!=null && this.RankLoaded) {
	ret.Add(this.PrRank);
}

			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_EMPLOYEEID = "EmployeeId";
			public const String STR_FLD_EMPLOYEENAME = "EmployeeName";
			public const String STR_FLD_EMPLOYEERANKID = "EmployeeRankId";
			public const String STR_FLD_SALARY = "Salary";
			public const String STR_FLD_ADDRESS = "Address";
			public const String STR_FLD_TELEPHONE = "Telephone";
			public const String STR_FLD_MOBILE = "Mobile";
			public const String STR_FLD_IDNUMBER = "IdNumber";
			public const String STR_FLD_SSINUMBER = "SSINumber";
			public const String STR_FLD_HIREDATE = "HireDate";
			public const String STR_FLD_NUMDEPENDENTS = "NumDependents";
			public const String STR_FLD_EMPLOYEETYPECODE = "EmployeeTypeCode";
			public const String STR_FLD_CREATEDATE = "CreateDate";
			public const String STR_FLD_UPDATEDATE = "UpdateDate";
			public const String STR_FLD_CREATEUSER = "CreateUser";
			public const String STR_FLD_UPDATEUSER = "UpdateUser";
			public const String STR_FLD_SAMPLEGUIDFIELD = "SampleGuidField";
			public const String STR_FLD_ISACTIVE = "IsActive";
			public const String STR_FLD_SAMPLEBIGINT = "SampleBigInt";
			public const String STR_FLD_SAMPLESMALLINT = "SampleSmallInt";
			public const String STR_FLD_SAMPLENUMERICFIELDINT = "SampleNumericFieldInt";
			public const String STR_FLD_SAMPLENUMERICFIELD2DECIMALS = "SampleNumericField2Decimals";


				public const int FLD_EMPLOYEEID = 0;
		public const int FLD_EMPLOYEENAME = 1;
		public const int FLD_EMPLOYEERANKID = 2;
		public const int FLD_SALARY = 3;
		public const int FLD_ADDRESS = 4;
		public const int FLD_TELEPHONE = 5;
		public const int FLD_MOBILE = 6;
		public const int FLD_IDNUMBER = 7;
		public const int FLD_SSINUMBER = 8;
		public const int FLD_HIREDATE = 9;
		public const int FLD_NUMDEPENDENTS = 10;
		public const int FLD_EMPLOYEETYPECODE = 11;
		public const int FLD_CREATEDATE = 12;
		public const int FLD_UPDATEDATE = 13;
		public const int FLD_CREATEUSER = 14;
		public const int FLD_UPDATEUSER = 15;
		public const int FLD_SAMPLEGUIDFIELD = 16;
		public const int FLD_ISACTIVE = 17;
		public const int FLD_SAMPLEBIGINT = 18;
		public const int FLD_SAMPLESMALLINT = 19;
		public const int FLD_SAMPLENUMERICFIELDINT = 20;
		public const int FLD_SAMPLENUMERICFIELD2DECIMALS = 21;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_EMPLOYEEID,STR_FLD_EMPLOYEENAME,STR_FLD_EMPLOYEERANKID,STR_FLD_SALARY,STR_FLD_ADDRESS,STR_FLD_TELEPHONE,STR_FLD_MOBILE,STR_FLD_IDNUMBER,STR_FLD_SSINUMBER,STR_FLD_HIREDATE,STR_FLD_NUMDEPENDENTS,STR_FLD_EMPLOYEETYPECODE,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_CREATEUSER,STR_FLD_UPDATEUSER,STR_FLD_SAMPLEGUIDFIELD,STR_FLD_ISACTIVE,STR_FLD_SAMPLEBIGINT,STR_FLD_SAMPLESMALLINT,STR_FLD_SAMPLENUMERICFIELDINT,STR_FLD_SAMPLENUMERICFIELD2DECIMALS
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _EmployeeId;
	private System.String _EmployeeName;
	private System.Int64? _EmployeeRankId = null;
	private System.Decimal? _Salary = null;
	private System.String _Address;
	private System.String _Telephone;
	private System.String _Mobile;
	private System.String _IdNumber;
	private System.String _SSINumber;
	private System.DateTime? _HireDate = null;
	private System.Int64? _NumDependents = null;
	private System.String _EmployeeTypeCode;
	private System.DateTime? _CreateDate = null;
	private System.DateTime? _UpdateDate = null;
	private System.String _CreateUser;
	private System.String _UpdateUser;
	private System.Guid? _SampleGuidField = null;
	private System.Boolean _IsActive;
	private System.Int64? _SampleBigInt = null;
	private System.Int64? _SampleSmallInt = null;
	private System.Int64? _SampleNumericFieldInt = null;
	private System.Decimal? _SampleNumericField2Decimals = null;
	// ****** CHILD OBJECTS ********************
	private CsModelObjects.EmployeeRank _Rank = null;  // initialize to nothing, for lazy load logic below !!!
	private CsModelObjects.EmployeeInfo _EmployeeInfo = null;  // initialize to nothing, for lazy load logic below !!!
	private List< CsModelObjects.EmployeeProject> _EmployeeProjects = null;  // initialize to nothing, for lazy load logic below !!!
	 private List< CsModelObjects.EmployeeProject> _deletedEmployeeProjects = new List< CsModelObjects.EmployeeProject>();// initialize to empty list !!!

	// *****************************************
	// ****** END CHILD OBJECTS ********************

		#endregion

		#region "Field Properties"

	public virtual System.Int64 PrEmployeeId{
	get{
		return _EmployeeId;
	}
	set {
		if (ModelObject.valueChanged(_EmployeeId, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEEID);
			}

			this.raiseBroadcastIdChange();

		}
		}
	}
public void setEmployeeId(String val){
	if (Information.IsNumeric(val)) {
		this.PrEmployeeId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		throw new ApplicationException("Cant update Primary Key to Null");
	} else {
		throw new ApplicationException("Invalid Integer Number, field:EmployeeId, value:" + val);
	}
}
	public virtual System.String PrEmployeeName{
	get{
		return _EmployeeName;
	}
	set {
		if (ModelObject.valueChanged(_EmployeeName, value)){
		if (value != null && value.Length > 50){
			throw new ModelObjectFieldTooLongException("EmployeeName");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEENAME);
			}

		}
		}
	}
public void setEmployeeName( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrEmployeeName = val;
	} else {
		this.PrEmployeeName = null;
	}
}
	public virtual System.Int64? PrEmployeeRankId{
	get{
		return _EmployeeRankId;
	}
	set {
		if (ModelObject.valueChanged(_EmployeeRankId, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEERANKID);
			}

		}
		}
	}
public void setEmployeeRankId(String val){
	if (Information.IsNumeric(val)) {
		this.PrEmployeeRankId = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrEmployeeRankId = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:EmployeeRankId, value:" + val);
	}
}
	public virtual System.Decimal? PrSalary{
	get{
		return _Salary;
	}
	set {
		if (ModelObject.valueChanged(_Salary, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SALARY);
			}

		}
		}
	}
public void setSalary(String val ){
	if (Information.IsNumeric(val)) {
		this.PrSalary =  Convert.ToDecimal(val);
	} else if ( string.IsNullOrEmpty(val) ) {
		this.PrSalary = null;
	} else {
		throw new ApplicationException("Invalid Decimal Number, field:Salary, value:" + val);
	}
}
	public virtual System.String PrAddress{
	get{
		return _Address;
	}
	set {
		if (ModelObject.valueChanged(_Address, value)){
		if (value != null && value.Length > 50){
			throw new ModelObjectFieldTooLongException("Address");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_ADDRESS);
			}

		}
		}
	}
public void setAddress( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrAddress = val;
	} else {
		this.PrAddress = null;
	}
}
	public virtual System.String PrTelephone{
	get{
		return _Telephone;
	}
	set {
		if (ModelObject.valueChanged(_Telephone, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("Telephone");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_TELEPHONE);
			}

		}
		}
	}
public void setTelephone( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrTelephone = val;
	} else {
		this.PrTelephone = null;
	}
}
	public virtual System.String PrMobile{
	get{
		return _Mobile;
	}
	set {
		if (ModelObject.valueChanged(_Mobile, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("Mobile");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_MOBILE);
			}

		}
		}
	}
public void setMobile( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrMobile = val;
	} else {
		this.PrMobile = null;
	}
}
	public virtual System.String PrIdNumber{
	get{
		return _IdNumber;
	}
	set {
		if (ModelObject.valueChanged(_IdNumber, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("IdNumber");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_IDNUMBER);
			}

		}
		}
	}
public void setIdNumber( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrIdNumber = val;
	} else {
		this.PrIdNumber = null;
	}
}
	public virtual System.String PrSSINumber{
	get{
		return _SSINumber;
	}
	set {
		if (ModelObject.valueChanged(_SSINumber, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("SSINumber");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SSINUMBER);
			}

		}
		}
	}
public void setSSINumber( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrSSINumber = val;
	} else {
		this.PrSSINumber = null;
	}
}
	public virtual System.DateTime? PrHireDate{
	get{
		return _HireDate;
	}
	set {
		if (ModelObject.valueChanged(_HireDate, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_HIREDATE);
			}

		}
		}
	}
public void setHireDate( String val ){
	if (Information.IsDate(val)) {
		this.PrHireDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.PrHireDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:HireDate, value:" + val);
	}
}
	public virtual System.Int64? PrNumDependents{
	get{
		return _NumDependents;
	}
	set {
		if (ModelObject.valueChanged(_NumDependents, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_NUMDEPENDENTS);
			}

		}
		}
	}
public void setNumDependents(String val){
	if (Information.IsNumeric(val)) {
		this.PrNumDependents = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrNumDependents = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:NumDependents, value:" + val);
	}
}
	public virtual System.String PrEmployeeTypeCode{
	get{
		return _EmployeeTypeCode;
	}
	set {
		if (ModelObject.valueChanged(_EmployeeTypeCode, value)){
		if (value != null && value.Length > 10){
			throw new ModelObjectFieldTooLongException("EmployeeTypeCode");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_EMPLOYEETYPECODE);
			}

		}
		}
	}
public void setEmployeeTypeCode( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.PrEmployeeTypeCode = val;
	} else {
		this.PrEmployeeTypeCode = null;
	}
}
	public virtual System.DateTime? CreateDate{
	get{
		return _CreateDate;
	}
	set {
		if (ModelObject.valueChanged(_CreateDate, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATEDATE);
			}

		}
		}
	}
public void setCreateDate( String val ){
	if (Information.IsDate(val)) {
		this.CreateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.CreateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:CreateDate, value:" + val);
	}
}
	public virtual System.DateTime? UpdateDate{
	get{
		return _UpdateDate;
	}
	set {
		if (ModelObject.valueChanged(_UpdateDate, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATEDATE);
			}

		}
		}
	}
public void setUpdateDate( String val ){
	if (Information.IsDate(val)) {
		this.UpdateDate = Convert.ToDateTime(val);
	} else if (String.IsNullOrEmpty(val) ) {
		this.UpdateDate = null;
	} else {
		throw new ApplicationException("Invalid Date, field:UpdateDate, value:" + val);
	}
}
	public virtual System.String CreateUser{
	get{
		return _CreateUser;
	}
	set {
		if (ModelObject.valueChanged(_CreateUser, value)){
		if (value != null && value.Length > 50){
			throw new ModelObjectFieldTooLongException("createUser");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_CREATEUSER);
			}

		}
		}
	}
public void setCreateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.CreateUser = val;
	} else {
		this.CreateUser = null;
	}
}
	public virtual System.String UpdateUser{
	get{
		return _UpdateUser;
	}
	set {
		if (ModelObject.valueChanged(_UpdateUser, value)){
		if (value != null && value.Length > 50){
			throw new ModelObjectFieldTooLongException("updateUser");
		}
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_UPDATEUSER);
			}

		}
		}
	}
public void setUpdateUser( String val ) {
	if (! string.IsNullOrEmpty(val)) {
		this.UpdateUser = val;
	} else {
		this.UpdateUser = null;
	}
}
	public virtual System.Guid? PrSampleGuidField{
	get{
		return _SampleGuidField;
	}
	set {
		if (ModelObject.valueChanged(_SampleGuidField, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SAMPLEGUIDFIELD);
			}

		}
		}
	}
	public virtual System.Boolean PrIsActive{
	get{
		return _IsActive;
	}
	set {
		if (ModelObject.valueChanged(_IsActive, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_ISACTIVE);
			}

		}
		}
	}
public void setIsActive(String val ){
	if (String.IsNullOrEmpty(val)) {
		this.PrIsActive = false;
	} else {
	    bool newval = ("1"==val || "true"==val.ToLower()) ;
	    this.PrIsActive = newval;
	}
}
	public virtual System.Int64? PrSampleBigInt{
	get{
		return _SampleBigInt;
	}
	set {
		if (ModelObject.valueChanged(_SampleBigInt, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SAMPLEBIGINT);
			}

		}
		}
	}
public void setSampleBigInt(String val){
	if (Information.IsNumeric(val)) {
		this.PrSampleBigInt = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrSampleBigInt = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:SampleBigInt, value:" + val);
	}
}
	public virtual System.Int64? PrSampleSmallInt{
	get{
		return _SampleSmallInt;
	}
	set {
		if (ModelObject.valueChanged(_SampleSmallInt, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SAMPLESMALLINT);
			}

		}
		}
	}
public void setSampleSmallInt(String val){
	if (Information.IsNumeric(val)) {
		this.PrSampleSmallInt = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrSampleSmallInt = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:SampleSmallInt, value:" + val);
	}
}
	public virtual System.Int64? PrSampleNumericFieldInt{
	get{
		return _SampleNumericFieldInt;
	}
	set {
		if (ModelObject.valueChanged(_SampleNumericFieldInt, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SAMPLENUMERICFIELDINT);
			}

		}
		}
	}
public void setSampleNumericFieldInt(String val){
	if (Information.IsNumeric(val)) {
		this.PrSampleNumericFieldInt = Convert.ToInt64(val);
	} else if (String.IsNullOrEmpty(val)) {
		this.PrSampleNumericFieldInt = null;
	} else {
		throw new ApplicationException("Invalid Integer Number, field:SampleNumericFieldInt, value:" + val);
	}
}
	public virtual System.Decimal? PrSampleNumericField2Decimals{
	get{
		return _SampleNumericField2Decimals;
	}
	set {
		if (ModelObject.valueChanged(_SampleNumericField2Decimals, value)){
			if (this.IsObjectLoading == false) {
				this.isDirty = true;
				this.setFieldChanged(STR_FLD_SAMPLENUMERICFIELD2DECIMALS);
			}

		}
		}
	}
public void setSampleNumericField2Decimals(String val ){
	if (Information.IsNumeric(val)) {
		this.PrSampleNumericField2Decimals =  Convert.ToDecimal(val);
	} else if ( string.IsNullOrEmpty(val) ) {
		this.PrSampleNumericField2Decimals = null;
	} else {
		throw new ApplicationException("Invalid Decimal Number, field:SampleNumericField2Decimals, value:" + val);
	}
}

		// ASSOCIATIONS GETTERS/SETTERS BELOW!
		//associationParentCSharp.txt
		#region "Association Rank"

		private bool RankLoaded {get;set;}

		/// <summary>
        /// Gets/Sets parent object
        /// </summary>
		public virtual CsModelObjects.EmployeeRank PrRank {
		    //1-1 parent association
            set {
                this._Rank = value;
				if ( value != null ) {
					this.PrEmployeeRankId = value.PrRankId;
					//AddHandler value.IDChanged, AddressOf this.handleParentIdChanged;
					value.IDChanged += this.handleParentIdChanged;
                } else {
					this.PrEmployeeRankId = null;
				}

            }


            get {
                //LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._Rank == null ) {
					this.loadRank();
                }
				
                return this._Rank;
            }
        }
        
        /// <summary>
        /// Loads parent object and sets the appropriate properties
        /// </summary>
        private void loadRank() {
			
			if (this.RankLoaded) return;
			
			if ( this._Rank == null && this.PrEmployeeRankId != null ) {
                
				//call the setter here, not the private variable!
                this.PrRank = new CsModelMappers.EmployeeRankDBMapper().findByKey(this.PrEmployeeRankId);
                
            }

            this.RankLoaded=true;
			            
       }
		#endregion

        //associationChildOneCSharp.txt
        public bool EmployeeInfoLoaded {get; private set;}

		public virtual CsModelObjects.EmployeeInfo PrEmployeeInfo {
			//1-1 child association
            set {
                this._EmployeeInfo = value;
				if (  this._EmployeeInfo != null) {
					this._EmployeeInfo.PrEIEmployeeId = this.PrEmployeeId;
					value.IDChanged += this.handleParentIdChanged;
				}     
            }
            get {
			    //LAZY LOADING! Only hit the database to get the child object if we need it
                if (! this.EmployeeInfoLoaded) {
					this.loadEmployeeInfo();
                } 
                return this._EmployeeInfo;
            } 
        }
        
        /// <summary>
        /// Loads child object from dabatabase, if not loaded already
        /// <//summary>
        private void loadEmployeeInfo() {
						
			if ( this.EmployeeInfoLoaded) { return; }

			if ( this._EmployeeInfo == null )  {
				//IMPORTANT: call setter here, not the private variable
				this.PrEmployeeInfo = 
					new CsModelMappers.EmployeeInfoDBMapper().findWhere("EIEmployeeId={0}", this.PrEmployeeId);
				
			} 

			//set the loaded flag here
			this.EmployeeInfoLoaded = true;
            
        } //End Sub

		

		//associationChildManyCSharp.txt
		#region "Association EmployeeProjects"

		public bool EmployeeProjectsLoaded  {get; private set;}

		public virtual CsModelObjects.EmployeeProject PrEmployeeProjectGetAt( int i ) {

            this.loadEmployeeProjects();
            if( this._EmployeeProjects.Count >= (i - 1)) {
                return this._EmployeeProjects[i];
            }
            return null;

        } //End Function        
		
		public virtual void PrEmployeeProjectAdd( CsModelObjects.EmployeeProject val )  {
			//1-Many , add a single item!
			this.loadEmployeeProjects();
			val.PrEPEmployeeId = this.PrEmployeeId;
			//AddHandler this.IDChanged, AddressOf val.handleParentIdChanged;
			this.IDChanged += val.handleParentIdChanged;
			this._EmployeeProjects.Add(val);

        }

		public virtual void PrEmployeeProjectsClear() {

            this.loadEmployeeProjects();
            this._deletedEmployeeProjects.AddRange(this._EmployeeProjects);
            this._EmployeeProjects.Clear();

        }

		public virtual void PrEmployeeProjectRemove( CsModelObjects.EmployeeProject val ) {
			
			this.loadEmployeeProjects();
			this._deletedEmployeeProjects.Add(val);
			this._EmployeeProjects.Remove(val);

        }
		
		public virtual IEnumerable< CsModelObjects.EmployeeProject >PrEmployeeProjectsGetDeleted() {
			
			return this._deletedEmployeeProjects;

        }

        public virtual IEnumerable< CsModelObjects.EmployeeProject > PrEmployeeProjects {

            get {
				//'1 to many relation
                //'LAZY LOADING! Only hit the database to get the child object if we need it
                if ( this._EmployeeProjects == null ) {
                    this.loadEmployeeProjects();
                } 
				
                return this._EmployeeProjects;
            }
            
			set {
				if (value == null ) {
					this._EmployeeProjects = null;
                } else {
                    this._EmployeeProjects = new List< CsModelObjects.EmployeeProject >();
                    this.addToEmployeeProjectsList(value);
                }
			}
        }

		/// <summary>
        /// Private method to add to the EmployeeProjects List. 
		/// The list must have aldready been initialized
        /// </summary>
		private void addToEmployeeProjectsList( IEnumerable< CsModelObjects.EmployeeProject> value ) {

			IEnumerator< CsModelObjects.EmployeeProject> enumtor = value.GetEnumerator();
        
		    while (enumtor.MoveNext()) {
                CsModelObjects.EmployeeProject v = enumtor.Current;
                v.IDChanged += this.handleParentIdChanged;
                this._EmployeeProjects.Add(v);
            }

        } //End Sub
        
        /// <summary>
        /// Loads child objects from dabatabase, if not loaded already
        /// </summary>
        private void loadEmployeeProjects() {
			
			if (this.EmployeeProjectsLoaded)return;
			//init list
			this._EmployeeProjects = new List< CsModelObjects.EmployeeProject>();

			if (! this.isNew ) {
                this.addToEmployeeProjectsList( new CsModelMappers.EmployeeProjectDBMapper().findList("EPEmployeeId={0}", this.PrEmployeeId));
            }
            
			this.EmployeeProjectsLoaded = true;
        } 
		#endregion


		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_EMPLOYEEID:
			return this.PrEmployeeId;
		case FLD_EMPLOYEENAME:
			return this.PrEmployeeName;
		case FLD_EMPLOYEERANKID:
			return this.PrEmployeeRankId;
		case FLD_SALARY:
			return this.PrSalary;
		case FLD_ADDRESS:
			return this.PrAddress;
		case FLD_TELEPHONE:
			return this.PrTelephone;
		case FLD_MOBILE:
			return this.PrMobile;
		case FLD_IDNUMBER:
			return this.PrIdNumber;
		case FLD_SSINUMBER:
			return this.PrSSINumber;
		case FLD_HIREDATE:
			return this.PrHireDate;
		case FLD_NUMDEPENDENTS:
			return this.PrNumDependents;
		case FLD_EMPLOYEETYPECODE:
			return this.PrEmployeeTypeCode;
		case FLD_CREATEDATE:
			return this.CreateDate;
		case FLD_UPDATEDATE:
			return this.UpdateDate;
		case FLD_CREATEUSER:
			return this.CreateUser;
		case FLD_UPDATEUSER:
			return this.UpdateUser;
		case FLD_SAMPLEGUIDFIELD:
			return this.PrSampleGuidField;
		case FLD_ISACTIVE:
			return this.PrIsActive;
		case FLD_SAMPLEBIGINT:
			return this.PrSampleBigInt;
		case FLD_SAMPLESMALLINT:
			return this.PrSampleSmallInt;
		case FLD_SAMPLENUMERICFIELDINT:
			return this.PrSampleNumericFieldInt;
		case FLD_SAMPLENUMERICFIELD2DECIMALS:
			return this.PrSampleNumericField2Decimals;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_EMPLOYEEID.ToLower() ) {
			return this.PrEmployeeId;
		} else if (fieldKey==STR_FLD_EMPLOYEENAME.ToLower() ) {
			return this.PrEmployeeName;
		} else if (fieldKey==STR_FLD_EMPLOYEERANKID.ToLower() ) {
			return this.PrEmployeeRankId;
		} else if (fieldKey==STR_FLD_SALARY.ToLower() ) {
			return this.PrSalary;
		} else if (fieldKey==STR_FLD_ADDRESS.ToLower() ) {
			return this.PrAddress;
		} else if (fieldKey==STR_FLD_TELEPHONE.ToLower() ) {
			return this.PrTelephone;
		} else if (fieldKey==STR_FLD_MOBILE.ToLower() ) {
			return this.PrMobile;
		} else if (fieldKey==STR_FLD_IDNUMBER.ToLower() ) {
			return this.PrIdNumber;
		} else if (fieldKey==STR_FLD_SSINUMBER.ToLower() ) {
			return this.PrSSINumber;
		} else if (fieldKey==STR_FLD_HIREDATE.ToLower() ) {
			return this.PrHireDate;
		} else if (fieldKey==STR_FLD_NUMDEPENDENTS.ToLower() ) {
			return this.PrNumDependents;
		} else if (fieldKey==STR_FLD_EMPLOYEETYPECODE.ToLower() ) {
			return this.PrEmployeeTypeCode;
		} else if (fieldKey==STR_FLD_CREATEDATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATEDATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_CREATEUSER.ToLower() ) {
			return this.CreateUser;
		} else if (fieldKey==STR_FLD_UPDATEUSER.ToLower() ) {
			return this.UpdateUser;
		} else if (fieldKey==STR_FLD_SAMPLEGUIDFIELD.ToLower() ) {
			return this.PrSampleGuidField;
		} else if (fieldKey==STR_FLD_ISACTIVE.ToLower() ) {
			return this.PrIsActive;
		} else if (fieldKey==STR_FLD_SAMPLEBIGINT.ToLower() ) {
			return this.PrSampleBigInt;
		} else if (fieldKey==STR_FLD_SAMPLESMALLINT.ToLower() ) {
			return this.PrSampleSmallInt;
		} else if (fieldKey==STR_FLD_SAMPLENUMERICFIELDINT.ToLower() ) {
			return this.PrSampleNumericFieldInt;
		} else if (fieldKey==STR_FLD_SAMPLENUMERICFIELD2DECIMALS.ToLower() ) {
			return this.PrSampleNumericField2Decimals;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
		switch (fieldKey) {
		case FLD_EMPLOYEEID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrEmployeeId=(System.Int64)val;
			} //
			return;
		case FLD_EMPLOYEENAME:
			if (val == DBNull.Value || val == null ){
				this.PrEmployeeName = null;
			} else {
				this.PrEmployeeName=(System.String)val;
			} //
			return;
		case FLD_EMPLOYEERANKID:
			if (val == DBNull.Value || val == null ){
				this.PrEmployeeRankId = null;
			} else {
				this.PrEmployeeRankId=(System.Int64)val;
			} //
			return;
		case FLD_SALARY:
			if (val == DBNull.Value || val == null ){
				this.PrSalary = null;
			} else {
				this.PrSalary=(System.Decimal)val;
			} //
			return;
		case FLD_ADDRESS:
			if (val == DBNull.Value || val == null ){
				this.PrAddress = null;
			} else {
				this.PrAddress=(System.String)val;
			} //
			return;
		case FLD_TELEPHONE:
			if (val == DBNull.Value || val == null ){
				this.PrTelephone = null;
			} else {
				this.PrTelephone=(System.String)val;
			} //
			return;
		case FLD_MOBILE:
			if (val == DBNull.Value || val == null ){
				this.PrMobile = null;
			} else {
				this.PrMobile=(System.String)val;
			} //
			return;
		case FLD_IDNUMBER:
			if (val == DBNull.Value || val == null ){
				this.PrIdNumber = null;
			} else {
				this.PrIdNumber=(System.String)val;
			} //
			return;
		case FLD_SSINUMBER:
			if (val == DBNull.Value || val == null ){
				this.PrSSINumber = null;
			} else {
				this.PrSSINumber=(System.String)val;
			} //
			return;
		case FLD_HIREDATE:
			if (val == DBNull.Value || val == null ){
				this.PrHireDate = null;
			} else {
				this.PrHireDate=(System.DateTime)val;
			} //
			return;
		case FLD_NUMDEPENDENTS:
			if (val == DBNull.Value || val == null ){
				this.PrNumDependents = null;
			} else {
				this.PrNumDependents=(System.Int64)val;
			} //
			return;
		case FLD_EMPLOYEETYPECODE:
			if (val == DBNull.Value || val == null ){
				this.PrEmployeeTypeCode = null;
			} else {
				this.PrEmployeeTypeCode=(System.String)val;
			} //
			return;
		case FLD_CREATEDATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime)val;
			} //
			return;
		case FLD_UPDATEDATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime)val;
			} //
			return;
		case FLD_CREATEUSER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			} //
			return;
		case FLD_UPDATEUSER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			} //
			return;
		case FLD_SAMPLEGUIDFIELD:
			if (val == DBNull.Value || val == null ){
				this.PrSampleGuidField = null;
			} else {
				this.PrSampleGuidField=(System.Guid)val;
			} //
			return;
		case FLD_ISACTIVE:
			if (val == DBNull.Value || val == null ){
				this.PrIsActive = false;
			} else {
				this.PrIsActive=(System.Boolean)val;
			} //
			return;
		case FLD_SAMPLEBIGINT:
			if (val == DBNull.Value || val == null ){
				this.PrSampleBigInt = null;
			} else {
				this.PrSampleBigInt=(System.Int64)val;
			} //
			return;
		case FLD_SAMPLESMALLINT:
			if (val == DBNull.Value || val == null ){
				this.PrSampleSmallInt = null;
			} else {
				this.PrSampleSmallInt=(System.Int64)val;
			} //
			return;
		case FLD_SAMPLENUMERICFIELDINT:
			if (val == DBNull.Value || val == null ){
				this.PrSampleNumericFieldInt = null;
			} else {
				this.PrSampleNumericFieldInt=(System.Int64)val;
			} //
			return;
		case FLD_SAMPLENUMERICFIELD2DECIMALS:
			if (val == DBNull.Value || val == null ){
				this.PrSampleNumericField2Decimals = null;
			} else {
				this.PrSampleNumericField2Decimals=(System.Decimal)val;
			} //
			return;
		default:
			return;
		}

		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
		if ( fieldKey==STR_FLD_EMPLOYEEID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrEmployeeId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEENAME.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEmployeeName = null;
			} else {
				this.PrEmployeeName=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEERANKID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEmployeeRankId = null;
			} else {
				this.PrEmployeeRankId=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SALARY.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSalary = null;
			} else {
				this.PrSalary=(System.Decimal)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_ADDRESS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrAddress = null;
			} else {
				this.PrAddress=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_TELEPHONE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrTelephone = null;
			} else {
				this.PrTelephone=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_MOBILE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrMobile = null;
			} else {
				this.PrMobile=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_IDNUMBER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrIdNumber = null;
			} else {
				this.PrIdNumber=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SSINUMBER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSSINumber = null;
			} else {
				this.PrSSINumber=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_HIREDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrHireDate = null;
			} else {
				this.PrHireDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_NUMDEPENDENTS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrNumDependents = null;
			} else {
				this.PrNumDependents=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_EMPLOYEETYPECODE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrEmployeeTypeCode = null;
			} else {
				this.PrEmployeeTypeCode=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SAMPLEGUIDFIELD.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSampleGuidField = null;
			} else {
				this.PrSampleGuidField=(System.Guid)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_ISACTIVE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrIsActive = false;
			} else {
				this.PrIsActive=(System.Boolean)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SAMPLEBIGINT.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSampleBigInt = null;
			} else {
				this.PrSampleBigInt=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SAMPLESMALLINT.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSampleSmallInt = null;
			} else {
				this.PrSampleSmallInt=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SAMPLENUMERICFIELDINT.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSampleNumericFieldInt = null;
			} else {
				this.PrSampleNumericFieldInt=(System.Int64)val;
			}
			return;
		} else if ( fieldKey==STR_FLD_SAMPLENUMERICFIELD2DECIMALS.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrSampleNumericField2Decimals = null;
			} else {
				this.PrSampleNumericField2Decimals=(System.Decimal)val;
			}
			return;
		}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(EmployeeBase other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.PrEmployeeId == other.PrEmployeeId
				&& this.PrEmployeeName == other.PrEmployeeName
				&& this.PrEmployeeRankId.GetValueOrDefault() == other.PrEmployeeRankId.GetValueOrDefault()
				&& this.PrSalary.GetValueOrDefault() == other.PrSalary.GetValueOrDefault()
				&& this.PrAddress == other.PrAddress
				&& this.PrTelephone == other.PrTelephone
				&& this.PrMobile == other.PrMobile
				&& this.PrIdNumber == other.PrIdNumber
				&& this.PrSSINumber == other.PrSSINumber
				&& this.PrHireDate.GetValueOrDefault() == other.PrHireDate.GetValueOrDefault()
				&& this.PrNumDependents.GetValueOrDefault() == other.PrNumDependents.GetValueOrDefault()
				&& this.PrEmployeeTypeCode == other.PrEmployeeTypeCode
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.CreateUser == other.CreateUser
				&& this.UpdateUser == other.UpdateUser
				&& this.PrSampleGuidField.GetValueOrDefault() == other.PrSampleGuidField.GetValueOrDefault()
				&& this.PrIsActive == other.PrIsActive
				&& this.PrSampleBigInt.GetValueOrDefault() == other.PrSampleBigInt.GetValueOrDefault()
				&& this.PrSampleSmallInt.GetValueOrDefault() == other.PrSampleSmallInt.GetValueOrDefault()
				&& this.PrSampleNumericFieldInt.GetValueOrDefault() == other.PrSampleNumericFieldInt.GetValueOrDefault()
				&& this.PrSampleNumericField2Decimals.GetValueOrDefault() == other.PrSampleNumericField2Decimals.GetValueOrDefault();;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.PrEmployeeId.GetHashCode()
				 ^ this.getStringHashCode(this.PrEmployeeName)
				 ^ this.PrEmployeeRankId.GetHashCode()
				 ^ this.PrSalary.GetHashCode()
				 ^ this.getStringHashCode(this.PrAddress)
				 ^ this.getStringHashCode(this.PrTelephone)
				 ^ this.getStringHashCode(this.PrMobile)
				 ^ this.getStringHashCode(this.PrIdNumber)
				 ^ this.getStringHashCode(this.PrSSINumber)
				 ^ this.PrHireDate.GetHashCode()
				 ^ this.PrNumDependents.GetHashCode()
				 ^ this.getStringHashCode(this.PrEmployeeTypeCode)
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.CreateUser)
				 ^ this.getStringHashCode(this.UpdateUser)
				 ^ this.PrSampleGuidField.GetHashCode()
				 ^ this.PrIsActive.GetHashCode()
				 ^ this.PrSampleBigInt.GetHashCode()
				 ^ this.PrSampleSmallInt.GetHashCode()
				 ^ this.PrSampleNumericFieldInt.GetHashCode()
				 ^ this.PrSampleNumericField2Decimals.GetHashCode();;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is EmployeeBase) {

				return this.Equals((EmployeeBase)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(EmployeeBase obj1, EmployeeBase obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(EmployeeBase obj1, EmployeeBase obj2)
		{
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy()
		{
			//creates a copy

			//NOTE: we can't cast from EmployeeBase to Employee, so below we 
			//instantiate a Employee, NOT a EmployeeBase object
			Employee ret = EmployeeFactory.Create();

		ret.PrEmployeeId = this.PrEmployeeId;
		ret.PrEmployeeName = this.PrEmployeeName;
		ret.PrEmployeeRankId = this.PrEmployeeRankId;
		ret.PrSalary = this.PrSalary;
		ret.PrAddress = this.PrAddress;
		ret.PrTelephone = this.PrTelephone;
		ret.PrMobile = this.PrMobile;
		ret.PrIdNumber = this.PrIdNumber;
		ret.PrSSINumber = this.PrSSINumber;
		ret.PrHireDate = this.PrHireDate;
		ret.PrNumDependents = this.PrNumDependents;
		ret.PrEmployeeTypeCode = this.PrEmployeeTypeCode;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.CreateUser = this.CreateUser;
		ret.UpdateUser = this.UpdateUser;
		ret.PrSampleGuidField = this.PrSampleGuidField;
		ret.PrIsActive = this.PrIsActive;
		ret.PrSampleBigInt = this.PrSampleBigInt;
		ret.PrSampleSmallInt = this.PrSampleSmallInt;
		ret.PrSampleNumericFieldInt = this.PrSampleNumericFieldInt;
		ret.PrSampleNumericField2Decimals = this.PrSampleNumericField2Decimals;



			return ret;

		}

	public int CompareTo(Employee other ) {
		return  this.PrEmployeeName.CompareTo(other.PrEmployeeName);
	}

		#endregion

#region "parentIdChanged"
	//below sub is called when parentIdChanged
	public override void handleParentIdChanged(IModelObject parentMo ){
		// Assocations from CsModelObjects.EmployeeRank
		if ( parentMo is CsModelObjects.EmployeeRank) {
			this.PrEmployeeRankId= ((CsModelObjects.EmployeeRank)parentMo).PrRankId;
		}
	}
#endregion



		#region "ID Property"

		public override object Id {
			get { return this._EmployeeId; }
			set {
				this._EmployeeId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class EmployeeRequiredFieldsValidator : IModelObjectValidator
	{


		public void validate(org.model.lib.Model.IModelObject imo) {
			Employee mo = (Employee)imo;
if (string.IsNullOrEmpty( mo.PrEmployeeName)) {
		throw new ModelObjectRequiredFieldException("EmployeeName");
}
if (mo.PrEmployeeRankId == null ) {
		throw new ModelObjectRequiredFieldException("EmployeeRankId");
}

		}

	}
	#endregion

}


