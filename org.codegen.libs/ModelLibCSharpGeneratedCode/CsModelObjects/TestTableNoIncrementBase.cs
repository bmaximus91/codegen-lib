using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.Serialization;
using org.model.lib.Model;
using org.model.lib;

using Microsoft.VisualBasic;
using System.Runtime.InteropServices;
using System.Xml.Serialization;
using System.Data.Linq.Mapping;
using System.ComponentModel.DataAnnotations;


//<comments>
//************************************************************
// Template: ModelBase2.csharp.txt
// Class autogenerated on 09/06/2013 8:02:57 AM by ModelGenerator
// Extends base model object class
// *** DO NOT change code in this class.  
//     It will be re-generated and 
//     overwritten by the code generator ****
//</comments>
namespace CsModelObjects {

	[Table(Name = "TestTableNoIncrement")]
	[DataContract][SelectObject("TestTableNoIncrement")][KeyFieldName("TestTableNoIncrementId")]
	[DefaultMapperAttr(typeof(CsModelMappers.TestTableNoIncrementDBMapper)), ComVisible(false), Serializable(), System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
	partial class TestTableNoIncrement:ModelObject,IEquatable<TestTableNoIncrement> ,IAuditable {

		#region "Constructor"

		public TestTableNoIncrement() {
			this.Id = ModelObjectKeyGen.nextId();
			this.addValidator(new TestTableNoIncrementRequiredFieldsValidator());
		}

		#endregion

		#region "Children and Parents"
		
		[OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context) {
            this.IsObjectLoading = true;
        }

		[OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context) {

			this.IsObjectLoading = false;
			this.isDirty = true;
        }

		public override void loadObjectHierarchy() {

		}

		/// <summary>
		/// Returns the *loaded* children of this model object.
		/// Any records that are not loaded (ie the getter method was not called) are not returned.
		/// To get all child records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getChildren() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		/// <summary>
		/// Returns the **loaded** parent objects of this model object.
		/// Any records are not loaded (ie the getter method was not called) are not returned.
		/// To get all parent records tied to this object, call loadObjectHierarchy() method
		/// </summary>
		public override List<ModelObject> getParents() {
			List<ModelObject> ret = new List<ModelObject>();
			
			return ret;
		}

		#endregion
		#region "Field CONSTANTS"

					public const String STR_FLD_TESTTABLENOINCREMENTID = "TestTableNoIncrementId";
			public const String STR_FLD_TESTTABLENOINCREMENT = "TestTableNoIncrement";
			public const String STR_FLD_CREATEDATE = "Createdate";
			public const String STR_FLD_UPDATEDATE = "Updatedate";
			public const String STR_FLD_UPDATEUSER = "Updateuser";
			public const String STR_FLD_CREATEUSER = "Createuser";


				public const int FLD_TESTTABLENOINCREMENTID = 0;
		public const int FLD_TESTTABLENOINCREMENT = 1;
		public const int FLD_CREATEDATE = 2;
		public const int FLD_UPDATEDATE = 3;
		public const int FLD_UPDATEUSER = 4;
		public const int FLD_CREATEUSER = 5;



		///<summary> Returns the names of fields in the object as a string array.
		/// Useful in automatically setting/getting values from UI objects (windows or web Form)</summary>
		/// <returns> string array </returns>	 
		public override string[] getFieldList()
		{
			return new string[] {
				STR_FLD_TESTTABLENOINCREMENTID,STR_FLD_TESTTABLENOINCREMENT,STR_FLD_CREATEDATE,STR_FLD_UPDATEDATE,STR_FLD_UPDATEUSER,STR_FLD_CREATEUSER
			};
		}

		#endregion

		#region "Field Declarations"

	private System.Int64 _TestTableNoIncrementId;
	private System.String _TestTableNoIncrement;
	private System.DateTime? _Createdate = null;
	private System.DateTime? _Updatedate = null;
	private System.String _Updateuser;
	private System.String _Createuser;

		#endregion

		#region "Field Properties"

		//Field TestTableNoIncrementId
		[Required]
		[Column(Name="TestTableNoIncrementId",Storage = "_TestTableNoIncrementId", IsPrimaryKey=true,DbType = "int NOT NULL",CanBeNull = false)]
		[DataMember]
		public virtual System.Int64 PrTestTableNoIncrementId{
			get{			
				return _TestTableNoIncrementId;
			}
			set {
				if (ModelObject.valueChanged(_TestTableNoIncrementId, value)){
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_TESTTABLENOINCREMENTID);
					}
					this._TestTableNoIncrementId = value;
					this.raiseBroadcastIdChange();
				}
			}
		}
		//Field TestTableNoIncrement
		[Key]
		[StringLength(50, ErrorMessage="TestTableNoIncrement must be 50 characters or less")]
		[Column(Name="TestTableNoIncrement",Storage = "_TestTableNoIncrement", IsPrimaryKey=false,DbType = "nvarchar",CanBeNull = true)]
		[DataMember]
		public virtual System.String PrTestTableNoIncrement{
			get{			
				return _TestTableNoIncrement;
			}
			set {
				if (ModelObject.valueChanged(_TestTableNoIncrement, value)){
					if (value != null && value.Length > 50){
						throw new ModelObjectFieldTooLongException("TestTableNoIncrement");
					}
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_TESTTABLENOINCREMENT);
					}
					this._TestTableNoIncrement = value;
				}
			}
		}
		//Field createdate
		[Key]
		[Required]
		[Column(Name="createdate",Storage = "_Createdate", IsPrimaryKey=false,DbType = "datetime NOT NULL",CanBeNull = false)]
		[DataMember]
		public virtual System.DateTime? CreateDate{
			get{			
				return _Createdate;
			}
			set {
				if (ModelObject.valueChanged(_Createdate, value)){
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_CREATEDATE);
					}
					this._Createdate = value;
				}
			}
		}
		//Field updatedate
		[Key]
		[Required]
		[Column(Name="updatedate",Storage = "_Updatedate", IsPrimaryKey=false,DbType = "datetime NOT NULL",CanBeNull = false)]
		[DataMember]
		public virtual System.DateTime? UpdateDate{
			get{			
				return _Updatedate;
			}
			set {
				if (ModelObject.valueChanged(_Updatedate, value)){
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_UPDATEDATE);
					}
					this._Updatedate = value;
				}
			}
		}
		//Field updateuser
		[Key]
		[Required]
		[StringLength(10, ErrorMessage="updateuser must be 10 characters or less")]
		[Column(Name="updateuser",Storage = "_Updateuser", IsPrimaryKey=false,DbType = "varchar NOT NULL",CanBeNull = false)]
		[DataMember]
		public virtual System.String UpdateUser{
			get{			
				return _Updateuser;
			}
			set {
				if (ModelObject.valueChanged(_Updateuser, value)){
					if (value != null && value.Length > 10){
						throw new ModelObjectFieldTooLongException("updateuser");
					}
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_UPDATEUSER);
					}
					this._Updateuser = value;
				}
			}
		}
		//Field createuser
		[Key]
		[Required]
		[StringLength(10, ErrorMessage="createuser must be 10 characters or less")]
		[Column(Name="createuser",Storage = "_Createuser", IsPrimaryKey=false,DbType = "varchar NOT NULL",CanBeNull = false)]
		[DataMember]
		public virtual System.String CreateUser{
			get{			
				return _Createuser;
			}
			set {
				if (ModelObject.valueChanged(_Createuser, value)){
					if (value != null && value.Length > 10){
						throw new ModelObjectFieldTooLongException("createuser");
					}
					if (!this.IsObjectLoading) {
						this.isDirty = true; //
						this.setFieldChanged(STR_FLD_CREATEUSER);
					}
					this._Createuser = value;
				}
			}
		}

		#endregion

		#region "Getters/Setters of values by field index/name"
		public override object getAttribute(int fieldKey){

		switch (fieldKey) {
		case FLD_TESTTABLENOINCREMENTID:
			return this.PrTestTableNoIncrementId;
		case FLD_TESTTABLENOINCREMENT:
			return this.PrTestTableNoIncrement;
		case FLD_CREATEDATE:
			return this.CreateDate;
		case FLD_UPDATEDATE:
			return this.UpdateDate;
		case FLD_UPDATEUSER:
			return this.UpdateUser;
		case FLD_CREATEUSER:
			return this.CreateUser;
		default:
			return null;
		} //end switch

		}

		public override object getAttribute(string fieldKey) {
			fieldKey = fieldKey.ToLower();

		if (fieldKey==STR_FLD_TESTTABLENOINCREMENTID.ToLower() ) {
			return this.PrTestTableNoIncrementId;
		} else if (fieldKey==STR_FLD_TESTTABLENOINCREMENT.ToLower() ) {
			return this.PrTestTableNoIncrement;
		} else if (fieldKey==STR_FLD_CREATEDATE.ToLower() ) {
			return this.CreateDate;
		} else if (fieldKey==STR_FLD_UPDATEDATE.ToLower() ) {
			return this.UpdateDate;
		} else if (fieldKey==STR_FLD_UPDATEUSER.ToLower() ) {
			return this.UpdateUser;
		} else if (fieldKey==STR_FLD_CREATEUSER.ToLower() ) {
			return this.CreateUser;
		} else {
			return null;
		}
		}

		public override void setAttribute(int fieldKey, object val){
			try {
		switch (fieldKey) {
		case FLD_TESTTABLENOINCREMENTID:
			if (val == DBNull.Value || val == null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrTestTableNoIncrementId=(System.Int64)val;
			} //
			return;
		case FLD_TESTTABLENOINCREMENT:
			if (val == DBNull.Value || val == null ){
				this.PrTestTableNoIncrement = null;
			} else {
				this.PrTestTableNoIncrement=(System.String)val;
			} //
			return;
		case FLD_CREATEDATE:
			if (val == DBNull.Value || val == null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_UPDATEDATE:
			if (val == DBNull.Value || val == null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=(System.DateTime?)val;
			} //
			return;
		case FLD_UPDATEUSER:
			if (val == DBNull.Value || val == null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=(System.String)val;
			} //
			return;
		case FLD_CREATEUSER:
			if (val == DBNull.Value || val == null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=(System.String)val;
			} //
			return;
		default:
			return;
		}

			} catch ( Exception ex ) {
				throw new ApplicationException(
						String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
								fieldKey, val, ex.Message));
			}
		}

		public override void setAttribute(string fieldKey, object val) {
			fieldKey = fieldKey.ToLower();
			try {
		if ( fieldKey==STR_FLD_TESTTABLENOINCREMENTID.ToLower()){
			if (val == DBNull.Value || val ==null ){
				throw new ApplicationException("Can't set Primary Key to null");
			} else {
				this.PrTestTableNoIncrementId=Convert.ToInt64(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_TESTTABLENOINCREMENT.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.PrTestTableNoIncrement = null;
			} else {
				this.PrTestTableNoIncrement=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateDate = null;
			} else {
				this.CreateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEDATE.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateDate = null;
			} else {
				this.UpdateDate=Convert.ToDateTime(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_UPDATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.UpdateUser = null;
			} else {
				this.UpdateUser=Convert.ToString(val);
			}
			return;
		} else if ( fieldKey==STR_FLD_CREATEUSER.ToLower()){
			if (val == DBNull.Value || val ==null ){
				this.CreateUser = null;
			} else {
				this.CreateUser=Convert.ToString(val);
			}
			return;
		}
			} catch ( Exception ex ) {
				throw new ApplicationException(
					String.Format("Error setting field with index {0}, value \"{1}\" : {2}", 
							fieldKey, val, ex.Message));
			}
		}

		#endregion
		#region "Overrides of GetHashCode and Equals "
		public bool Equals(TestTableNoIncrement other)
		{

			//typesafe equals, checks for equality of fields
			if (other == null)
				return false;
			if (object.ReferenceEquals(other, this))
				return true;

			return this.PrTestTableNoIncrementId == other.PrTestTableNoIncrementId
				&& this.PrTestTableNoIncrement == other.PrTestTableNoIncrement
				&& this.CreateDate.GetValueOrDefault() == other.CreateDate.GetValueOrDefault()
				&& this.UpdateDate.GetValueOrDefault() == other.UpdateDate.GetValueOrDefault()
				&& this.UpdateUser == other.UpdateUser
				&& this.CreateUser == other.CreateUser;;

		}

		public override int GetHashCode()
		{
			//using Xor has the advantage of not overflowing the integer.
			return this.PrTestTableNoIncrementId.GetHashCode()
				 ^ this.getStringHashCode(this.PrTestTableNoIncrement)
				 ^ this.CreateDate.GetHashCode()
				 ^ this.UpdateDate.GetHashCode()
				 ^ this.getStringHashCode(this.UpdateUser)
				 ^ this.getStringHashCode(this.CreateUser);;

		}

		public override bool Equals(object Obj) {

			if (Obj != null && Obj is TestTableNoIncrement) {

				return this.Equals((TestTableNoIncrement)Obj);

			} else {
				return false;
			}

		}

		public static bool operator ==(TestTableNoIncrement obj1, TestTableNoIncrement obj2)
		{
			return object.Equals(obj1, obj2);
		}

		public static bool operator !=(TestTableNoIncrement obj1, TestTableNoIncrement obj2) {
			return !(obj1 == obj2);
		}

		#endregion

		#region "Copy and sort"

		public override IModelObject copy() {
			//creates a copy
			TestTableNoIncrement ret = new TestTableNoIncrement();
		ret.PrTestTableNoIncrementId = this.PrTestTableNoIncrementId;
		ret.PrTestTableNoIncrement = this.PrTestTableNoIncrement;
		ret.CreateDate = this.CreateDate;
		ret.UpdateDate = this.UpdateDate;
		ret.UpdateUser = this.UpdateUser;
		ret.CreateUser = this.CreateUser;

			return ret;

		}

		#endregion




		#region "ID Property"

		[DataMember]public sealed override object Id {
			get { return this._TestTableNoIncrementId; }
			set {
				this._TestTableNoIncrementId = Convert.ToInt64(value);
				this.raiseBroadcastIdChange();
			}
		}
		#endregion

		#region "Extra Code"

		#endregion

	}

	#region "Req Fields validator"
	[System.Runtime.InteropServices.ComVisible(false)]
	public class TestTableNoIncrementRequiredFieldsValidator : IModelObjectValidator {

		public void validate(org.model.lib.Model.IModelObject imo) {
			TestTableNoIncrement mo = (TestTableNoIncrement)imo;
			if (mo.CreateDate == null ) {
		throw new ModelObjectRequiredFieldException("Createdate");
}
if (mo.UpdateDate == null ) {
		throw new ModelObjectRequiredFieldException("Updatedate");
}
if (string.IsNullOrEmpty( mo.UpdateUser)) {
		throw new ModelObjectRequiredFieldException("Updateuser");
}
if (string.IsNullOrEmpty( mo.CreateUser)) {
		throw new ModelObjectRequiredFieldException("Createuser");
}

		}

	}
	#endregion

}


