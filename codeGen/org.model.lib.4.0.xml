<?xml version="1.0"?>
<doc>
<assembly>
<name>
org.model.lib.4.0
</name>
</assembly>
<members>
<member name="M:org.model.lib.Model.IDataMapper.save(org.model.lib.Model.IModelObject)">
	<summary>
 Saves a Domain Object from the persistence medium 
 </summary>
	<param name="mobj"> The ModelObject to save </param>
</member><member name="M:org.model.lib.Model.IDataMapper.delete(org.model.lib.Model.IModelObject)">
	<summary>
 Deletes a Domain Object from the persistence medium </summary>
	<param name="mobj"> The ModelObject to delete </param>
</member><member name="M:org.model.lib.Model.IDataMapper.saveParents(org.model.lib.Model.IModelObject)">
	<summary>Saves any **Parent** ModelObjects associated with the ModelObject to the persistence medium.
 Clients should override this for any Parent objects that the Model Object mo carries
 Example:
 <ul>
			<li>Person and Address, 1-to-1 relationship, with the AddressID on the Person object</li>
			<li>Address must be saved first in order to save Person.</li>
			<li>Address object must be a parent</li>
		</ul>
	</summary>
	<param name="mo"> ModelObject that parent belongs to </param>
</member><member name="M:org.model.lib.Model.IDataMapper.saveChildren(org.model.lib.Model.IModelObject)">
	<summary>  Saves any child ModelObjects associated with the ModelObject to the persistence medium .
 Clients should override this for any children objects that the Model Object mo carries </summary>
	<param name="mo"> ModelObject that children belong to </param>
</member><member name="M:org.model.lib.Model.IDataMapper.update(org.model.lib.Model.IModelObject)">
	<summary>
 Performs an <b>update</b> operation to the database 
 </summary>
	<param name="o"> ModelObject to save to database </param>
</member><member name="M:org.model.lib.Model.IDataMapper.insert(org.model.lib.Model.IModelObject)">
	<summary>  
 Performs an <b>insert</b> operation to the database 
 </summary>
	<param name="mo"> ModelObject to save to database </param>
</member><member name="P:org.model.lib.Model.IDataMapper.Loader">
	<summary>
 Gets/Sets the object responsible for loading ModelObject
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.model.lib.Model.IModelObjectLoader">
	<summary>
 Loader of Model Objects Interface
 </summary>
	<remarks></remarks>
</member><member name="P:org.model.lib.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:org.model.lib.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:org.model.lib.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:org.model.lib.Utilities.getResourceFileText(System.String)">
	<summary>
 Loads a file stored in an assembly as "embedded resource"
 </summary>
	<param name="resname">Fully qualified resource name, for example, com.neu.lib.File.txt</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.model.lib.Utilities">
	<summary>
 Shared utiliy functions
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.Model.IChildObject">
	<summary>
 Interface used as a type for child objects of ModelObjects.
 Child objects of ModelObjects can be other ModelObjects or a ModelObjectList
 so both ModelObject and ModelObjectList implement this interface.
 </summary>
	<remarks></remarks>
</member><member name="E:org.model.lib.Model.IModelObject.IDChanged">
	<summary>
 Event fired when ID (primary key) of model object has changed
 </summary>
	<param name="mo"></param>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.IModelObject.getFieldList">
	<summary> 
 Returns the names of fields in the object as a string array. 
 Useful in automatically setting/getting values from UI objects (windows or web Form)
 </summary>
	<returns> string array </returns>
</member><member name="M:org.model.lib.Model.IModelObject.valuesToString">
	<summary> 
 return all field values as a string
 used in error messages
 </summary>
</member><member name="P:org.model.lib.Model.IModelObject.isDirty">
	<summary>
 Gets/Sets the dirty flag of the object.
 </summary>
</member><member name="P:org.model.lib.Model.IModelObject.isObjectOrChildrenDirty">
	<summary>
 Returns true if the model object or any of its chidlren 
 are dirty.  Checks the dirty flag or the dirty flag of any of
 the childrent 
 </summary>
</member><member name="P:org.model.lib.Model.IModelObject.NeedsSave">
	<summary>
 Returns true if the model object Needs save
 Checks the dirty flag or the dirty flag of any of
 the childrent and also if the isEmpty flag = false
 </summary>
</member><member name="P:org.model.lib.Model.IModelObject.isNew">
	<summary>
 Gets/Sets the "New" indicator of this object.  A new object is considered to be
 an object that has not been persisted to a database or other persistance medium
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.model.lib.Model.IModelObject.IsObjectLoading">
	<summary>
 Flag set to true when object is loading from a datareader or a dataset
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.IModelObject.handleParentIdChanged(org.model.lib.Model.IModelObject)">
	<summary>  
 Procedure to handle event IDChanged, fired after a ModelObject is
 saved to the database, and a new primary key as been created.  
 Clients should override this and do necessarry operations when 
 parent object changes ID. 
 </summary>
	<param name="parentMo"> 
 parent Model Object of class 
 </param>
</member><member name="M:org.model.lib.Model.IModelObject.validateDelete">
	<summary>  
 Clients should override this and perform 
 validations to the object BEFORE deletions. 
 </summary>
</member><member name="M:org.model.lib.Model.IModelObject.validateObject">
	<summary>  
 Final method that is automatically called from within save of model object
 It calls the following functions:
 <ol>
			<li>
				<b>validate</b>: Clients should override this and perform validations</li>
		</ol>
	</summary>
</member><member name="M:org.model.lib.Model.IModelObject.afterLoad">
	<summary>
 Procedure that is called after the ModelObject 
 is loaded from the DBMapper  
 </summary>
</member><member name="M:org.model.lib.Model.IModelObject.setAuditFields">
	<summary>
 Sub to set the audit fields CreateDate, UpdateDate, CreateUser, UpdateUser
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.Model.ModelObjectKeyGen">
	<summary>
 Generates ids for newly created Model objects.
 Every model object must have a unique identifier.
 </summary>
	<remarks></remarks>
</member><member name="P:org.model.lib.DataReaderLoader.DataSource">
	<summary>
 Gets/Sets the DataSource of the loader, an object if type IDataReader
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.DataReaderLoader.load(org.model.lib.Model.IModelObject)">
	<summary>
 Loads from IDataReader to ModelObject
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.DataReaderLoader">
	<summary>
 Loads a model object from a System.Data.IDataReader
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DataRowLoader.#ctor">
	<summary>
 Empty constructor
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DataRowLoader.load(org.model.lib.Model.IModelObject)">
	<summary>
 Loads ModelObject from data row.
 Fields in columns of Datatable must match fields in Model Object
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.DataRowLoader">
	<summary>
 Loads a model object from a System.Data.DataRow
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.SQLStmtsRegistry">
	<summary>
 Provides sql statements from xml files.
 Keeps a registry of files and statements.
 To get a statement, call SQLStmtsRegistry.getStatement(filekey,statemtKey)
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.IAuditable">
	<summary>
		<exclude/>
	</summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.IAuditable2">
	<summary>
 Same as IAuditable but user Audit Fields are Integers (for user ids)
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.IModelObjectValidator">
	<summary>
 Interface for classes responsible for validating a model object.
 Each model object instance has an internal array of these objects 
 and calls then sequantially before saving to the database, or with a call 
 to "validateObject()"
 </summary>
	<remarks></remarks>
</member><member name="F:org.model.lib.Model.ModelObject.changedFields">
	<summary>
 hashmap of Field name, Boolean that keeps track of changed fields
 </summary>
	<remarks></remarks>
</member><member name="P:org.model.lib.Model.ModelObject.Id">
	<summary> Gets/Sets the Id of the object  </summary>
	<returns> an int value stored in the Key object </returns>
</member><member name="M:org.model.lib.Model.ModelObject.setFieldChanged(System.String)">
	<summary>
 Sets a field as changed
 </summary>
	<param name="fieldname"></param>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.getDictionaryFromList(System.Collections.Generic.List{org.model.lib.Model.ModelObject},System.String)">
	<summary>
 Shared function to convert a list of model objects into a 
 </summary>
	<param name="inval"></param>
	<param name="field"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.isFieldChanged(System.String)">
	<summary>
 Returns true if the field has changed value
 </summary>
	<param name="fieldname"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.#ctor">
	<summary>
 Default constructor of model object.
 </summary>
	<remarks>
 The constructor sets the Id of the new object by calling ModelObjectKeyGen.nextId(), sets dirty to false
 and loads any configured validators from ModelContext.Current.getModelValidator
</remarks>
</member><member name="M:org.model.lib.Model.ModelObject.getFieldList">
	<summary> 
 Returns the names of fields in the object as a string array. 
 Useful in automatically setting/getting values from UI objects (windows or web Form)
</summary>
	<returns> string array </returns>
</member><member name="M:org.model.lib.Model.ModelObject.valuesToString">
	<summary> 
return all field values as a string
used in error messages
</summary>
</member><member name="P:org.model.lib.Model.ModelObject.isDirty">
	<summary>
 Gets/Sets the dirty flag of the object.
 </summary>
</member><member name="P:org.model.lib.Model.ModelObject.isObjectOrChildrenDirty">
	<summary>
 Returns true if the model object or any of its chidlren 
 are dirty.  Checks the dirty flag or the dirty flag of any of
 the childrent 
 </summary>
</member><member name="P:org.model.lib.Model.ModelObject.NeedsSave">
	<summary>
 Returns true if the model object Needs save
 Checks the dirty flag or the dirty flag of any of
 the childrent and also if the isEmpty flag = false
 </summary>
</member><member name="P:org.model.lib.Model.ModelObject.areChildrenOrParentsNeedSave">
	<summary>
 Private Property that checks dirty flag on all childrent of model object
 </summary>
	<value></value>
	<returns>True if any of the children of the model object are Dirty</returns>
	<remarks></remarks>
</member><member name="P:org.model.lib.Model.ModelObject.isNew">
	<summary>
 Gets/Sets the "New" indicator of this object.  A new object is considered to be
 an object that has not been persisted to a database or other persistance medium
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.valueChanged(System.Object,System.Object)">
	<summary>
 Compares val1 to val2 and returns true if they are not equal
 </summary>
	<param name="val1"></param>
	<param name="val2"></param>
	<returns>true if val1 is not equal to val2, false if the two are equal</returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.handleParentIdChanged(org.model.lib.Model.IModelObject)">
	<summary>  
 Procedure to handle event IDChanged, fired after a ModelObject is
 saved to the database, and a new primary key as been created.  
 Clients should override this and do necessarry operations when 
 parent object changes ID. 
 </summary>
	<param name="parentMo"> 
 parent Model Object of class 
 </param>
</member><member name="M:org.model.lib.Model.ModelObject.validateDelete">
	<summary>  
 Clients should override this and perform 
 validations to the object BEFORE deletions. 
 </summary>
</member><member name="M:org.model.lib.Model.ModelObject.validateObject">
	<summary>  
 Final method that is automatically called from within save of model object
 It calls the following functions:
 <ol>
			<li><b>validate</b>: Clients should override this and perform validations</li>
		</ol>
	</summary>
</member><member name="M:org.model.lib.Model.ModelObject.afterLoad">
	<summary>
 Procedure that is called after the ModelObject 
 is loaded from the DBMapper  
 </summary>
</member><member name="M:org.model.lib.Model.ModelObject.setAuditFields">
	<summary>
 Sub to set the audit fields CreateDate, UpdateDate, CreateUser, UpdateUser
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.merge(org.model.lib.Model.IModelObject)">
	<summary>
 Merges the model object with another instance of the model object
 Any fields in the current model object wither values retain their values
 Any fields that are null in the current model object and have values in the "other" 
 are copied over.  The primary key value is not copied.
 </summary>
	<param name="other">The other model object, must be the same type as the one we are merging from</param>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelObject.getAuditor">
	<summary>
 Returns the object responsible for mainaining the 4 Audit fields 
 of the model object.  
 </summary>
	<returns></returns>
	<remarks>
 IAudiable is an interface with 4 fields: CreateDate, CreateUser (String), UpdateDate and UpdateUser (String)
 IAudiable2 is an interface with 4 fields: CreateDate, CreateUser (Int), UpdateDate and UpdateUser (Int)
 </remarks>
</member><member name="M:org.model.lib.Model.ModelObject.loadObjectHierarchy">
	<summary>
 Call method to load all object Hierarchy.
 Effectively, calling this method causes the model object 
 to load all parents and children model objects
 </summary>
	<remarks></remarks>
</member><member name="T:org.model.lib.Model.ModelObject">
	<summary>  Model Objects 
 are often central to an application, since they usually model Database Tables to Objects.
 Model objects 
 often map roughly to the records of a corresponding database table 
 are often used as return values for Data Access Object methods 
 are easily tested using JUnit (or a similar tool) 
 can be used to implement the Model in a Model-View-Controller pattern 
  </summary>
</member><member name="M:org.model.lib.Model.ModelContext.newCurrent(System.Security.Principal.IPrincipal)">
	<summary>Creates a new intance of ModelContext and sets the Connection and Principal objects,
	 and marks it as current. </summary>
	<param name="principal"> User object for Security checks </param>
</member><member name="M:org.model.lib.Model.ModelContext.newCurrent(System.Security.Principal.IPrincipal,System.Globalization.CultureInfo)">
	<summary>
 Creates a new intance of ModelContext and sets the Connection,Principal and Lcoale objects,
	and marks it as current. </summary>
	<param name="principal"> User object for Security checks </param>
</member><member name="M:org.model.lib.Model.ModelContext.newCurrent(System.String,System.Globalization.CultureInfo)">
	<summary>
 Creates a new intance of ModelContext and sets the Principal and Locale objects,
	and marks it as current. 
 <b>This method should only be used for testing</b>
	</summary>
	<param name="username"> User name of ModelObjectIdentity for Security checks </param>
</member><member name="M:org.model.lib.Model.ModelContext.newForUnitTests">
	<summary>
 Creates a new intance of ModelContext and sets the Principal and Locale objects,
	and marks it as current. <b>This method should only be used for testing</b>
	</summary>
</member><member name="M:org.model.lib.Model.ModelContext.newCurrent">
	<summary>
 Creates a new intance of ModelContext and marks it as current. </summary>
</member><member name="M:org.model.lib.Model.ModelContext.setCurrent(org.model.lib.Model.ModelContext)">
	<summary>Creates a new intance of ModelContext and marks it as current. </summary>
</member><member name="P:org.model.lib.Model.ModelContext.Current">
	<summary>Retrieves the current intance of ModelContext </summary>
</member><member name="F:org.model.lib.Model.ModelContext.globalModelValidators">
	<summary>
 Dictionary of global validators, per type.
 The key should be a modelObject and the value should be a IModelObjectValidator type 
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelContext.addGlobalModelValidator(System.Type,System.Type)">
	<summary>
 Adds a global validator for a specific model object.  This allows for separating the model 
 from the logic of the application.  Without this, all validators would have to recide 
 inside the Model project
 </summary>
	<param name="modelObjectType">The type of the model object.  Use GetType(x) where x is the class (not instance) of the model object</param>
	<param name="validatorType">The type of the validator object.  Use GetType(val) where val is the class (not instance) of the validator</param>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelContext.getModelValidator(System.Type)">
	<summary>
 Returns a validator, if any, configured for the specified model object type
 </summary>
	<param name="modelObjectType">The type of the model object.  
 Use GetType(x) where x is the class (not instance) of the model object
 </param>
	<returns>
 Returns a validator, if any, configured for the specified model object type. 
 If not validator is configured, it returns null(nothing)
 </returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelContext.GetModelDefaultMapper(org.model.lib.Model.IModelObject)">
	<summary>
 Returns the default mapper for the mode object
 </summary>
	<param name="modelObjectInstance">Ab instance of IModelObject</param>
	<returns>DBMapper instance</returns>
</member><member name="M:org.model.lib.Model.ModelContext.saveModelObject(org.model.lib.Model.IModelObject)">
	<summary>
	</summary>
	<param name="modelObjectInstance">The model Object to save</param>
	<remarks></remarks>
</member><member name="M:org.model.lib.Model.ModelContext.deleteModelObject(org.model.lib.Model.IModelObject)">
	<summary>
	</summary>
	<param name="modelObjectInstance">The model Object to save</param>
	<remarks></remarks>
</member><member name="T:org.model.lib.Model.ModelContext">
	<summary>
 Class to fascilitate communication between UserInterace and Model Objects
 An ModelContext exists for each Thread.<br/>
		<p>
The class contains a Locale object, a UserObject currently running the application
and a database connection.  It can also receive other attributes, by calling
<code>setAttribute(String, Object)</code> and <code>getAttribute(String)</code></p>
		<b>IMPORTANT: The ModelContext must always be released in a finally clause</b>
Typical Usage:
 <example>
			<code lang="vbnet">
		Try 
	    	ModelContext.newCurrent(principal);
			ModelContext.Current().setAttribute("something", someObject);
     	...
     	Object me = ModelContext.Current().getAttribute("something");
     Finally
     	ModelContext.release();
     End Try
</code>
		</example>
	</summary>
</member><member name="M:org.model.lib.DBMapper.#ctor(org.model.lib.db.DBUtils)">
	<summary> Pass a valid dbConn for constructor.
	 We need a dbConn because most of the times we will be in a transaction </summary>
	<param name="c">
	</param>
</member><member name="M:org.model.lib.DBMapper.#ctor">
	<summary>
 Instantiation without a Connection. Connection is assigned by calling 
 ModelContext.CurrentDBUtils 
 </summary>
</member><member name="M:org.model.lib.DBMapper.findWhere(System.String,System.Object[])">
	<summary>
 Retrieves a modelobject based on the key value passed
 </summary>
	<param name="sWhereClause">Where clause to be applied to selectall</param>
	<returns>loaded ModelObject class instance</returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.findByKey(System.Object)">
	<summary>
 Retrieves a modelobject based on the key value passed
 </summary>
	<param name="IdValue">Primary Key value</param>
	<returns>loaded ModelObject class instance</returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.findList(System.String,System.Object[])">
	<summary>
 Retrieves an enumerable if IModelObject based on the key value passed
 </summary>
	<returns>List of loaded ModelObject class instances</returns>
	<remarks></remarks>
</member><member name="F:org.model.lib.DBMapper._transStarted">
	<summary>
 Boolean to indicate whether the save operation has started
 a transaction.  At the save of the Function Definition, the code checks whether 
 the dbutils object has started a transaction.
 If not, it starts it and sets this flag to TRUE.  
 At the end of the save operation, the transaction is committed, if this flag is true
 At the FINALLY clause on the save, the transaction is rolled back, if this flag is true
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.beginTrans">
	<summary>
 Check if the DBUtils connection is uin a transaction.  IF not, start a transaction
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.rollbackTrans">
	<summary>
 Check if the DBUtils started a transaction, the roll it back 
 and set the _transStarted flag.
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.commitTrans">
	<summary>
 Check if the DBUtils started a transaction, the commit it 
 and set the _transStarted flag.
 </summary>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.save(org.model.lib.Model.IModelObject)">
	<summary>Save a ModelObject to the database
	This method first calls saveModelObject and then saveChildren </summary>
	<param name="o">ModelObject to save </param>
</member><member name="M:org.model.lib.DBMapper.saveModelObject(org.model.lib.Model.IModelObject)">
	<summary>
 routine to Save data of ModelObject to database
 The database is hit ONLY if the object has changed (Dirty flag=True) 
 and also isEmpty function returns false
 After save, the dirty flag is set to False </summary>
	<param name="o"> ModelObject to save </param>
	<seealso></seealso>
</member><member name="M:org.model.lib.DBMapper.saveParents(org.model.lib.Model.IModelObject)">
	<summary>Saves any **Parent** ModelObjects associated with the ModelObject to the database.
 Clients should override this for any Parent objects that the Model Object mo carries
 Example:
 <ul>
			<li>Person and Address, 1-to-1 relationship, with the AddressID on the Person object</li>
			<li>Address must be saved first in order to save Person.</li>
			<li>Address object must be a parent</li>
		</ul>
	</summary>
	<param name="mo"> ModelObject that parent belongs to </param>
</member><member name="M:org.model.lib.DBMapper.saveChildren(org.model.lib.Model.IModelObject)">
	<summary>  Saves any child ModelObjects associated with the ModelObject to the database.
 Clients should override this for any children objects that the Model Object mo carries </summary>
	<param name="mo"> ModelObject that children belong to </param>
</member><member name="M:org.model.lib.DBMapper.update(org.model.lib.Model.IModelObject)">
	<summary>  Performs an <b>update</b> operation to the database </summary>
	<param name="o"> ModelObject to save to database </param>
</member><member name="M:org.model.lib.DBMapper.getModelInstance">
	<summary>
 Returns a new instance of the ModelObject we are handling
 with the dbMapper
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.getUpdateDBCommand(org.model.lib.Model.IModelObject,System.String)">
	<summary>
 Returns an IDBCommand object, filled with parameters for insert or update.
 </summary>
	<param name="obj">ModelObject that holds data</param>
	<remarks></remarks>
</member><member name="M:org.model.lib.DBMapper.insert(org.model.lib.Model.IModelObject)">
	<summary>  Performs an <b>insert</b> operation to the database </summary>
	<param name="mo"> ModelObject to save to database </param>
</member><member name="M:org.model.lib.DBMapper.delete(org.model.lib.Model.IModelObject)">
	<summary>  Performs an <b>delete</b> operation to the database </summary>
	<param name="mo"> ModelObject to save to database </param>
</member><member name="M:org.model.lib.DBMapper.deleteByKey(System.Object)">
	<summary>  Performs an <b>delete</b> operation to the database </summary>
	<param name="Id"> Id of modelobject to delete from database </param>
</member><member name="T:org.model.lib.DBMapper">
	<summary>  
  Base Class for Database Data Mapper Pattern
  This class has the responsibility of loading 
  data into Model Objects, and saving them back to 
  the Database </summary>
</member><member name="T:org.model.lib.Model.IHistorical">
	<summary>
 Represents a Model Object with a From-To effective date fields
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>