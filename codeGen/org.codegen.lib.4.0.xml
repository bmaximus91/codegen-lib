<?xml version="1.0"?>
<doc>
<assembly>
<name>
org.codegen.lib.4.0
</name>
</assembly>
<members>
<member name="T:org.codegen.lib.FileGroupLoader">
	<summary>
 Abstracts the Loading of the group of files to be generated for each 
 object to generate.  This allows for customization of file groups
 </summary>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.DBTable.CustomizedFields">
	<summary>
 The set of fields that have been defined and customized in the generator xml 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.DBTable.Associations">
	<summary>
 List of Associations
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.DBTable.addExludedField(System.String)">
	<summary>
 Adds a field in the exluded field collection of the object
 Such fields will not be included in code generation or sql generation
 </summary>
	<param name="fname"></param>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.DBTable.applyXMLCustomizations">
	<summary>
 If a field has been customized / specified in the xml generator specification
 we apply the customization here
 </summary>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.DBTable.ImplementedInterfaces">
	<summary>
 Implemented Interface(s) by the class
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Tokens.IReplacementToken.StringTokenToReplace">
	<summary>
 The StringToReplace enclosed in &lt; and &gt;
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Tokens.IReplacementToken.getReplacementCode(org.codegen.lib.IObjectToGenerate)">
	<summary>
 Returns the code that will replace the token
 </summary>
	<param name="t">ObjectToGenerate</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Tokens.IReplacementToken.replaceToken(System.String,org.codegen.lib.IObjectToGenerate)">
	<summary>
 Returns the TemplateCode parameter, with the token replaced with "getReplacementCode" string
 </summary>
	<param name="templateCode"></param>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.FileComponents.IVBProjectIncludedFile.FileNameForProject">
	<summary>
 This is the complete path + file name, relative to the root of the project
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.FileComponents.IVBProjectIncludedFile.FileName">
	<summary>
 The file name without the path
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.FileComponents.IVBProjectIncludedFile">
	<summary>
 Intrerface representing a file included in vb.net project
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Utilities.getResourceFileText(System.Type,System.String)">
	<summary>
 Loads a file stored in an assembly as "embedded resource"
 </summary>
	<param name="resname">Fully qualified resource name, for example, com.neu.lib.File.txt</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Utilities.getResourceFileText(System.String)">
	<summary>
 Loads a file stored in an assembly as "embedded resource"
 </summary>
	<param name="resname">Fully qualified resource name, for example, com.neu.lib.File.txt</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.Utilities">
	<summary>
 Shared utiliy functions
 </summary>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.IAssociation.DataType">
	<summary>
 The association datatype, as defined in the XML definition
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.IAssociation.getInterfaceDeclaration">
	<summary>
 declartation of this in the properties of the interface
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.Tokens.ClassFieldDeclarationsToken">
	<summary>
 Model Object field declarations.  This applies only to file type ModelObjectBase
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Tokens.ReplacementToken.getReplacementCode(org.codegen.lib.IObjectToGenerate)">
	<summary>
 The code that will replace the token
 </summary>
	<param name="t"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.ModelGenerator.relativeDirectory">
	<summary>
 relative directory to decide paths when using . and .. in output directories
 </summary>
</member><member name="T:org.codegen.lib.ModelGenerator">
	<summary>
 Generates ModelObject derived classes based 
 on the ModelObject and Mapper objects 
 </summary>
</member><member name="T:org.codegen.lib.FileComponents.IReplacementComponent">
	<summary>
 Decorator pattern: This is the component interface
 </summary>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.FileComponents.GeneratedFileComponent.templateFileName">
	<summary>
 The template file, if any
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.FileComponents.GeneratedFileComponent.generatedCode">
	<summary>
 the code generated after calling function generateCode()
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.FileComponents.GeneratedFileComponent.objectToGenerate">
	<summary>
 Reference to IObjectToGenerate object, loaded from the xml
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.FileComponents.GeneratedFileComponent.WriteFileIf">
	<summary>
 Switch that decides whether the file will be generated if it has chnages, always or if it does not exist
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.FileComponents.GeneratedFileComponent.getExistingCode">
	<summary>
 get existing code of file
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.FileComponents.GeneratedFileComponent.replaceTokens">
	<summary>
 Loops thru the collection of Tokens.IReplacementToken and does the replacements
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Association.getInterfaceDeclaration">
	<summary>
 declartation of this in the properties of the interface
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.Association.GetAssociatedMapperClassName">
	<summary>
 Returns the mapper of the parent object of this association
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.IDBField.UserSpecifiedDataType">
	<summary>
 The data type of the field as defined / customized in the xml generator file.
 If no customized data type was defined, then the default data type of the field
 as defined in the databse table structure
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.CSharpAssociation.getInterfaceDeclaration">
	<summary>
 declartation of this in the properties of the interface
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.FileComponents.SQLStatementsFileComponent">
	<summary>
 Generates SQL Statement file.  Inherits from DBMapper because 
 the namespace is the same, and the class name is the same
 </summary>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.IDBTable.addExludedField(System.String)">
	<summary>
 Adds a field in the exluded field collection of the object
 Such fields will not be included in code generation or sql generation
 </summary>
	<param name="fname"></param>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.IDBTable.CustomizedFields">
	<summary>
 The set of fields that have been defined and customized in the generator xml 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.FileComponents.ModelObjectFileComponent.ClassName">
	<summary>
 Returns the class name of the Object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.FileComponents.ModelObjectFileComponent">
	<summary>
 File component responsible for generating ModelObject classes
 </summary>
	<remarks></remarks>
</member><member name="T:org.codegen.lib.IGeneratedFileComponent">
	<summary>
 Decorator pattern: Another component interface
 </summary>
	<remarks></remarks>
</member><member name="F:org.codegen.lib.FileComponents.DotNetClassFileComponent._FileNameForVBProject">
	<summary>
 The file as written in the vb.net project file.
 </summary>
	<remarks></remarks>
</member><member name="F:org.codegen.lib.FileComponents.DotNetClassFileComponent._ClassName">
	<summary>
 The class name of the file.
 </summary>
	<remarks></remarks>
</member><member name="F:org.codegen.lib.FileComponents.DotNetClassFileComponent._ClassNameSpace">
	<summary>
 The class namespace
 </summary>
	<remarks></remarks>
</member><member name="P:org.codegen.lib.DBField.UserSpecifiedDataType">
	<summary>
 The data type of the field as defined / customized in the xml generator file.
 </summary>
</member><member name="P:org.codegen.lib.DBField.FieldDataType">
	<summary>
 The data type of the field as defined / customized in the xml generator file.
 If no customized data type was defined, then the default data type of the field
 as defined in the databse table structure
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:org.codegen.lib.VBProjectHandler.findNode(System.String,System.String,System.String)">
	<summary>
 Searhes and finds a node 
 </summary>
	<param name="searchString">String to find</param>
	<param name="tagName">The tag name of the nodes to search in</param>
	<param name="attribName">The atribute name whose value will search for a match of search string</param>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>